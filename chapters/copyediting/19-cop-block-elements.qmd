---
editor_options: 
  markdown: 
    wrap: 90
---

# Simple block elements

## What is a block?

A traditional document consists of *lines of text* organized into *blocks*, e.g. paragraphs or headings. 
A markdown document is likewise organized into *inline elements* that are put together into *block elements*. 

- Inline elements
  - words and spaces,
  - a few words in italics,
  - a formula in the flow of the text, such as $x+y=c$.
- Block elements
  - paragraphs
  - section headings
  - images, figures, tables
  - footnotes
  - 'Divs', i.e. arbitrary divisions
  - ...

Some blocks ('Div' blocks, tables, footnotes) contain other blocks. 

Some mathematical formulas are blocks, others are inline. We deal
with them separately in @sec-cop-math-latex. 

## Paragraphs

**New paragraphs** are encoded by leaving an empty line. That is, 
an empty line separates two paragraphs.

In typography paragraphs are distinguished from each other in two ways:
first-line indentation (common in books) or a vertical space (common
on the web). Your journal template will automatically typeset those. 

If your journal template uses the first-line indent way of separating
paragraphs, it will mostly handle typographic conventions correctly. 
For instance, it will be set not to indent the first line of paragraphs 
right below a heading (English convention) or to indent it (common in French).
However, there are a few cases where you will need to manually specify that a first-line indent is or is not desired. See below. 

Sometimes (rarely) you need a line break that does not start a new paragraph. 
See @sec-linebreak.

*Problem*. Text that directly follows a list, quote, figure, table or other 
indented material (statement) may either be a  *continuation* of the previous
paragraph or the *beginning* of a new one.  That is a matter of meaning (is the
text finishing the previous idea, or beginning a new idea?) and may not 
be clear-cut in all cases. If your journal uses first-line indentation to separate
paragraphs, continuations should not be typset with an indented first line, but
new paragraphs should. 

The engine makes default assumptions: normally text below a list, quotation
or statement continues the paragraph above and text below a table 
is a new paragraph. When the default assumption is wrong, we need to manually
specify that a paragraph's indent is to be treated otherwise. 

There are two ways to solve this. 

::: house

*Dialectica guidelines*. Our template uses the first-line indentation style of
separating paragraph, and we use the first solution below. Sometimes it is
unclear whether a paragraph continues the previous one or is a new one: the
best is to ask the author, but you can also use your best judgement.

:::

### With the first-line-indent filter

*Requires*: the `first-indent-line` filter. 

* Add `\indent` at the beginning of a paragraph to force a first-line indentation.
* Add `\noindent` at the beginning of a paragraph to prevent first-line indentaiton.

Example. In the text below, the quotation ends the paragraph: 
the text below the quotation isn't a *continuation*
of the previous paragraph but a new paragraph. This goes against the
default assumption, so we need to add `\indent`. On the other hand,
the paragraph under the table *is* a continuation of the previous one,
which also goes against the default assumption. So we add a `\indent`. 

```markdown
In the final words of the wise man:

> It's unclear what is going on here.

\indent Now on another note, we can see from the table below:


Test group   Control group
----------- ----------------
.9            .9

\noindent That we don't observe any difference between the two groups.

```

*Note*: `\indent` and `\noindent` are LaTeX code, but the `first-line-indent` 
filter ensures they are formatted correctly in other output formats. 

*Note*: you can follow this section's advice even if your journal doesn't 
currently use first-line identation to separate paragraphs but vertical
spaces instead. With the `first-line-indent` filter the added code won't make
a difference to the output, but it will allow you to switch to first-line
indent later if needed. 

See the [first-line-indent filter's
page](https://github.com/dialoa/first-line-indent/)
for more options and information. 

### Without the filter

If your journal does not use the `first-line-indent` 
filter, you can only control first-line indentation for the LaTeX/PDF output,
not HTML.

Without the filter, text after *any* block element is treated as a new 
paragraph. 

* Add `\noident` at the beginning of paragraphs following quotations, 
  statements, lists unless they are genuninely new paragraph.
  
You may add `\indent` on paragraphs that need to be indented, but that'll be
the default.

*Note*: if your journal currently uses vertical spacing rather than first-line
indentation to separate paragraphs, adding `\noindent` codes does no harm. But
if you don't use the `first-line-indent` filter, adding `\indent` codes will
indent paragraphs even if the journal style uses vertical spacing. So either
use the filter or don't use indent codes unless your journal is set to use
first-line indentation. 

## Headings

Headings of different levels (section, subsection, subsubsection) are encoded 
as a line starting with `#`, `##`, `###` followed by the title.

+-----------------------------------+-------------------------------------------+
| I want                            | I type                                    |
+-----------------------------------+-------------------------------------------+
| **1. Section heading**            | `# Section title`{.markdown}              |
+-----------------------------------+-------------------------------------------+
| **1.2 Subsection heading**        | `## Subsection title`{.markdown}          |
+-----------------------------------+-------------------------------------------+
| **1.2.1 Subsubsection title**\    | `### Subsection title`{.markdown}         |
+-----------------------------------+-------------------------------------------+
| lower titles                      | `####`, `#####`, `######`                 |
+-----------------------------------+-------------------------------------------+

::: private
In *Dialectica* headings are numbered up to the subsection (`#`, `##`, `###`). Headings of level four (`####`) are used for un-numbered smaller units. 

We have also two "inline" headings style, where the heading title is displayed at the beginning of the following paragraph rather than on its separate line. They are level 5 (`#####`) and level 6 (`#######`).

We discourage authors from using headings below the subsection (`##`) in articles though, though we can use them if the they improve readibility.


:::

Do not manually add numbers to section headings. They are automatically added by
the house template.

+---------------------------------------+---------------------------------------+
| BAD                                   | GOOD                                  |
+=======================================+=======================================+
| `# 1 Methods`{.markdown}              | `# Methods`{.markdown}                |
+---------------------------------------+---------------------------------------+
| `# 1`{.markdown}                      | `# `{.markdown}                       |
+---------------------------------------+---------------------------------------+

If the heading has no title, you should simply enter `#` (or the relevant level) 
with no title. 

::: private
-   If an article starts with an introduction section, that section should not
    have aheading. So do not start articles with:

``` {.markdown}
# Introduction
```
:::

## Footnotes and endnotes

Your template decides whether notes are printed out as footnotes or 
endnotes. The encoding is the same whichever it uses. We'll call them
"notes" here.

There are two ways to enter notes. The first is *inline, without identifier*. 
This is suitable for brief notes:

> This is the main text.^[In footnote, I distract you with an irrelevant point.]
  This continues the main text.
  
  ```markdown
  This is the main text.^[In footnote, I distract you with an irrelevant point.]
  This continues the main text.
  ```
  
The second is a *reference link, with identifier*. This is suitable for longer
notes, and required if a note has several paragraphs:

> This is the main text.[^myidentifier] This continues the main text.
> This next paragraph that isn't part of the footnote.

[^myidentifier]: This note takes more space.

    It contains several paragaphs.
                 
    > It even includes a quotation.
                 
    And ends here.
  

```\markdown
This is the main text.[^myidentifier] This continues the main text.

[^myidentifier]: This note takes more space.

    It contains several paragaphs.
                 
    > It even includes a quotation.
                 
    And ends here.
    
This next paragraph that isn't part of the footnote.
```

Note that the `^` is outside of square brackets in the inline style, inside it
in the reference style. In the reference style the footnote can be placed
anywhere in the document. Common choices are at the end of the 
current block or at the end of the current chapter, or at the end of the 
document or chapter.

In multi-paragraph footnotes, indent each block with two
spaces to indicate that it's part of the footnote rather than resuming the main
text, as in the example above. 

In the reference style you can use numbers as identifiers:

> This is the main text.[^1]

[^1]: this is the foonote.

```markdown

> This is the main text.[^1]

[^1]: this is the foonote.
```

Number identifiers can be a problem if you're planning to fuse several 
documents, e.g. chapters of a book or articles in a journal issue. For two
`[^1]` footnotes in separate chapters will create an error. However, Quarto
or the `collection` filter can handle these conflicts. With them number
identifiers are fine. 

Cross-reference to footnotes has to be done manually. Don't enter them before
you know that the footnote numbers are final. See the cross-referencing chapter.

::: house
**Dialectica guidelines**.

It's fine to use link references with simple numbers: `[^1]`, `[^2]`, as
we use the `collection` filter. These are automatically generated by Pandoc
when converting manuscripts and it's a waste of time to replace them. Our
`collection` filter ensures that no identifier conflict arises between articles. 

:::

## Divs {#sec-divs}

Divs are general-purpose blocks that we use to typeset advanced
elements like statements, or to mark out sections of a document
for a special treatement, e.g. 'imagifying' all the LaTeX formulas
it contains. This section explains how to encode them.

A Div is an arbitrary document *division*, usually invisible to the reader. 
It contains one or more blocks---which can be paragraphs, quotations, etc. 
or even other Divs. It also has *attributes*, and that is what makes it useful:
for we use the attributes to tell our typesetting engine that the Div's content
are to receive a special treatement. In the case of statements, we use a Div
with the special `statement` attribute to tell the engine that its contents
are a statement---hence, that they must be indented. 

In markdown, Divs are created using a pair of "fences", which are single lines 
consisting of one or more colons:

```markdown

This paragraph is in the main flow of text.

:::

This paragraph is inside a Div.

This paragraph is also inside the same Div

:::

```

The first `:::` fence opens the Div, the second one closes it. We can include 
a Div within a Div by using a greater number of colons for the enclosed one:

```markdown

This paragraph is in the main flow of text.

:::

This paragraph is inside a Div.

:::::

This paragraph is inside a new Div that's inside the first Div.

:::::

This paragraph is inside the first Div.

:::

```

It's good practice, though not technically necessary, to use the same number of
colons for the opening fence and the closing fence of the same Div. 

The Divs in the examples above are completely invisible in PDF or html outputs.
Divs become interesting when you give them *attributes*. Attributes are added
to the *opening* fence of a Div, between curly braces:

``` markdown

::: { .statement #myprinciple color=red }

Everything comes in due time.

:::

```

This illustrates the three kinds of attributes a Div may have:

1. one or more *classes* indicated with a dot, e.g. `.statement`. 
  A class indicate that the Div is of a certain kind. Several Div can be of
  the same class (kind), and a single Div can have several kinds.
2. an unique identifier aka *ID*: indicated with a hash, e.g. `#myprinciple`. 
  This uniquely identifies a Div, to cross-reference it for instance. A Div
  can only have one ID, and a Div's ID should not be assigned to any other
  Div nor even to any other element (such as a heading, figure, etc.).
3. *Key-value pairs*, indicated by the equal sign, e.g. `color=red`. These
  are used to state that a certain aspect of the Div (e.g., the text color)
  has a certain value. If the value contains space or special symbols it's
  enclosed in quotation marks. 
  
For statements only classes and IDs are relevant. 

When a Div's attributes consist of *a single class, and nothing else*, it 
can be encoded without curly braces and dots. Thus the following:

``` markdown

::: { .statement }

Everything comes in due time.

:::

```

can be abbreviated:

``` markdown

::: statement

Everything comes in due time.

:::
```

Some prefer more visible fences. You can use full lines of colons. If there
are attributes, you may add colons after the attributes too. For instance,
the earlier attributes example can just as well be encoded as:

``` markdown

::: { .statement #myprinciple color=red } :::::::::::::::::::::::::

Everything comes in due time.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

```

This is wholly up to you: using full-width fences or shorter ones
makes no difference to the result. 

