# Dialectica new house style outputs DRAFT {#sec-dialectica-house-outputs}

The association is setting up a standardized compilation environment for
Dialectica. This environment essentially encapsulate all of the tools
needed for the copyediting work, including pandoc, LaTeX, Lua, and
Quarto.

## Setting up your system

Dialectica copyediting requires:

-   Git, to clone [the repository of the compilation
    environment](https://github.com/Philosophie-ch/dltc-compilation-env)
-   Docker, to run a container containing the actual environment
-   VSCode, to connect to and use the container

Briefly put, to set up, you need to install git and docker, and then be
able to connect to a running container using the VSCode extension "Dev
Containers". How to do this up will depend on your specific Operaitng
System. If you know how to do this on your own, just skip the steps
below and go chapter 3. Note that VSCode replaces RStudio as a more
modern general text editor, better suited to interact with modern
software tools (such as docker) and languages other than R (such as
Markdown, LaTeX, and HTML).

For any problem not covered here, please contact Luis Bordo at
`luis.bordo@philosophie.ch`.

### Installing git, docker, VSCode

The following instructions need to be executed only once per machine.
Here we will install and set up Docker, Git, and VSCode in your machine.

#### Windows

1.  Download and install [git](https://git-scm.com/downloads)

2.  Check that git is working in PowerShell. If you get no errors with
    the command below, then git is working correctly:

``` powershell
git --version
```

3.  Download, install, and open [Docker
    Desktop](https://www.docker.com/products/docker-desktop/)
    1.  When installing Docker, choose the option to use WSL 2
4.  Open PowerShell (you have it installed by default) and check that
    you have `wsl` version 2 or above with

``` powershell
wsl --version
```

-   If you don't, do `wsl --install`, wait, and do again `wsl --version`
-   If you still don't have wsl version 2 or above, go to the
    Troubleshooting section below

5.  Check that Docker is configured to run with WSL 2: open Docker
    Desktop, go to Settings, and mark the checkbox for using WSL 2 if
    it's not marked already

6.  Now, in PowerShell, check that docker is working with:

``` powershell
docker run hello-world
```

If you don't get any errors, then docker is working in your machine

7.  Install [VSCode](https://code.visualstudio.com/Download)

#### Mac

1.  Install [brew](https://brew.sh/)

-   For this, usually it's a single command to execute in a terminal;
    just follow the instructions in the page

2.  Install `git` using brew. In a terminal, do:

``` zsh
brew install git
```

3.  Check that git is working, in a terminal. If you get no errors with
    the command below, then git is working correctly:

``` zsh
git --version
```

4.  Download and install [Docker
    Desktop](https://www.docker.com/products/docker-desktop/), make sure
    to pick your correct processor (Mac Intel Chip or Mac Apple Chip)

-   To check which processor you have, **TODO**

5.  Install `colima` using brew. This will allow us to use the docker
    engine on its own without relying on Docker Desktop. In a terminal:

``` zsh
brew install colima
echo "export DOCKER_HOST=unix:///$HOME/.colima/docker.sock" >> $HOME/.zsh_profile
colima start
```

6.  Install `docker-compose` using brew. In a terminal:

``` zsh
brew install docker-compose
```

7.  Check that docker is working, in a terminal. If you get no errors
    with the command below, then docker is working correctly:

``` zsh
docker run hello-world
```

8.  Install [VSCode](https://code.visualstudio.com/Download)

#### Linux

1.  Install git

-   You most likely have it by default already. You can test this by
    doing `git --version` in a terminal
-   If you don't have it, install it using your distribution's package
    manager. For example, in Debian and Ubuntu (and Ubuntu-based
    distributions), do `sudo apt install git` in a terminal

2.  Follow [the official Docker
    instructions](https://docs.docker.com/engine/install/#server) to
    install Docker Engine in your Linux distribution

-   Follow [the post-installation
    steps](https://docs.docker.com/engine/install/linux-postinstall/) to
    use docker in your terminal without needing to write `sudo`
    everytime
-   If you opt out from following these post-installation steps, you
    will need to adapt the docker comands in this document (i.e., append
    `sudo` to all of them, everytime)

3.  Check that docker is working, in a terminal. If you get no errors
    with the command below, then docker is working correctly:

``` bash
docker run hello-world
```

4.  Install [VSCode](https://code.visualstudio.com/Download)

### Setup: pulling the docker image, cloning the git repository

**NOTE**: for the moment, the compilation environment will **not** work
on Mac if you have an Apple Silicon chip. This will be fixed soon
enough. For the moment, you can follow this guide to set up what you
need (git, docker, VSCode, and the VSCode extensions).

Once you have installed up all of the necessary dependencies (git,
docker, VSCode) and they work in your machine, we proceed as follows.
The terminal commands below should work in any shell in any operating
system (PowerShell in Windows, zsh in Mac, bash in Linux).

1.  Using a terminal, first login to the dockerhub account of the
    association. For this, you will need the `access token` which you
    can find in the Institutional Setup in our Google Drive:

``` sh
docker login -u philosophiech
# Paste the access token as the password
```

**NOTE**: terminals often hide the characters when you type in
passwords. Just copy and paste the access token when asked for the
password and it will work.

-   For Mac users: if this command fails, try the following quick fix
    and then try again:

``` sh
mv ~/.docker/config.json ~/.docker/config.json_bkp
```

-   (cont.) Don't do this if you were using Docker before outside of the
    association. There's a cleaner (but a bit longer) fix, at the
    section "solution 3" of [this
    article](https://sparkbyexamples.com/docker/docker-error-storing-credentials-err-exec-docker-credential-desktop-executable-file-not-found-in-path-out/)

2.  Now you need to pull the latest image that contains the Dialectica
    compilation environment:

``` sh
docker pull philosophiech/dltc-env:latest
```

**NOTE**: this may take a while, as the image is quite heavy (\~15GB).

3.  While you wait for the pull to finish, using a terminal, go to
    somewhere in your file system and use `git` to clone the Dialectica
    compilation environment repository. It is recommended to create a
    'gitrepos' folder in your home folder, so you don't need to remember
    where you put the git repository everytime. The instructions that
    follow later will assume that you did so. In a terminal, do:

``` sh
# First, navigate to your home folder
cd ~
# Second, create a folder in which you'll put git repositories
mkdir gitrepos
cd gitrepos
# Third, clone the git repository containing the source code of the compilation environment
git clone https://github.com/Philosophie-ch/dltc-compilation-env.git
# This will creat a folder called 'dltc-compilation-env'. This folder is the *root* of the repository
cd dltc-compilation-env
```

4.  At the root of the repository, follow the instructions of the
    README.md file there to set up an `.env` file in your local machine.
    You can either open this README file from your file explorer, or
    from the terminal directly doing `cat README.md`. You will need to
    create a .env file by copying `.env.template`, and then modifying it
    with your preferred text editor:

``` sh
cp .env.template .env
cat README.md
# Do the necessary modifications explained in README.md and save the .env file
```

5.  Once you have set up your `.env` file, you're ready to use the
    docker compose file (also at the root of the repository) to start a
    container.

``` bash
# On Windows and Linux
docker compose up -d
# On Mac
docker-compose up -d
```

We do this because we cannot directly use docker images on their own,
first we need to start a container from them. After this step, you're
ready to start using the new container you created from the image you
pulled from dockerhub.

There are many ways to use a running container, but for our puroses, the
easiest is to use VSCode.

### Setup: VSCode

While not strictly mandatory, it is highly recommended to replace
RStudio with VSCode for the copyediting work. VSCode is a modern,
general text editor suited for all tasks programming and writing. It has
support for state-of-the-art software tools such as Docker, and through
its vast market of extensions, provides better support for Markdown,
LaTeX, and HTML than RStudio (which is designed to work with the R
programming language).

For this subsection, it is recommended that you create a
[GitHub](https://github.com/) account, and then connect to it in VSCode.
So, after creating your account, open VSCode.

1.  Now connect VSCode to your GitHub account. To do this, look on the
    vertical toolbar to the left and down for 'Accounts', and connect to
    your GitHub account. Then, clicking again on 'Accounts', enable both
    'Settings Sync' and 'Turn on Cloud Changes'. This will synchronize
    your VSCode settings in any device you connect it to your account.

-   Recommended: click on the cogwheel icon at the bottom of the
    vertical toolbar on the left, and go to "Settings". Look on the
    search bar for "telemetry", and set the "Telemetry Level" to "off".
    We don't need Microsoft spying (more than it already does) on us.

2.  Then, it is recommended that you create a 'profile' to manage the
    extensions you need for copyediting.

-   In the vertical toolbar to the left, below 'accounts', click on
    Settings \>\> Profiles \>\> Create profile...
-   Give a name to your profile e.g., "dltc-copyediting" and use the
    default options

3.  Now we will install some extensions needed for the copyediting
    workflow. In the toolbar to the left, look for the "Extensions"
    button. There, using the search bar, look for and install the
    following:

-   Remote Explorer (by Microsoft)
-   Dev Containers (by Microsoft)
-   LaTeX Workshop (by James Yu)
-   Markdown All in One (by Yu Zhang)
-   Quarto (by Quarto)
-   HTML Preview (by George Oliveira)

Other recommended extensions are:

-   Error Lens (by Alexander)
-   GitHub Copilot (by GitHub)
-   GitHub Copilot Chat (by GitHub)

To use the last tool, you need a GitHub pro account. If you have a
university student account and email, [you can be granted a pro account
for free](https://education.github.com/pack). Copilot is an AI assistant
that can help you code in general, including help you with Markdown and
LaTeX, both directly in VSCode when you edit files and in a chat button
provided by the Chat extension (that will appear in the left toolbar).

Now, whenever you start VSCode, make sure that you're connected to your
GitHub account (in "Accounts"), and that you're using the profile you
created (in "Settings \>\> Profiles"). Also make sure that the
extensions are installed *inside* the container (in "Extensions").

4.  Once everything is installed, back at the "Extensions" button of the
    left toolbar, clear any search in the searchbar. Now, you will see
    that some extensions ask to be installed in the container. To do
    this en masse, look for the separator that says "CONTAINER
    PHILOSOPHIECH/DLTC-ENV..." and click on the cloud icon with a
    downward pointing arrow. This will install all of your extensions in
    the container.

5.  Now go back to the left toolbar and look for "Remote Explorer"
    (looks like a computer screen). At the top, there will be a
    drop-down menu in which you can select "Dev Containers".

6.  You will now see the name "compilation-env dltc-env". If you hover
    with the mouse, you'll see an arrow whose name is "Attach in Current
    Window". Click it, and VSCode will start running inside the
    container (you can check that by looking at the bottom left of the
    VSCode window).

7.  Now you can work as usual, but inside this container you have all of
    the necessary tools available, including a full LaTeX environment
    with all possible dependencies, pandoc, and quarto.

In general, be careful with what you do even inside the container. While
the container is relatively isolated from your machine, **it is
connected to the dltc-workhouse Dropbox folder**, so any changes or
deletions you make will affect everyone, as usual when working using
Dropbox.

We can install new tools or modify existing ones in the environment
depending on the needs of the copyediting team. Please contact Luis
Bordo at `luis.bordo@philosophie.ch` for any such request.

### New way of generating outputs: dltc-make

Whenever you're using the container for the Dialectica compilation
environment, from a terminal (inside the container) you have at your
disposition the command:

``` sh
dltc-make
```

This command essentially replaces the old `make.sh` and `make.bat`
scripts, and it's used in exactly the same way. The advantage is that
you don't need to copy the `make` files, just call the command. For
example, you just navigate to the folder where your article for
copyediting is, and then...

``` sh
dltc-make offpdf
```

...will produce a PDF as usual.

### Advanced: using the container directly from a terminal

Additionally, if you know what you're doing, you can start a shell
within the container without using VSCode. With this, you can use the
terminal directly to compile articles. Altough rather clumsy as an
approach, this would allow you to, for example, keep using RStudio to
work on copyediting tasks and then compiling the articles separatedly in
a terminal using the container.

From anywhere in your system, do:

``` sh
docker exec -ti --volume="YOUR/PATH/TO/Dropbox/philosophie-ch/dltc-workhouse:/home/copyeditor/dltc-workhouse" philosophiech/dltc-env:latest bash
```

If this worked properly, you should see your prompt change to
`copyeditor@dltc-env`. Here, you can now navigate to `~/dltc-workhouse`,
where you will find the usual Dropbox files for copyediting. If there's
enough demand, we can install additional tools in the container. Please
contact Luis Bordo at `luis.bordo@philosophie.ch` for any such request.

### Troubleshooting

#### Common issues

-   Problem: In VSCode, connected to the container, you don't see any
    file in 'dltc-workhouse' when you open it

Solution: this is most likely due to not properly setting your `.env`
file. Go to the folder in which you cloned the GitHub repository for the
compilation environment, copy the `.env.template` file to a new file
called `.env`. Now open this file, and change the value of
"DLTC_WORKHOUSE" to the full path of where the dltc-workhouse folder
(inside Dropbox) is.

Note that, for Windows, you need to change "\\" for "/" in the path
name. That is, if your folder is in "C:\\Users\\...", you must change it
to "C:/Users/...".

#### Installing WSL version 2 on Windows

**Note**: if you don't feel comfortable modifying the options of your
machine's BIOS or UEFI, get in contact with Luis Bordo at
`luis.bordo@philosophie.ch` to guide you through personally. Otherwise,
follow the instructions below.

1.  Enable 'virtualization'. To do this, we need to go to the computer's
    BIOS or UEFI. If you know how to do this, do it as you know and
    ignore the instructions below. Otherwise, follow these steps.
    **WARNING**: this will restart your computer:
    1.  Go to Settings
    2.  Go to Update and Security (or a setting with a similar name)
    3.  Go to "Recovery"
    4.  Click on `Restart now` in the section "Advanced start-up"
        1.  Click on "Troubleshoot"
        2.  Click on "Advanced Options"
        3.  Click on on the option that mentions either "UEFI" or "BIOS"
        4.  Click on "Restart". This will restart your computer and
            automatically send you to the BIOS or UEFI settings
    5.  Now this depends on your specific machine, but under some field
        called "Security", you should find a sub-field called
        "Virtualization". Inside this sub-field you should `Enable` all
        options
    6.  Save and exit the BIOS or UEFI. **IMPORTANT**: you need to SAVE
        before exiting, otherwise you will need to redo the steps above
    7.  To check that virtualization is enabled, go to the Task Manager,
        to the Tab **TODO**
2.  Enable 'wsl version 2'. Open PowerShell as Administrator, and then:

``` powershell
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

wsl --set-default-version 2
```

-   If something goes wrong, follow the instructions given in PowerShell
-   To check if all of this worked, do `wsl --version` in Powershell

# Generating outputs

By "Terminal" we mean a command line interface. See Appendix
-@sec-terminal-help on how to use it.

All file paths are given relative to the base ("root") of Dialectica's
workhouse folder. For instance:

```         
template/1.1/scripts/make.sh
```

\noindent is the `make.sh` file contained in the `scripts` folder
contained in the `1.1` folder contained in the `template` folder within
the dialectica workhouse folder.

Note for Windows users: paths are noted in the Linux / MacOS style with
a forward slash `/` separator. In Windows this would be a backslash `\`
instead:

```         
template\1.1\scripts\make.sh
```

## Setting up your system

### Pre-requisites

You will need the following (2 to 8 Gb disk space):

-   **Pandoc** version 3+. *\~240Mb*

-   A **LaTeX distribution**.[^61-dialectica-new-house-outputs-1]
    *\~200Mb (custom) to \~5Gb (full)*

-   **Fonts**: STIX Two, Libertinus (incl. Libertinus Display) and
    VenusSBExtended available in `dialectica-workhouse/resources/fonts`.
    *\<1Mb*

-   On **MacOS**, Apple's **Command line tools for Xcode**. *\~2.5Gb*

-   (Optional but recommended) **RStudio**, a markdown editor with a
    visual mode, a built-in terminal, and the ability to run scripts
    that generate HTML / PDF versions of your manuscript. *\~1Gb*

-   (Optional but recommended) on **Windows, latexmk**, a command-line
    program we use to generate PDFs. It is part of LaTeX but not always
    installed by default. *\~100Mb, if you need to install Perl*

[^61-dialectica-new-house-outputs-1]: LaTeX is called a 'distribution'
    or 'installation' because it's not a single program but a large
    collection of programs and 'packages' that work together to generate
    PDFs.

#### How to check what's installed

To check whether Pandoc, LaTeX and latexmk are installed, you can run
the following on a terminal (see Appendix -@sec-terminal-help on how to
do this). For Pandoc:

``` bash
pandoc -v
```

For LaTeX:

``` bash
pdflatex -version
```

For latexmk:

``` bash
latexmk -v
```

If you get error messages, they are not installed. If you get version
numbers, they are installed. This works on all systems.

### MacOS only

**To install Apple's Command Line Tools**. This is necessary even if
you're not going to use the command line your self: it installs the
software needed to run the "scripts" (short instruction files) that
render our outputs. Open the Terminal (in Applications \> Utilities),
type the following and hit Enter:

``` bash
xcode-select --install
```

If you get the error message "command line tools already installed",
it's already installed, you can close the terminal. Otherwise it will
download and install for some time. When it's finished, close the
terminal.

### Optional: install tools with a package manager

Package managers are tools to install and update software. Typically
terminal tools [see @sec-terminal-help] but Linux has graphical ones
too.

-   At installation time, they spare you looking up the software's
    website, downloading, running the installer. Instead you just run a
    simple command like `choco install pandoc` on the terminal and the
    manager installs Pandoc for you.
-   Later, they allow you to update *all* the software you've installed
    with them at once. No need to go back to the websites, download
    again etc. You run a command like `choco upgrade all`.
-   Less relevant for us: it handles 'dependencies', ie if the software
    you're installing needs another, it'll install the latter too.

For instance on MacOS you'd install LaTeX, Pandoc and RStudio by typing
just one command on the terminal: `brew install mactex pandoc rstudio`.

-   On Linux, there's a package manager pre-installed and you'll
    probably know what it is. In "Debian" distributions, Ubuntu
    included, it's [APT](https://en.wikipedia.org/wiki/APT_(software))
    (`apt-get install pandoc`). There are graphical user interfaces for
    it: Software center in Ubuntu, Synaptic in Linux Mint, and others.

-   On MacOS, install [Homebrew](https://brew.sh). Note: sometimes
    you'll see `--cask` in the command (compare `brew install pandoc` vs
    `brew install –cask rstudio`). The rule of thumb is that graphical
    programs are `--cask`, command line programs aren't. But don't
    worry, if you omit `--cask` the installation typically works anyway.
    You can formally check whether it's needed by searching the software
    on [homebrew](https://formulae.brew.sh)'s depository.

-   On Windows, install [Chocolatey](https://chocolatey.org). Important:
    don't forget that it can't be run in the basic CMD terminal but only
    in the "Windows Powershell" with administrator privileges. Search it
    in the start menu, right-click and chose "Run as administrator".

If unsure what the package name of some software is you can search it
online (e.g. "Ubuntu package texlive"). It'll probably land you on the
right page of their online package lists:
[debian](https://www.debian.org/distrib/packages#view),
[ubuntu](https://packages.ubuntu.com),
[homebrew](https://formulae.brew.sh),
[chocolatey](https://community.chocolatey.org/packages).

### Common to all platforms

#### Pandoc

Download and install from [Pandoc's
website](https://pandoc.org/installing.html).

Command line users: run `brew install pandoc` (MacOS, Homebrew),
`choco install pandoc` (Win, Chocolatey) or `apt-get install pandoc`
(APT, Linux) in a terminal.

#### LaTeX

Use either [MikTeX](https://miktex.org/download) or
[TexLive](https://tug.org/texlive/) (whose Mac version is called
[MacTeX](https://www.tug.org/mactex/)).

-   For MikTeX: download the installer, launch it. Select "install only
    for this user", and for installing packages on the fly, select "Ask
    me first".
-   For TexLive, non-Mac: download [the network
    installer](https://tug.org/texlive/acquire-netinstall.html), launch
    it. When/if offered the choice, choose to install "all" or
    "everything". This can take \~30 minutes depending on download
    speed.
-   For TexLive, Mac users: download [the
    installer](https://www.tug.org/mactex/).

MikTeX's advantage is that it downloads any needed packages on the fly,
so it's quicker to install and will get whatever you need. **So be aware
that if you use MikTeX, you first PDFs generation will open a window
asking you to confirm the download of packages and take a long time as
MikTeX download missing pages**. Don't worry, subsequent PDF generations
are much faster.

TexLive's full install is large (5Gb) and takes \~30 mins but you're
done once and for all---well, for one year, as it is updated yearly.

Command-line users:

-   Homebrew: `brew install --cask mactex`. Cannot install MikTeX (as of
    Jan 2023). MikTeX doesn't need brew anyway, it self-updates.
-   Chocolatey: `choco install miktex` or
    `choco install texlive --params "'/scheme:full'"`.
-   Linux: depends on package managers, e.g.
    `sudo apt-get install miktex` or
    `sudo apt-get install texlive-full`. However, you might need to add
    'Software sources' to do this: see e.g. the MikTeX webpage.

#### Fonts

Dialectica's fonts are located in
`dialectica-workhouse\resources\fonts`. Open a file browser and navigate
to the folder of a desired font (for Stix Two, `STIX Two fonts\OTF`).
Select all the files and, depending on system:

**To install fonts**, open the Finder and navigate to the folder where
the fonts are located (`dialectica-workhouse/resources/fonts`). Open the
folder of the desired font (for Stix Two, `STIX Two fonts/OTF`).
Double-click each file there (regular, italic, bold, ...), and in the
windows that appear, select "Install font". You can check that the fonts
are installed by opening the Font Book (in the Applications folder, or
Cmd + Space and search for Font Book) and selecting the User tab.

-   (Windows) right-click and select "Install fonts",
-   (Mac) Enter or right-click \> Open. Select "Install font" in the
    windows that open. You can check that they are installed by opening
    the Font Book app.
-   (Linux) depends on distribution. On Ubuntu, for instance,
    double-click on the font files opens a font viewer with the option
    to install. If that doesn't work on your distribution, try an online
    search.

#### RStudio (optional)

See [RStudio's download page](https://posit.co/downloads/) for
installation instructions. Command line users also install it with
package managers (e.g. `brew install rstudio`). RStudio needs R (a
statistics programming language), so you might need to install it too
(e.g. `brew install r rstudio`).

When installed, note that RStudio includes:

-   a *file browser* on the left
-   a *terminal* at the bottom, under the 'Terminal' tab. (The 'Console'
    is something else).
-   when editing markdown files, the `Source` and `Visual` tabs at the
    top left of the editor. These allows you to edit files in visual
    mode rather than markdown. Limitation: the visual mode can't be used
    if the manuscript contains "numbered examples lists".
-   when editing markdown files, an 'Outline' panel on the right side of
    the editor. Useful to navigate a manuscript.

RStudio might be intimidating at first: it's not a word processor but a
"development environment" for the statistics programming language R.
It's not just used to write programs, however, but also write documents
that embed compuations: a webpage with a graph that is daily updated, or
a scientific article that includes algorithms and data to reproduce its
results. So don't worry: you will mostly be using its markdown editor
here, which is powerful but simple. Some of the development features are
handy too, like the file browser and the ability to run scripts to
generate our outputs.

## Prepare an article or issue folder

You'll need to add a few files to your article working folder to be able
to generate outputs.

-   A 'maker script', i.e. a mini program that tells the computer how to
    generate your outputs.\
    This is the file titled `make.sh`.

-   A *master file*, which contains issue-level metadata needed to
    generate your article outputs.

### Ensure your folder contains the maker script

Check whether your working article folder contains a file title
`make.sh`. If it does, you're good.

If it doesn't, you should make a copy of it in your work article folder.
You can find it in `template/X.X/copyeditors-scripts`, where `X.X`
stands for the most recent template version. (That is the highest you
find, e.g. 1.2.) But this file is the same for each article and issue
that uses the *same* version of the *Dialectica* template, so you can
also copy it from other *article* folder in the same year.

Beware of copying `make.sh` from an *article* folder, not the *issue*
folder that contains it. (Article-folders `make.sh` tell the computer:
go three folder up and find the template engine; issue-folders `make.sh`
tell it: go *two* folders up and find the template engine; that's why
issue maker files don't work in article folders and conversely.)

### Create a master file

Copy a `master.md` file into your article folder. You can take one from
another article in the same issue, or the template one at
`template/X.X/copyeditors-scripts`. Beware: you can take the master file
in the *issue* folder, but if you do so you'll need to modify paths in
the `imports` field (see below).

Open the file in text editor. It should already contain an `imports`
metadata field that consists of a list of one or more files (each item
on a single line starting with a dash), for instance:

``` yaml
imports:
- 01-author.md
- 02-author.md
```

You should amend it to contain just one item referring to your file. If
your markdown file is `smith_j-2023.md` you should make it:

``` yaml
imports:
- smith_j-2023.md
```

*Note on issue master files*. Issues have master files too, where
located in issue folders. Their `imports` field normally contain a list
of all article files for that issue, *including which subfolder they're
in*, for instance:

``` yaml
imports:
- 01-jones/jones_s-2023.md
- 02-smith/smith_j-2023.md
- ...
```

Therefore, if you copy an issue master file within an article folder, or
the other way round, you should make sure you add (issue master file) or
remove (article master file) the subfolders names as required.

## Generate outputs

### With RStudio on Windows

On Windows, you might be able to generate outputs from RStudio directly
without running a command. If that fails, skip to the next sections and
run a command instead.

**Setup.** In RStudio, open your article's project and go to the menu
Build \> Configure Build Tools. Enter the following choices:

-   Project build tools: "Makefile"
-   Makefile directory: leave as default (Project Root).
-   Additional argument: empty to generate html, or any of the rendering
    commands detailed below [@sec-house-outputs-rendering-commands].

**Generate**. Once that is done, go to Build \> Build all (or use
Shift-Ctrl + B) to generate the desired output.

Go back to Build \> Configure Build Tools if you want to change the
format you're generating, e.g. enter `offpdf —proof` in Additional
argument to generate a proof PDF.

### Run a command in the terminal

In all systems, you can generate outputs by running the `sh make.sh`
command in a terminal.

-   In RStudio, if you've created a project for your article, it's best
    to use the Terminal within RStudio itself. See Tools \> Terminal.
    This terminal will be "located in" the project's folder, so you can
    just take `sh make.sh` to generate a html output.

-   If you're using a separate terminal application, you'll need to
    "navigate" to the folder where your article is. See
    @sec-terminal-help for help.

### Short rendering commands {#sec-house-outputs-rendering-commands}

Rendering commands can be executed in a *article*'s folder or in an
*issue* folder. All these commmands must be added to `sh make.sh`, e.g.:

``` bash
sh make.sh offprints
```

or used in the "additional argument" of RStudio's configure build tools
in Windows, as explained above.

Single-article outputs will be named after the source file, e.g.
`smith_j-2020.pdf`. Issue outputs will be named after the issue DOI,
e.g. `dial.v74.i1.pdf` or `dial.v75.i2-book.pdf`.

+----------------+--------------------------------------------+
| Command        | Output                                     |
+================+============================================+
| (empty)        | article in HTML                            |
+----------------+--------------------------------------------+
| `offpdf`       | article in PDF                             |
|                |                                            |
| `off1pdf`      |                                            |
+----------------+--------------------------------------------+
| `offtex`       | article in LaTeX. Useful to debug when the |
|                | PDF generation crashes: try                |
| `off1tex`      | `lualatex smith_j-2020.tex` to see error   |
|                | messages.                                  |
+----------------+--------------------------------------------+
| `refs`         | generate a list of references cited in the |
|                | article. Saved as                          |
|                | `<article_name>.bib.txt`. Only works when  |
|                | the references have been turned into       |
|                | citations and a bibtex file is provided.   |
+----------------+--------------------------------------------+

: Article folder rendering commands

+----------------+--------------------------------------------+
| Command        | Output                                     |
+================+============================================+
| (empty)        | first article in HTML                      |
+----------------+--------------------------------------------+
| `all`          | issue pdf, all articles PDF + HTML         |
+----------------+--------------------------------------------+
| `allhtml`      | all offprints (=articles) in HTML          |
+----------------+--------------------------------------------+
| `offprints`    | all offprints HTML and PDF                 |
|                |                                            |
| `off`          |                                            |
+----------------+--------------------------------------------+
| `vol`          | issue PDF                                  |
|                |                                            |
| `volpdf`       |                                            |
+----------------+--------------------------------------------+
| `off2`         | HTML of the second article (i.e. second    |
|                | item in the masterfile's `imports` list).  |
| `off2html`     |                                            |
+----------------+--------------------------------------------+
| `off2pdf`      | PDF of the second article (i.e. second     |
|                | item in the masterfile's `imports` list).  |
+----------------+--------------------------------------------+
| `off7tex`      | LaTeX of seventh article                   |
+----------------+--------------------------------------------+
| `voltex`       | LaTeX of the issue                         |
+----------------+--------------------------------------------+
| `refs`         | generate list of references cited for each |
|                | article. Saved as                          |
|                | `<article_name>.bib.txt`. Only works when  |
|                | for articles where references have been    |
|                | turned into citations and given in bibtex  |
|                | files.                                     |
+----------------+--------------------------------------------+
| `bare`         | Issue covers only, PDF (`bare`) or LaTeX   |
|                | (`baretex`). articles (also `baretex`).    |
| `baretex`      | Useful for cover design.                   |
+----------------+--------------------------------------------+

: Issue folder rendering commands

### Rendering options

Proof mode

:   Add `--proof` or `-p` at the end of your command (separated by a
    space):

:   ``` bash
    sh make.sh off2 --proof
    sh make.sh off3pdf -p
    ```

:   This only affects PDF output.

Verbose or quiet

:   Add `--verbose` or `-v` to get a detailed log of the rendering
    process. Useful for debug. You can save the output in a log file
    like so:

    ``` bash
    sh make.sh off2pdf -v 2> out.log 
    ```

    The `2>` tells the computer to "redirect" the error/information
    output to a file named `out.log`. This works in Windows and Linux /
    MacOS terminals.

    You can make the output quieter with `--quiet` or `-q`. Though
    certain programs executed during the rendering process may still
    display error or output messages. If you don't want to see anything
    just "redirect" the output to a file with `sh make.sh … 2> out.log`.

Single letter options can be combined: `-pv` is short for
`--proof —verbose`.

### Long rendering commands

Rendering commands can also be given in key-value form:

``` bash
sh make.sh mode=offprint chapter=3 format=pdf
```

-   `mode` includes "offprint" aka "off", "vol" aka "issue", "bare" ,
    "refs"

-   `format` includes `pdf`, `html`, `tex` aka `latex` (also `epub`,
    `jats` but we don't generate these yet)

-   `chapter` includes chapter numbers.

The advantage is that you can specify multiple modes and formats
separated by commas:

```         
sh make.sh mode=off,refs chapter=3,4,5
```

Rendering options like `--proof` can be combined with long rendering
commands.

## Advice on HTML vs PDF

HTML is best when you start working on an article because it's much
faster and less error-prone than PDF. HTML only fails to produce an
output if your document's metadata is ill-formed or if there's a bug in
the "filters" we use to format outputs.

PDF is best for the latter typesetting stages when you need to check
that the fine-grained outputs look right, that advanced LaTeX formulas
or images work correctly, that there is no awkward page break and so on.

##  {#sec-dltc-env-setup}
