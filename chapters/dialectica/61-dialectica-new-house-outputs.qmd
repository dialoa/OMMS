# Dialectica new house style outputs {#sec-dialectica-new-house-outputs}

The association is setting up a standardized compilation environment for
Dialectica. This environment essentially encapsulate all of the tools
needed for the copyediting work, such as pandoc, LaTeX, and Quarto.

## Setting up your system

Dialectica copyediting requires:

-   Docker, to run a container containing the actual environment
-   Git, to clone [the repository of the script to download and start
    the compilation
    environment](https://github.com/Philosophie-ch/dltc-env)
-   Recommended: VSCode, to comfortably connect and use the environment
    to edit articles

Briefly put, to set up, you need to install git and docker, and then be
able to connect to a running container. <!-- what is a running container? --> In this guide, we'll use VSCode <!-- what is VSCode -->
as it makes it very easy to work inside docker containers <!-- again -->, but you're
free to work in a different editor and use the container directly from
your terminal if you wish.

How to setup will depend on your specific Operating System. If you know
how to install and configure git, docker and VSCode on your own, just
skip this section and go chapter 3. Note that in this guide, VSCode
replaces RStudio as an alternative better suited to interact with modern
software tools (such as docker) and languages other than R (such as
Markdown, LaTeX, and HTML).

For guidance or any problem not covered here, please contact Luis Bordo
at `luis.bordo@philosophie.ch`.

### Installing git, docker, VSCode

The following instructions need to be executed only once per machine.
Here we will install and set up Docker, Git, and VSCode in your machine.

#### Windows

1.  Download and install [git](https://git-scm.com/downloads)

2.  Check that git is working in PowerShell. If you get no errors with
    the command below, then git is working correctly:

    ``` powershell
    git --version
    ```

3.  Download, install, and open [Docker
    Desktop](https://www.docker.com/products/docker-desktop/). When
    installing Docker, choose the option to use WSL 2.

    When you install Docker, you can use the recommended settings and 
    select "Continue without signing in".

4.  Open PowerShell (you have it installed by default) and check that
    you have `wsl` version 2 or above with

    ``` powershell
    wsl --version
    ```

-   If you don't, do `wsl --install`, wait, and do again `wsl --version`
-   If you still don't have wsl version 2 or above, go to the
    Troubleshooting section below

5.  Check that Docker is configured to run with WSL 2: open Docker
    Desktop, go to Settings, and mark the checkbox for using WSL 2 if
    it's not marked already.

    Additionally, in the settings, increase the CPU and memory limits of
    the containers to be at a minimum of 3/4 of your machine's
    resources. For example, if you have an 8 core CPU and 16 GB of RAM,
    you could set the limits to 7 cores and 14 GB of RAM.

6.  Now, in PowerShell, check that docker is working with:

    ``` powershell
    docker run hello-world
    ```

If you don't get any errors, then docker is working in your machine

7.  Install [VSCode](https://code.visualstudio.com/Download)

#### Mac

1.  Install [brew](https://brew.sh/)

-   For this, usually it's a single command to execute in a terminal;
    just follow the instructions in the page

2.  Install `git` using brew. In a terminal, do:

    ``` zsh
    brew install git
    ```

3.  Check that git is working, in a terminal. If you get no errors with
    the command below, then git is working correctly:

    ``` zsh
    git --version
    ```

4.  Download and install [Docker
    Desktop](https://www.docker.com/products/docker-desktop/). Make sure
    to pick your correct processor (Mac Intel Chip or Mac Apple Chip).
    ^[To check which processor you have, click on the Apple icon in the 
    top left corner of your screen and select "About This Mac" from the 
    dropdown menu. Look for the "Processor" field in the window that opens.]

    When you install Docker, you can use the recommended settings and 
    select "Continue without signing in".

5.  Configure Docker. Launch the Docker application and open "Settings".
    
    i. In the "General" tab, check that the following options 
    are enabled: "VirtioFS", "Use Virtualization framework",
    and "Use Rosetta for x86/amd64 emulation on Apple Silicon".
    (These settings may not appear on Intel Chip macs; 
    if they don't ignore this step.)
    
    ii. Increase the CPU and memory limits of
    the containers to be at a minimum of 3/4 of your machine's
    resources. For example, if you have an 8 core CPU and 16 GB of RAM,
    you could set the limits to 7 cores and 14 GB of RAM.

6.  Check that docker is working. In a terminal, run:

    ``` zsh
    docker run hello-world
    ```

    If you get no errors, Docker is working correctly. If you do, try 
    running Docker (in Applications). Docker's whale icon should appear 
    in your system icon bar (i.e. alongside icons for Wifi, Bluetooth etc.).

7. Download and install
    [VSCode](https://code.visualstudio.com/Download)

#### Linux

1.  Install git

-   You most likely have it by default already. You can test this by
    doing `git --version` in a terminal
-   If you don't have it, install it using your distribution's package
    manager. For example, in Debian and Ubuntu (and their derivatives),
    do `sudo apt install git` in a terminal

2.  Follow \[the official installation instructions for Docker\]
    (https://docs.docker.com/engine/install/#server) to install **Docker
    Engine** in your Linux distribution

-   Follow [the post-installation
    steps](https://docs.docker.com/engine/install/%20linux-postinstall/)
    to use docker in your terminal without needing to write `sudo`
    everytime
-   If you opt out from following these post-installation steps, you
    will need to adapt the docker comands in this document (i.e., append
    `sudo` to all of them, everytime)

    You can use Docker without siging in.

3.  Check that docker is working, in a terminal. If you get no errors
    with the command below, then docker is working correctly:

    ``` bash
    docker run hello-world
    ```

4.  Install [VSCode](https://code.visualstudio.com/Download)

### Setup: pulling the docker image and starting a container

Once you have the necessary dependencies (git,
docker, VSCode) are up and running on your machine, we proceed by using a
script made to automatically download the latest version of the docker
image containing the compilation environment, and start it. <!-- What does that mean? -->
 The terminal commands below should work in any shell in any operating system
(PowerShell in Windows, zsh in Mac, bash in Linux).

Note that these instructions are the same as the ones in [the
repository's README](https://github.com/Philosophie-ch/dltc-env). Make
sure that you have at least 10 GB of free space in your machine:

1.  Using a terminal, first clone the git repository where the start
    script is: <!-- the repository that contains the start script? -->
    <!-- which should be your preferred location?? People who don't have GitHub repos cloned don't understand -->

    ``` sh
    # cd to your preferred location. For example:
    # mkdir ~/gitrepos
    # cd ~/gitrepos
    git clone https://github.com/Philosophie-ch/dltc-env.git
    cd dltc-env
    ```

2.  Now copy the `.env.template` file into `.env` and edit its contents:

    ``` sh
    cp .env.template .env
    code .env
    ```

    This will open the file `.env` in VSCode. In VSCode you may see a message 
    "Git repositories were found... do you want to open them?", you can close it or ignore it.

    **NOTE**: you can navigate with your usual file explorer to the
    "dltc-env" folder, which will be located where you cloned it in
    step 1. The `.env` file is a hidden file, so you would need to
    enable viewing hidden files to see it.

    The contents of `.env` look like this:


    You need to set the values of the following fields <!-- newbie isn't sure what that means: "is is some setting, do I change it by changing that" -->:

    2.1 `ARCH`: the architecture of your machine. If you are on a Mac
    with an Apple Silicon chip, set this to "arm64". Otherwise, leave it
    as is ("amd64", which is for Macs with Intel chips, Windows, and
    Linux)

    2.2 `DLTC_WORKHOUSE_DIRECTORY`: the full path, on your local
    machine, to the 'dltc-workhouse' folder inside Dropbox. One way to get it
    is to open an article folder in VSCode (perhaps in a new window), open a 
    terminal within VSCode and run the command `pwd` ('present working directory'). 

    2.3 `DOCKERHUB_TOKEN`: the **login token** (not the "password") for
    the dockerhub account. You can find it in the "Institutional set-up"
    page in our Google Drive

3.  Now you can execute the start script:

    ``` sh
    # On Linux and Mac
    ./dltc-env-start.sh

    # On Windows
    .\dltc-env-start.ps1
    ```

    The first time you do this it will take a while as it needs to
    download the image, which contains a full LaTeX installation. This
    will not happen often, but you will also need to execute this script
    any time there is an update to the compilation environment <!-- explain "compilation environment" earlier on -->.

### Starting and stopping the compilation environment container

The compilation environment that produces output runs in a 'Docker container'
that can be started or stopped. It'll stop if you close Docker or restart
your computer. Optionally, you can stop the container when you finish
working on your copyediting tasks and restart it when you start again. 
(If you don't stop it, it won't slow down your computer in any noticeable
way but it'll use a bit of memory but shouldn't slow down
your computer in a noticeable way.)

Starting and stopping containers can be done from the terminal or from 
the Docker app. From the terminal, use:

``` sh
docker stop dltc-env
```

to stop it, and 

``` sh
docker start dltc-env
```

to start it again. 

From the Docker app, go to Containers tab: a box
icon on the top left. (Don't forget to close the Settings if you
haven't.) In the list of containers you should see one called `dltc-env`.
It's greyed out if stopped, green if started. In the Actions column,
there's a play/stop icon you can use to start or stop it. 


### Setup: VSCode

While not strictly mandatory, it is highly recommended to use VSCode for
the copyediting work. VSCode is a modern, general text editor suited for
all tasks programming and writing. It has support for state-of-the-art
software tools such as Docker, and through its vast market of
extensions, provides great support for Markdown, LaTeX, HTML, and
Quarto. It is language agnostic and lightweight, not needing any
specific programming language dependencies.

For this subsection, it is recommended that you create a
[GitHub](https://github.com/) account, and then connect to it in 
VSCode.^[If you encounter some issue with these instructions, check out
the [official VSCode documentation instead][https://code.visualstudio.com/docs/sourcecontrol/github].] 

1.  Create an account on [GitHub](https://github.com/).
2.  Open VSCode. On the left toolbar, click on Extensions, and search and install the
    "GitHub Pull Requests and Issues" extension.
4.  On the left toolbar, look down for 'Accounts', and connect to
    your GitHub account. (If you're on a public Wifi this may not work; use 
    a private one or your mobile hotspot.)
5. Then, clicking again on 'Accounts', enable both
    'Settings Sync' and 'Turn on Cloud Changes'. This will synchronize
    your VSCode settings in any device you connect it to your account.

-   Recommended: click on the cogwheel icon at the bottom of the
    vertical toolbar on the left, and go to "Settings". On the page 
    that appears, use the search bar at the top to search for "telemetry", 
    and set the "Telemetry Level" to "off".
    We don't need Microsoft spying (more than it already does) on us.

1.  Then, it is recommended that you create a 'profile' to manage the
    extensions you need for copyediting.

-   In the vertical toolbar to the left, click on the cogwheel (Settings)
    and choose Profiles > Create profile...
-   Give a name to your profile e.g., "dltc-copyediting" and use the
    default options

7.  Now we will install some extensions needed for the copyediting
    workflow. In the toolbar to the left, look for the "Extensions"
    button. There, using the search bar, look for and install the
    following:

-   Remote Explorer (by Microsoft)
-   Dev Containers (by Microsoft)
-   LaTeX Workshop (by James Yu)
-   Markdown All in One (by Yu Zhang)
-   Quarto (by Quarto)
-   HTML Preview (by George Oliveira)

Other recommended extensions are:

-   Error Lens (by Alexander)   

If you have a GitHub pro account, we also recommend:

-   GitHub Copilot (by GitHub)
-   GitHub Copilot Chat (by GitHub)

If you have a university student account and email, [you can be granted a 
GitHub pro account for free](https://education.github.com/pack). 
Copilot is an AI assistant that can help you code in general, 
including help you with Markdown and LaTeX, both directly in VSCode 
when you edit files and in a chat button provided 
by the Chat extension (that will appear in the left toolbar).

Now, whenever you start VSCode, make sure that you're connected to your
GitHub account (in "Accounts"), and that you're using the profile you
created (in "Settings \>\> Profiles"). Also make sure that the
extensions are installed *inside* the container (in "Extensions").

1.  Once everything is installed, back at the "Extensions" button of the
    left toolbar, clear any search in the searchbar. Now, you will see
    that some extensions ask to be installed in the container. To do
    this en masse, look for the separator that says "CONTAINER
    PHILOSOPHIECH/DLTC-ENV..." and click on the cloud icon with a
    downward pointing arrow. This will install all of your extensions in
    the container.

2.  Now go back to the left toolbar and look for "Remote Explorer"
    (looks like a computer screen). At the top, there will be a
    drop-down menu in which you can select "Dev Containers".

3.  You will now see the name "dltc-env dltc-env". If you hover with the
    mouse, you'll see an arrow whose name is "Attach in Current Window".
    Click it, and VSCode will start running inside the container (you
    can check that by looking at the bottom left of the VSCode window).

4.  Now you can work as usual, but inside this container you have all of
    the necessary tools available, including a full LaTeX environment,
    pandoc, and quarto.

In general, be careful with what you do even inside the container. While
the container is relatively isolated from your machine, **it is
connected to the dltc-workhouse Dropbox folder**, so any changes or
deletions you make will affect everyone, as usual when working using
Dropbox.

We can install new tools or modify existing ones in the environment
depending on the needs of the copyediting team. Please contact Luis
Bordo at `luis.bordo@philosophie.ch` for any such request.

### New way of generating outputs: dltc-make

Whenever you're using the container for the Dialectica compilation
environment, from a terminal (inside the container) you have at your
disposition the command:

``` sh
dltc-make
```

This command essentially replaces the old `make.sh` and `make.bat`
scripts, and it's used in exactly the same way. The advantage is that we
don't need to copy the `make` files in every folder. For example, now we
can just navigate to the folder where your article for copyediting is,
and then...

``` sh
dltc-make offpdf
```

...will produce a PDF as usual.

### Advanced: using the container directly from a terminal

Additionally, if you know what you're doing, you can start a shell
within the container without using VSCode. With this, you can use the
terminal directly to compile articles. Altough rather clumsy as an
approach, this would allow you to, for example, keep using RStudio to
work on copyediting tasks and then compiling the articles separatedly in
a terminal using the container.

From anywhere in your system, do:

``` sh
docker exec -ti --volume="YOUR/PATH/TO/Dropbox/philosophie-ch/dltc-workhouse:/home/copyeditor/dltc-workhouse" philosophiech/dltc-env:latest bash
```

If this worked properly, you should see your prompt change to
`copyeditor@dltc-env`. Here, you can now navigate to `~/dltc-workhouse`,
where you will find the usual Dropbox files for copyediting.

Note that you can execute the command above in an integrated terminal in
any other editor (such as RStudio). This will give you a shell inside
the container with access to all the tools you need for the copyediting
work.

### Troubleshooting

#### Common issues

-   Problem: In VSCode, connected to the container, you don't see any
    file in 'dltc-workhouse' when you open it

Solution: this is most likely due to not properly setting your `.env`
file. Go to the folder in which you cloned the GitHub repository for the
compilation environment, copy the `.env.template` file to a new file
called `.env`. Now open this file, and change the value of
"DLTC_WORKHOUSE_DIRECTORY" to the full path of where the dltc-workhouse
folder (inside Dropbox) is.

Note that, for Windows, you need to change "\\" for "/" in the path
name. That is, if your folder is in "C:\\Users\\...", you must change it
to "C:/Users/...".

-   Problem: while working in the container, you see an error with code
    "-9", or anything related to being "out of memory"

Solution: you're running a heavy task inside the container, and it's
eating up a lot of resources in your machine, so docker is killing the
task. This could happen, for example, when compiling PDFs with the big
bibliography file. Go to your Docker settings and allow your containers
a higher limit on the CPU (or "cores") and on "memory" (RAM). At least
3/4 of the highest limit should be enough in most cases, but if it's not
enough you can go up to 100%. Just note that if you do this (allowing
100% use of resources), the task is very intense and you're on an old
computer, your machine could crash.

#### Installing WSL version 2 on Windows

**Note**: if you don't feel comfortable modifying the options of your
machine's BIOS or UEFI, get in contact with Luis Bordo at
`luis.bordo@philosophie.ch` to guide you through personally. Otherwise,
follow the instructions below.

1.  Enable 'virtualization'. To do this, we need to go to the computer's
    BIOS or UEFI. If you know how to do this, do it as you know and
    ignore the instructions below. Otherwise, follow these steps.
    **WARNING**: this will restart your computer:

    1.  Go to Settings
    2.  Go to Update and Security (or a setting with a similar name)
    3.  Go to "Recovery"
    4.  Click on `Restart now` in the section "Advanced start-up"
        1.  Click on "Troubleshoot"
        2.  Click on "Advanced Options"
        3.  Click on on the option that mentions either "UEFI" or "BIOS"
        4.  Click on "Restart". This will restart your computer and
            automatically send you to the BIOS or UEFI settings
    5.  Now this depends on your specific machine, but under some field
        called "Security", you should find a sub-field called
        "Virtualization". Inside this sub-field you should `Enable` all
        options
    6.  Save and exit the BIOS or UEFI. **IMPORTANT**: you need to SAVE
        before exiting, otherwise you will need to redo the steps above
    7.  To check that virtualization is enabled, go to the Task Manager,
        to the Tab **TODO**

2.  Enable 'wsl version 2'. Open PowerShell as Administrator, and then:

    ``` powershell
    dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

    wsl --set-default-version 2
    ```

-   If something goes wrong, follow the instructions given in PowerShell
-   To check if all of this worked, do `wsl --version` in Powershell

# Generating outputs

By "Terminal" we mean a command line interface. See Appendix
-@sec-terminal-help on how to use it.

All file paths are given relative to the base ("root") of Dialectica's
workhouse folder ("dltc-workhouse"). For instance:

```         
template/1.1/scripts/make.sh
```

\noindent is the `make.sh` file contained in the `scripts` folder
contained in the `1.1` folder contained in the `template` folder within
the dialectica workhouse folder.

Note for Windows users: paths are noted in the Linux / MacOS style with
a forward slash `/` separator. In Windows this would be a backslash `\`
instead:

```         
template\1.1\scripts\make.sh
```

## Prepare an article or issue folder

You'll need to add the following file to your article working folder to
be able to generate outputs.

-   A *master file*, which contains issue-level metadata needed to
    generate your article outputs.

### Create a master file

Copy a `master.md` file into your article folder. You can take one from
another article in the same issue, or the template one at
`template/X.X/copyeditors-scripts`. Beware: you can take the master file
in the *issue* folder, but if you do so you'll need to modify paths in
the `imports` field (see below).

Open the file in text editor. It should already contain an `imports`
metadata field that consists of a list of one or more files (each item
on a single line starting with a dash), for instance:

``` yaml
imports:
- 01-author.md
- 02-author.md
```

You should amend it to contain just one item referring to your file. If
your markdown file is `smith_j-2023.md` you should make it:

``` yaml
imports:
- smith_j-2023.md
```

*Note on issue master files*. Issues have master files too, where
located in issue folders. Their `imports` field normally contain a list
of all article files for that issue, *including which subfolder they're
in*, for instance:

``` yaml
imports:
- 01-jones/jones_s-2023.md
- 02-smith/smith_j-2023.md
- ...
```

Therefore, if you copy an issue master file within an article folder, or
the other way round, you should make sure you add (issue master file) or
remove (article master file) the subfolders names as required.

## Generate outputs

### Run a command in the terminal

You can generate outputs by running the `dltc-make` command in a
terminal inside the container containing the compilation environment.

-   In VSCode (or RStudio), if you've created a project for your
    article, it's best to use the integrated terminal (in the "Terminal"
    menu in VSCode, "Tools" in RStudio). Make sure that you are "located
    in" the project's folder by executing `pwd`. If the path doesn't
    correspond to your project's, then navigate with `cd` to where your
    project is.

-   If you're using a separate terminal application, you'll need to
    navigate with `cd` to the folder where your article is.

See @sec-terminal-help for help.

### Short rendering commands {#sec-house-outputs-rendering-commands}

Rendering commands can be executed in a *article*'s folder or in an
*issue* folder. All these commmands must be added to `dltc-make`, e.g.:

``` bash
dltc-make offprints
```

Single-article outputs will be named after the source file, e.g.
`smith_j-2020.pdf`. Issue outputs will be named after the issue DOI,
e.g. `dial.v74.i1.pdf` or `dial.v75.i2-book.pdf`.

+----------------+-------------------------------------------+
| Command        | Output                                    |
+================+===========================================+
| (empty)        | article in HTML                           |
+----------------+-------------------------------------------+
| `offpdf`       | article in PDF                            |
|                |                                           |
| `off1pdf`      |                                           |
+----------------+-------------------------------------------+
| `offtex`       | article in LaTeX. Useful to debug when    |
|                | the PDF generation crashes: try           |
| `off1tex`      | `lualatex smith_j-2020.tex` to see error  |
|                | messages.                                 |
+----------------+-------------------------------------------+
| `refs`         | generate a list of references cited in    |
|                | the article. Saved as                     |
|                | `<article_name>.bib.txt`. Only works when |
|                | the references have been turned into      |
|                | citations and a bibtex file is provided.  |
+----------------+-------------------------------------------+

: Article folder rendering commands

+----------------+-------------------------------------------+
| Command        | Output                                    |
+================+===========================================+
| (empty)        | first article in HTML                     |
+----------------+-------------------------------------------+
| `all`          | issue pdf, all articles PDF + HTML        |
+----------------+-------------------------------------------+
| `allhtml`      | all offprints (=articles) in HTML         |
+----------------+-------------------------------------------+
| `offprints`    | all offprints HTML and PDF                |
|                |                                           |
| `off`          |                                           |
+----------------+-------------------------------------------+
| `vol`          | issue PDF                                 |
|                |                                           |
| `volpdf`       |                                           |
+----------------+-------------------------------------------+
| `off2`         | HTML of the second article (i.e. second   |
|                | item in the masterfile's `imports` list). |
| `off2html`     |                                           |
+----------------+-------------------------------------------+
| `off2pdf`      | PDF of the second article (i.e. second    |
|                | item in the masterfile's `imports` list). |
+----------------+-------------------------------------------+
| `off7tex`      | LaTeX of seventh article                  |
+----------------+-------------------------------------------+
| `voltex`       | LaTeX of the issue                        |
+----------------+-------------------------------------------+
| `refs`         | generate list of references cited for     |
|                | each article. Saved as                    |
|                | `<article_name>.bib.txt`. Only works when |
|                | for articles where references have been   |
|                | turned into citations and given in bibtex |
|                | files.                                    |
+----------------+-------------------------------------------+
| `bare`         | Issue covers only, PDF (`bare`) or LaTeX  |
|                | (`baretex`). articles (also `baretex`).   |
| `baretex`      | Useful for cover design.                  |
+----------------+-------------------------------------------+

: Issue folder rendering commands

### Rendering options

Proof mode

:   Add `--proof` or `-p` at the end of your command (separated by a
    space):

:   ``` bash
    dltc-make off2 --proof
    dltc-make off3pdf -p
    ```

:   This only affects PDF output.

Verbose or quiet

:   Add `--verbose` or `-v` to get a detailed log of the rendering
    process. Useful for debug. You can save the output in a log file
    like so:

    ``` bash
    dltc-make off2pdf -v 2> out.log 
    ```

    The `2>` tells the computer to "redirect" the error/information
    output to a file named `out.log`.

    You can make the output quieter with `--quiet` or `-q`. Though
    certain programs executed during the rendering process may still
    display error or output messages. If you don't want to see anything
    just "redirect" the output to a file with `sh make.sh … 2> out.log`.

Single letter options can be combined: `-pv` is short for
`--proof —verbose`.

THIS IS A CHANGE I'VE MADE -- another change now 10:11

### Long rendering commands

Rendering commands can also be given in key-value form:

``` bash
dltc-make mode=offprint chapter=3 format=pdf
```

-   `mode` includes "offprint" aka "off", "vol" aka "issue", "bare" ,
    "refs"

-   `format` includes `pdf`, `html`, `tex` aka `latex` (also `epub`,
    `jats` but we don't generate these yet)

-   `chapter` includes chapter numbers.

The advantage is that you can specify multiple modes and formats
separated by commas:

```         
dltc-make mode=off,refs chapter=3,4,5
```

Rendering options like `--proof` can be combined with long rendering
commands.

## Advice on HTML vs PDF

HTML is best when you start working on an article because it's much
faster and less error-prone than PDF. HTML only fails to produce an
output if your document's metadata is ill-formed or if there's a bug in
the "filters" we use to format outputs.

PDF is best for the latter typesetting stages when you need to check
that the fine-grained outputs look right, that advanced LaTeX formulas
or images work correctly, that there is no awkward page break and so on.