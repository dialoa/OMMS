[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open Manual of Markdown Style",
    "section": "",
    "text": "Preface\nThis book is an open manual of style for scholarly publishing using markdown. Open because it focuses on open-source software tools and is targeted at open-access publishers. Of markdown style because it combines style and technical advice for producing professional-quality publications using markdown. The manual itself is open-source, open-access and written in markdown.\n\nPresentation\nThe OMMS aims to make markdown-based professional-quality publishing available to academic teams with no advanced technical knowledge. It explains how to convert manuscripts into, or author them as, markdown documents, and turn them into beautifully typeset outputs in multiple print and digital formats.\nNo prior knowledge of markdown is required; authoring and copyediting can largely be done using visual tools. Production, however, realistically requires some technical knowledge (CSS for web output, LaTeX for print output).\n\n\nRelation with Quarto\nThe OMMS overlaps with, and complements, the excellent Quarto documentation.\n\nThe OMMS focuses on copyediting and production. It is aimed at small publishing outfits rather than authors - though you can use it to write a thesis.\nThe OMMS gives prescriptive style and typesetting advice. It’s a manual of style rather than technical documentation.\n\n\n\nStatus\nThe manual is a work in progress. It is used to produce the open-access philosophy journal Dialectica and compiles the solutions we’ve adopted to deal with a range of typesetting problems. It is fairly extensive but far from complete.\n\n\nEdit the guide\nYou’re welcome to edit the guide. To do so:\n\nInstall Quarto. Some package managers have it (brew install quarto on MacOs, choco install quarto on Windows, but not on Linux.) See Chapter 26 on package managers.\nOpen the guide folder in RStudio (or Visual Code, if you use Quarto with that).\nChapters are listed in _quarto.yaml . If you create a new chapter you need to add it here.\nChapter files are in the chapters folder - obviously. Numbers in their names are for convenience: they ensure that chapters in the folder appear in the same order as they appear in the book.\nChapters can be edited in visual or source mode. They’re “Quarto markdown” (.qmd) files but that’s just like Pandoc markdown.\nTo render a chapter open and it and use Render &gt; Render HTML. You’ll see the output in RStudio’s preview pane.\nTo render the whole book Build &gt; Render Book or open the index.qmd file and do Render &gt; Render HTML.\n\n\n\nCredits and license\nDeveloped by the Dialoa team and philosophie.ch.\nCopyright 2021-23 Julien Dutant\n This work licensed under a Creative Commons Attribution 4.0 International license."
  },
  {
    "objectID": "chapters/authoring/00-intro.html",
    "href": "chapters/authoring/00-intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This part gives instructions for authors."
  },
  {
    "objectID": "chapters/authoring/10-instructions.html#generic",
    "href": "chapters/authoring/10-instructions.html#generic",
    "title": "2  Instructions for authors",
    "section": "2.1 Generic",
    "text": "2.1 Generic\nProvide an informative abstract, 50 to 200 words.\nFormulate it carefully: it is indexed in databases and search engines, and plays in crucial role in the long-term visibility of your article."
  },
  {
    "objectID": "chapters/authoring/10-instructions.html#ms-word",
    "href": "chapters/authoring/10-instructions.html#ms-word",
    "title": "2  Instructions for authors",
    "section": "2.2 MS Word",
    "text": "2.2 MS Word\nAuthors should use Word’s styles:\n\nHeading 1, Heading 2 etc for headings\nTitle for the title\nBlock citations\n(optional) Author for author (requires creating a style called “Author)\n\n\nFormulas should be entered in Word’s equation mode. This helps our document converter to turn them into reusable LaTeX formulas.\nReferences should be provided in a separate BibTeX (.bib) or CSL-Json file (e.g. using Zotero).\n[Requires extension: sections-to-meta] Abstract and acknowledgements should be provided below “Abstract” and “Acknowledgements” headings at the beginning of the paper. If the paper itself doesn’t start with a heading, separate those from the main text by a horizontal line (three dashes and return).\nIf the document contains complex mathematical symbols or formulas, make sure that these are put in “equation mode”. This ensures that pandoc converts them to LaTeX code and spares you the need to re-encode them.\nThere are various ways in which authors can make the editing process easier and quicker:\n\nChecking their bibliography for mistakes\nSending their bibliography as a .bib file, which can easily be created if they use software such as Zotero.\n(If they use Word) Preparing their Word document: writing their formulas in “equation mode”, using the definite styles for article title, abstract, author name, section titles, block citations.\nRemind them of the importance of a good title and abstract."
  },
  {
    "objectID": "chapters/authoring/10-instructions.html#latex",
    "href": "chapters/authoring/10-instructions.html#latex",
    "title": "2  Instructions for authors",
    "section": "2.3 LaTeX",
    "text": "2.3 LaTeX\nAuthors should provide a LaTeX source file, with references in a a separate BibTeX file and any included file (images, preamble) or package not available in standard distributions.\nTikZ figures and other advanced packages (ie those that aren’t handled by MathJax) should be compilable as standalone documents."
  },
  {
    "objectID": "chapters/copyediting/12-cop-preliminaries.html#what-you-need",
    "href": "chapters/copyediting/12-cop-preliminaries.html#what-you-need",
    "title": "3  Preliminaries",
    "section": "3.1 What you need",
    "text": "3.1 What you need\n\n3.1.1 Skills\n\nUse a text editor (RStudio will do).\nOptionally, use RStudio’s visual editor. This provides a MS Word-like way of editing a markdown document: no need to view the source code. An easy entry into markdown and a nicer way to edit. See Section 5.5.\nOptionally, how to use the command line interface. The very basics are enough: navigate to a directory, run a command. See Appendix A.\n\n\n\n3.1.2 Software\nAll the software needed is free: Pandoc, LaTeX and optionally RStudio.\nSee the Dialectica chapter on generating outputs to set yourself up Chapter 26."
  },
  {
    "objectID": "chapters/copyediting/12-cop-preliminaries.html#working-folder",
    "href": "chapters/copyediting/12-cop-preliminaries.html#working-folder",
    "title": "3  Preliminaries",
    "section": "3.2 Working folder",
    "text": "3.2 Working folder\nCreate a working folder for your journal. This may be shared between copyeditors if you’re a team. We suggest a structure such as this:\ntree/copyediting\n└── 2023-v51\n    ├── 01-i01\n    │   ├── 01-ehrenfest-afanassjewa\n    │   │   └── history\n    │   └── 02-estrin\n    └── 03-i02\n        ├── 01-ehrenfest-afanassjewa\n        │   └── history\n        └── 02-estrin\n            └── history\ntree/published\n└── 2023-v50\n    ├── 01-i01\n    │   ├── 01-ayrton\n    │   │   └── history\n    │   └── 02-berdichevsky\n    │       └── history\n    └── 03-i02\n        ├── 01-borg\n        │   └── history\n        └── 02-daubechies\n            └── history\ntree/guide\ntree/resources\n└── fonts\ntree/template\n├── 1.0\n│   ├── defaults\n│   ├── filters\n│   ├── metadata\n│   └── scripts\n└── 1.1\n    ├── defaults\n    ├── filters\n    ├── metadata\n    └── scripts\n\n\nWe’re dividing the articles in two stages, copyediting and published. We could further divide copyediting into copyediting proper (language, style) and production (typesetting) but these tend to be intertwined in markdown production.\n‘Copyediting’ and ‘published’ folders are organized by year-volume and month-issue.\nEach article has its own folder, with a history subfolder to keep track of the author’s original submissions and revisions.\nTo these we add a few other folders for resources shared among copyeditors:\n\ntemplate: template engine to produce the journal. This might change over the years, so it is organized by versions. Each issue includes metadata that indicate which version of the template was used. It includes scripts that copyeditors may need to copy or use.\nguide: this guide\nresources: resources such as fonts, logos, documentation."
  },
  {
    "objectID": "chapters/copyediting/12-cop-preliminaries.html#new-workflow-start-draft",
    "href": "chapters/copyediting/12-cop-preliminaries.html#new-workflow-start-draft",
    "title": "3  Preliminaries",
    "section": "3.3 New Workflow Start [Draft]",
    "text": "3.3 New Workflow Start [Draft]\nNote: below, when saying “in a terminal”, we mean either PowerShell on Windows, or your default terminal in Mac or Linux. All of the commands provided should work in all PowerShell (Windows), zsh (Mac) and bash (Linux).\nThe association is setting up a standardized compilation environment for Dialectica. The environment is encapsulated in a docker container and includes all of the tools needed for the copyediting work, including pandoc, LaTeX, Lua, Quarto, and the fonts. The idea is that you will only need to interact with the container in your local machine, as if it was a “box” containing the Dialectica copyediting tools, without needing to install each tool separatedly. In this way, all of the copyeditors can share a single complete environment (i.e., the versions of all of the tools used by the team will be the same), minimizing compiling problems and compatibility issues. This also allows for issues to be fixed in a centralized manner, as new versions of the environment (with fixed issues) will affect everyone.\nFollow the steps here everytime you want to start working using the Dialectica compilation environment. This section assumes you have already set up your machine as explained in Section 28.5.\n\nFirst make sure that docker is running. In a terminal, do:\n\ndocker ps\n\nIf there are no errors, then docker is running. If not, try the following to start docker:\n\nOn Windows, open Docker Desktop\nOn Mac, in a terminal, do colima start\nOn Linux, in a terminal, do sudo service docker start\nNow wait until docker starts, and do docker ps again\n\n\nNow check if you have the latest version of the image of the compilation environment. Every new release will be announced on the Team News, and they shouldn’t happen very often. If a new version has been released, or if you’re unsure if you have the last version, in a terminal do the following. For this, you will need the access token which you can find in the Institutional Setup page in our Google Drive:\n\ndocker login -u philosophiech\n# Paste the access token as the password\ndocker pull philosophiech/dltc-env:latest\n# Wait until the pull is complete, and check with\ndocker image ls\n\nNOTE: terminals often hide the characters when you type in passwords. Just copy and paste the access token when asked for the password and it will work. - If you downloaded a new image, you need to stop any container created with the old one. For this, go to the root of the git repository (where the docker compose file is) and do\n# On Windows and Linux\ndocker compose down\n# On Mac\ndocker-compose down\n\nFrom step 1, if you do have the latest image, and if in the output of docker ps you see the name “philosophiech/dltc-env:latest”, then the compilation environment is ready to be used\n\n\nIf not, in a terminal, navigate to the root of the git repository you cloned (where the docker compose file is), and do:\n\ngit pull\n\n# On Windows and Linux\ndocker compose up -d\n# On Mac\ndocker-compose up -d\n\nNow if you do docker ps you should see the name of the container (“philosophiech/dltc-env:latest”).\n\nStart VSCode, select “Remote Explorer” on the vertical toolbar to the left, select “Dev Containers” on the dropdown menu above, then hover above “compilation-env” and click on the arrow next to it. You can now “Open Folder” and choose “dltc-workhouse”, which is the same folder you have in Dropbox.\n\n\nAll set, you’re ready to work. Remember that you can open a terminal inside VSCode (in the menu above: Terminal &gt;&gt; New Terminal), which will give you a terminal inside the container. Here you’ll find all of the tools you need (pandoc, LaTeX, Lua, quarto, dltc-make, and the fonts)."
  },
  {
    "objectID": "chapters/copyediting/13-cop-preparing-a-manuscript.html#create-a-working-folder-for-your-article",
    "href": "chapters/copyediting/13-cop-preparing-a-manuscript.html#create-a-working-folder-for-your-article",
    "title": "4  Preparing a manuscript",
    "section": "4.1 Create a working folder for your article",
    "text": "4.1 Create a working folder for your article\nIf you don’t have a dedicated working folder for your article, create one.\nIf you’re going to use RStudio, create a project for the article with File &gt; New Project…. Use ‘Existing directory’ if your project already has a folder, otherwise “Create project in a new directory” to create one."
  },
  {
    "objectID": "chapters/copyediting/13-cop-preparing-a-manuscript.html#place-original-materials-in-a-preserved-folder",
    "href": "chapters/copyediting/13-cop-preparing-a-manuscript.html#place-original-materials-in-a-preserved-folder",
    "title": "4  Preparing a manuscript",
    "section": "4.2 Place original materials in a preserved folder",
    "text": "4.2 Place original materials in a preserved folder\nA submission comes with a manuscript file and possibly others: bibliography, PDF version, figures, etc. It’s handy to have those in your working folder for the article, but you want to keep them safe. Place them either in a subfolder called original or history. (The history folder will then be used to keep track of your exchanges with the author.)"
  },
  {
    "objectID": "chapters/copyediting/13-cop-preparing-a-manuscript.html#convert-to-markdown",
    "href": "chapters/copyediting/13-cop-preparing-a-manuscript.html#convert-to-markdown",
    "title": "4  Preparing a manuscript",
    "section": "4.3 Convert to markdown",
    "text": "4.3 Convert to markdown\nTwo options: conversion box (RStudio) or with Pandoc. The first is easy if you’re not familiar with the terminal and allows you to do a bunch of manuscripts at once. The second is faster for a single manuscript once you’ve learnt how to do it.\n\n4.3.1 With the conversion box and RStudio\nRequires RStudio and a conversion-box folder at the root of journal’s working folder.\n\nDelete any manuscript already present in the conversion-box folder: Word files (.docx, .doc), LaTeX files (.tex), markdown or quarto files (.md, .qmd). This is a temporary folder, whomever left it there has made copies.\nCopy your original manuscript (MS Word, LaTeX) in the conversion-box folder. You can copy several if you want to convert multiple manuscripts in one go.\nRename the manuscript file(s) if necessary: manuscript filenames must not contain spaces, colons, question or exclamation marks.\nOpen conversion-box.Rproj in the conversion-box folder. This opens RStudio in the ‘conversion box’ project.\nIn RStudio, do Build &gt; Build All, or equivalently hit Shift-Ctrl-B (Win. Linux) or Shift-Cmd-B (Mac). This converts any MS Word or LaTeX file in the folder to markdown.\nCopy the resulting markdown file from the conversion-box to your article’s working folder.\n\n\n\n4.3.2 With Pandoc only\nOpen a terminal. If using RStudio or VSCode, there is a Terminal tab. This opens a terminal already located in your article’s working folder. If you’re opening a terminal from your system, you need to navigate (using cd, change directory commands) to your article working folder.\nIf you need help with using the terminal see section Appendix A.\nRun the following command:\npandoc -s original/manuscript.docx -o manuscript.md\n\noriginal/manuscript.docx is the path and filename of the original manuscript. Here I’m assuming that the submission is called manuscript.docx and placed in a folder original. On Windows we use backlash to mark folders so that would be original\\mansucript.docx instead.\n-o manuscript.md tells pandoc to convert to markdown (.md) and save the result as manuscript.md in your cuurent folder.\n-s, short for --standalone, tells Pandoc to produce a “standalone” document, i.e. include a header with any metadata it is able to extract from the source.\n\n\nFor instance, if your terminal was not located in your article working folder but in its original subfolder, and you wanted to write the result in the main sufolder (i.e. one folder up), you’d use instead:\npandoc -s mansucript.docx -o ../manuscript.md\n\nWhere ../ (..\\ on Windows) means “one folder up”.\n\n4.3.2.1 LaTeX manuscripts: check the bibliography field\nConverting from LaTeX is the same, but pay attention to the bibliography file location. The resulting markdown file may have a bibliography key:\nbibliography: original/references.bib\n\nbibliography: C:/Windows/Users/Zotero/references.bib\n\nUpdate these if needed. Here original is the subfolder for preserving the original: I should instead copy the .bib file to the main article folder and replace this key with bibliography: references.bib. The second one, C:/Windows... is a location in the author’s computer as it was cited in their LaTeX file, it should be removed.\n\n\n4.3.2.2 More options for Pandoc conversion\nSee Pandoc’s Manual: reader options for more options."
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#aims",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#aims",
    "title": "5  About Markdown copyediting",
    "section": "5.1 Aims",
    "text": "5.1 Aims\nIn an automated copyediting workflow, the job of the copyeditor isn’t to fine-tune the appearance of the output (fonts, spacing, etc.) Rather, the copyeditor’s job is to encode all, and only, the manuscript’s features that the automatic converter needs to know about.\nTypical manuscripts (MS Word documents, LaTeX file) contain both too much and too little information for a publisher’s purposes. A MS Word file contains information about font use and margin size, which the publisher must get rid of since they’re applying their own font and margins. It also typically fails to encode crucial information in in a machine-readable way. For instance, an author may:\n\nuse mere boldface to indicate their section titles: 1. Methods. A human reader understands that they mean a section heading. But an automatic converter needs to know that this is section title, and not a simple bold text, to typeset it correctly.\nmanually write ‘(Dupuis 2020, pp. 29-42)’ for their citations. If an automatic converter knows that this is a citation of a given paper, at a given page range, it can turn it into a link, format it consistently throughout the journal (instead of ‘2020: 29–42’ in some papers and ‘2019, pp.12-15’ in others), and check that all and only references cited appear in the bibliography.\nmanually write internal cross-references (“see fn. 6”, “see page 8”). If an automatic converter knows that these are meant to refer to other parts of the text, they can turn them into links and adjust them if the numbering changes.\n\n\nOur copyediting task is to remove unnecessary formatting, and turn important features into codes that the automatic processor can pick up and deal with.\nMarkdown is a light-weight, intuitive way of encoding meaningful features. For instance:\n\na *simple* solution encodes a word that needs to be emphasized (typically, italics, but it’s for the automatic converter to decide).\n# Methodology encodes a heading titled “Methodology”.\n[@Doe2019, 22-29] encodes a citation of the pages 22 to 29 of an article that the converter will find under the name Doe2019 in the article’s associated bibliography file."
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#style",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#style",
    "title": "5  About Markdown copyediting",
    "section": "5.2 Style",
    "text": "5.2 Style\nWe will rely on the Chicago Manual of Style in most cases, except where we state otherwise."
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#what-to-encode",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#what-to-encode",
    "title": "5  About Markdown copyediting",
    "section": "5.3 What to encode",
    "text": "5.3 What to encode\nWhen copyediting we need to decide which features of the original manuscript we want to keep, or encode, in our document. For instance, we don’t want to keep the author’s specific choice of fonts, or whether they italicize headings. But we do want to keep italics used for emphasis, or hyphens used to cut a word at the end of a line.\nThe goal is to encode non-stylistic features of the article, and those features only. The stylistic or merely presentational ones are handled automatically by your journal style.\nThe features we keep are encoded in markdown syntax. For instance, emphasis (italics) is encoded by enclosing words within asterisks:\nIn this sentence the last world is *emphasized*.\n\nWhen a feature is encoded, the journal’s template ‘understands’ it. This means that it’ll be able to typeset it correctly, according to the journal style, in all the outputs formats we need—PDF, webpage, ebook.\nHere’s a list of features we want to encode. The list is in progress: not everything we want to encode is handled by our template yet. An X under “syntax” means that there is markdown code (aka syntax) to encode the feature in question. An X under “implemented” means that our template is able to typeset the feature in question.\n\n\n\n\n\n\n\n\n\nFeature\nSyntax?\nImple mented?\nNote\n\n\n\n\nHeadings\nYes\nYes\n\n\n\nParagraphs\nYes\nYes\n\n\n\nFootnotes\nYes\nYes\n\n\n\nEmphasis (italics, bold)\nYes\nYes\n\n\n\nSuperscripts and subscripts\nYes\nYes\n\n\n\nCitations\nYes\nYes\n\n\n\nCross-reference: heading\nYes\nYes\n\n\n\nCross-reference: footnote\nYes\nNo\n\n\n\nCross-reference: specific location\nYes\nNo\nMust be handled separately in PDF vs HTML.\n\n\nCross-reference: image, figure, table\nYes\nYes\n\n\n\nCross-reference: theorem, statement\nYes\nYes.\n\n\n\nQuotations: block quotations\nYes\nYes\nEncoding the source too?\n\n\nQuotations: inline\nYes\nYes\nUnnecessary. Ordinary ’ or ” is enough.\n\n\nLists: numbered, unnumbered\nYes\nYes\n\n\n\nLists: continuously numbered throughout the text\nYes\nYes\n\n\n\nLists: ad-hoc numbers ((9’), (a*)…)\nYes\nYes\n\n\n\nStatements: simple indented blocks\nYes\nYes\n\n\n\nTables\nYes\nYes\n\n\n\nTables: column alignment\nYes\nYes\n\n\n\nTables: cells spanning several rows or cols\nNo\nYes\nhandled by pandoc but not documented yet\n\n\nTables: custom borders\nNo\nNo\n\n\n\nFormulas\nYes\nYes\n\n\n\nImages\nYes\nYes\n\n\n\nLinks\nYes\nYes\nas bib entries or footnotes\n\n\nColumns (incl. formulas side by side)\nYes\nYes\n\n\n\n\nHere are some features not to be preserved:\n\n\n\n\n\n\n\nFeature\nNote\n\n\n\n\nLinks in the text\nPreferably as bibliography entries, otherwise in footnotes\n\n\nCurly quotes\nhandled by pandoc\n\n\nSpecial positioning of formulas, tables, …\nTo be avoided as much as possible\n\n\n\nNote on special symbols:\n\nSpecial symbols must typically be preserved. For instance, the double square brackets should not be entered as [[ and ]] but with their LaTeX codes \\\\llbracket and \\rrbracket."
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#about-markdown",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#about-markdown",
    "title": "5  About Markdown copyediting",
    "section": "5.4 About Markdown",
    "text": "5.4 About Markdown\nMarkdown is a syntax - a way of writing or encoding document. A markdown document is a plain text file that can be viewed in any text editor REWRITE THIS\nis a syntax enhanced plain text with machine-readable information, a.k.a. ‘markup’. More specifically, we’ll use pandoc’s Markdown - the variant of that syntax that is most suited to academic texts and that is fully understood by our automatic converter, pandoc.\nThe copyediting files we work on are thus in pandoc’s Markdown format (extension .md). These are just plain text documents, which can be edited with any text editor (Notepad, TextEdit, …), but where we use a certain codes to encode information needed by our automatic document converter (pandoc). For instance, a document may contain the line:\n\n\nIn this article, I will prove that the *metaphysical* question is not nonsense.\n\n\nwhere the * encode the fact that the word “metaphysical” is emphasised. The automatic converter can pick up on that information and typeset the word accordingly in the PDF and HTML outputs. Typically, emphasized words are typeset in italics, but we could decide to typeset them with small caps or letter spacings as well. So we only encode the fact that the word is to be emphasized, using the * notation, and leave the rest to the converter.\nThe official documentation of pandoc’s Markdown can be used to supplement the instructions below."
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#sec-rstudio-visual-source-modes",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#sec-rstudio-visual-source-modes",
    "title": "5  About Markdown copyediting",
    "section": "5.5 RStudio visual markdown editor",
    "text": "5.5 RStudio visual markdown editor\nFor background see also Quarto’s page on RStudio visual mode.\nWhen you open a markdown file in RStudio, you’ll see Source and Visual tabs in the upper left corner. These are two different ways of visualizing the same document. The Source mode shows the document as it is, namely a plain text markdown file. The Visual mode shows the document as a webpage would display HTML code, or as a word processor like MS Word displays documents: text encoded with emphasis is shown in italics, text encoded as headings is shown in a larger font, etc.\nHere’s the Source mode:\n\n\n\nRStudio’s source mode (2023)\n\n\nHere’s the Visual mode:\n\n\n\nRStudio’s visual mode (2023)\n\n\nYou can switch between modes by clicking the ‘Source’ and ‘Visual’ tab. Exception: RStudio may refuse to switch to Visual if doing so would break down some elements in your document. (This is notably the case with numbered examples.)\nThe Visual mode allows you to edit without using markdown code. You can insert headings, italics, formulas, tables and so on by clicking in the menus. You can also insert more complicated structural elements, e.g. a Div with its id and attributes.\nThe Source editor shows you the markdown file as it is. There’s some syntax highlighting to help you visualize markdown codes.\nThere’s a useful “outline” button at the top left to see the headings of the document.\nYou can still type markdown in the visual editor—it’s usually faster to do so. Try it out: type ## Test at the beginning of a line and the line will be converted to a level 2 heading. You can type formulas, enter Divs and so on.1\nThe visual editor is good for initial copyediting (if your document allows using it): you’ll see the text and typos better. The source editor is good final copyediting and typesetting: you see the exact code used to generate your output and you fix special characters, line breaks, explicit LaTeX code and the like."
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#heads-up-on-special-characters-in-markdown",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#heads-up-on-special-characters-in-markdown",
    "title": "5  About Markdown copyediting",
    "section": "5.6 Heads up on special characters in markdown",
    "text": "5.6 Heads up on special characters in markdown\nIn Markdown the characters below are sometimes have a special meaning:\n\\ & * $ [ ] _ @\nNormally, you shouldn’t have to worry about them. But if they aren’t visible or your markdown file generates error when turned into PDF, they may be the culprit. Typically the error can be avoided by ‘escaping’ the character, i.e. preceding it with a backslash. Hence:\n\\& means & (nb, mandatory in BibTeX files!)\n\\* means *\n\\\\ means \\\n\\$ means $\nEtc.\nThe one exception is the square brackets. Markdown syntax allows two ways of encoding math formulas: wrapping them in $ or wrapping them in parentheses or brackets:\n\n$...$ and \\(...\\) can be used to enter an inline formula\n$$...$$ and \\[...\\] can be used to enter a display (i.e. block) formula\n\n\nSo if you try to espace both an opening and a closing bracket, your markdown will be read as a math formula.\nHere are problem cases you might encounter:\n\nA reference cited is titled Fear & Loathing in Las Vegas. You have the title with & in your BibTeX file, and it generates an error.\nThe problem is that in LaTeX/BibTeX & is a special character (to indicate tabs).\nSolution: ‘escape’ the ampersand in your BibTeX file:\n  title = {Fear \\& Loathing in Las Vegas}\nYour text has a pair of asterisks:\nPrinciple (*) is strong. Principle (*) is stronger than Principle (**). \nThe text between the asterisks is wrongly interpreted as emphasized:\n\nPrinciple () is strong. Principle () is stronger than Principle (**).\n\nSolution: escape the asterisks:\nPrinciple (\\*) is strong. Principle (\\*) is stronger than Principle (\\*\\*). \n\nPrinciple (*) is strong. Principle (*) is stronger than Principle (**).\n\nSquare brackets for elided texts in citations. In practically all cases they’ll be fine. The following markdown code will display as intended, for instance:\nThe [simple] models [...] are useful\nThere’s only trouble in a rare case: the elided text matches a section header. For instance, suppose you have:\nThe simple [models] are useful.\n\n## Models\nThis is wrongly interpreted as a link:\n\nThe simple models are useful.\n\nWhy? Pandoc automatically assign the header “Models” a link identifier: models (see the chapter on cross-referencing). And if this identifier is present, [models] becomes a link to it. And one of the section headings is “Models”.\nSolutions:\n\nIf you’re working in markdown code, leave it as is. We run pandoc with an option that disables these links.\nIf you’re working in the RStudio visual mode, add an identifier to the header, ## Models {#sec:models} (Pandoc) or ## Models {#sec-models} (Quarto)"
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#footnotes",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#footnotes",
    "title": "5  About Markdown copyediting",
    "section": "",
    "text": "Limitations: if many LaTeX formulas are inline in one paragraph the visual editor struggles to parse them and may mangle them, turning some text into formulas and the other way round; if so you’d better off using the source mode.↩︎"
  },
  {
    "objectID": "chapters/copyediting/155-cop-checklist.html#copyediting-workflow",
    "href": "chapters/copyediting/155-cop-checklist.html#copyediting-workflow",
    "title": "6  Copyeditor workflow",
    "section": "6.1 Copyediting workflow",
    "text": "6.1 Copyediting workflow\n\n(If needed) Prepare Word manuscript for conversion (formulas, styles for headings, abstract, …)\nConvert document into markdown\nComplete/Create metadata block\nSection headings (if needed)\nFormat inline and block elements\nCross-references\nCreate a .bib file from the author’s bibliography\nReplace the references in the article with the keys from your .bib file\nCreate References section at the end of the document\nProofread the outputs.\nChecklist!"
  },
  {
    "objectID": "chapters/copyediting/155-cop-checklist.html#the-checklist",
    "href": "chapters/copyediting/155-cop-checklist.html#the-checklist",
    "title": "6  Copyeditor workflow",
    "section": "6.2 The checklist",
    "text": "6.2 The checklist\n\nMetadata block: check that you have correctly added the information that you want to include (e.g. title, author, affiliation). Abstracts, acknowledgements and keywords should be here or as sections at the beginning of the paper.\nSections: check that their headings are correctly formatted with #, ##, etc. 3.Emphasis: check that emphasised words and sentences in the original text are emphasized in markdown (with asterisks and underscores).\nBold. No bold unless absolutely needed.\nDashes: check that hyphens, en dashes and em dashes are correctly and coherently used.\nQuotations: use a consistent style (e.g. double quotation marks) and check that they’re formatted as blocks where needed. Distinguish two subsequent block quotes from a single long one.\nMath content: check that math content (incl. schematic letters) is formatted as such, and non-math special characters formatted as such.\nStatements: check that claims, examples, theorems etc. are formatted as statements. Arguments with labelled premises are custom-labelled lists. Block equations are display maths.\nFirst-line indentation: paragraphs that continue after a block quote, table or list should not have an indentation. Add \\noident codes where needed.\nTables. Check that the tables created are faithful renderings of the original tables by the author.\nSpecial symbols: check that the special symbols and punctuation used by the author are in a format recognizable in markdown (using LaTeX formulas wherever needed).\nLaTeX code. Check that they display correctly in HTML. If not, use Imagify Chapter 23.\nFootnotes: check that they display correctly in outputs.\nCrossreferences: check that you have identified the crossreferences in the text and added labels wherever needed (e.g. references to sections, footnotes, claims, premises, arguments)\nCitations: check that you have identified all citations in the text and replaced them with keys from your bibligraphy. Be consistent on borderline cases: you may or may not use year-only when the citation’s author is already named in the sentence, but apply your choice consistenly.\nBibliography: you should have recreated the author’s bibliography (e.g. using Zotero), double-checked it for mistakes in the process, and inserted DOIs wherever they exist. Mistakes: wrong year of publication, missing editor initials, etc.\n\n\n6.2.1 TO DO changes and questions\ninsert here list of changes still to be done and things you need\nto check, e.g. missing citations.\n\n\n6.2.2 ASK questions for the author(s)\ninsert lists of questions to put to the author(s). You may organize them in categories:\n\n6.2.2.1 general\n\n\n6.2.2.2 grammar and spelling\n\n\n6.2.2.3 formulas\n\n\n6.2.2.4 quotations and citations\n\n\n6.2.2.5 special elements: statements, tables etc.\n\n\n\n6.2.3 DONE changes done\nList here non-trivial changes done during this revision. This is useful to send to the author, and as a record for future rounds of revision.\n\n\n6.2.4 LEAVE things that don’t need to be change\nChanges considered that you ultimately decided against. Useful for future rounds.This includes:\n\n6.2.4.1 IGNORE\nthings you considered, but ultimately decided against. Spares you and future copyeditors considering them again.\n\n\n6.2.4.2 REJECT\nthings asked by the author that you decided against. Useful to record your reasons and remind them if they ask again.\n\n\n\n6.2.5 TO EDITORS\nquestions for the editor or for your copyediting expert, e.g.  markdown or technical issues with LaTeX or some other output format.\n\n\n6.2.6 The checklist markdown source\n1.  Metadata block: check that you have correctly added the information\n    that you want to include (e.g. title, author, affiliation).\n    Abstracts, acknowledgements and keywords should be here or as\n    sections at the beginning of the paper.\n2.  Sections: check that their headings are correctly formatted with\n    `#`, `##`, etc. 3.Emphasis: check that emphasised words and\n    sentences in the original text are emphasized in markdown (with\n    asterisks and underscores).\n3.  Bold. No bold unless absolutely needed.\n4.  Dashes: check that hyphens, en dashes and em dashes are correctly\n    and coherently used.\n5.  Quotations: use a consistent style (e.g. double quotation marks) and\n    check that they're formatted as blocks where needed. Distinguish two\n    subsequent block quotes from a single long one.\n6.  Math content: check that math content (incl. schematic letters) is\n    formatted as such, and non-math special characters formatted as\n    such.\n7.  Statements: check that claims, examples, theorems etc. are formatted\n    as statements. Arguments with labelled premises are custom-labelled\n    lists. Block equations are display maths.\n8.  First-line indentation: paragraphs that *continue* after a block\n    quote, table or list should not have an indentation. Add `\\noident`\n    codes where needed.\n9.  Tables. Check that the tables created are faithful renderings of the\n    original tables by the author.\n10. Special symbols: check that the special symbols and punctuation used\n    by the author are in a format recognizable in markdown (using LaTeX\n    formulas wherever needed).\n11. LaTeX code. Check that they display correctly in HTML. If not, use\n    *Imagify* [@sec-imagify].\n12. Footnotes: check that they display correctly in outputs.\n13. Crossreferences: check that you have identified the crossreferences\n    in the text and added labels wherever needed (e.g. references to\n    sections, footnotes, claims, premises, arguments)\n14. Citations: check that you have identified all citations in the text\n    and replaced them with keys from your bibligraphy. Be consistent on\n    borderline cases: you may or may not use year-only when the\n    citation's author is already named in the sentence, but apply your\n    choice consistenly.\n15. Bibliography: you should have recreated the author's bibliography\n    (e.g. using Zotero), double-checked it for mistakes in the process,\n    and inserted DOIs wherever they exist. Mistakes: wrong year of\n    publication, missing editor initials, etc.\n\n### TO DO changes and questions\n\n*insert here list of changes still to be done and things you need  \n to check, e.g. missing citations.*\n\n### ASK questions for the author(s)\n\n*insert lists of questions to put to the author(s). You may organize them in\ncategories:*\n\n#### general\n\n#### grammar and spelling\n\n#### formulas\n\n#### quotations and citations\n\n#### special elements: statements, tables etc.\n\n### DONE changes done\n\n*List here non-trivial changes done during this revision. This is\nuseful to send to the author, and as a record for future rounds\nof revision.*\n\n### LEAVE things that don't need to be change\n\n*Changes considered that you ultimately decided against. \nUseful for future rounds.This includes:*\n\n#### IGNORE\n\n*things you considered, but ultimately decided against. Spares\nyou and future copyeditors considering them again.*\n\n#### REJECT\n\n*things asked by the author that you decided against. Useful to \nrecord your reasons and remind them if they ask again.*\n\n### TO EDITORS\n\n*questions for the editor or for your copyediting expert, e.g. \nmarkdown or technical issues with LaTeX or some other output format.*"
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#title-subtitle-short-title",
    "href": "chapters/copyediting/16-cop-metadata.html#title-subtitle-short-title",
    "title": "7  Metadata",
    "section": "7.1 Title, subtitle, short title",
    "text": "7.1 Title, subtitle, short title\nIn most cases the title can be inserted in one line, as it is:\n\n\n\n\n\n\n\nMarkdown\nPrinted title\n\n\n\n\ntitle: An Interesting Story\nAn Interesting Fact\n\n\n\nA title may include some markdown code, e.g. for italics:\n\n\n\n\n\n\n\nMarkdown\nPrinted title\n\n\n\n\ntitle: A Study of the Word *delicious*.\nAn Interesting Fact\n\n\n\nIn some cases the title must be surrounded by quotation marks. Namely:\n\nif the title itself contains a colon followed by a space, as in Formalization: a dummy's guide)\nor if it contains quotation marks, as in The Meaning of 'meaning'. If it contains single quotation marks ', you should enclose it with double ones \" and conversely.\n\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\ntitle: A \"good\" friend\ntitle: A 'good' friend\ntitle: My Life: a Long Story\ntitle: 'A \"good\" friend'\ntitle: \"A 'good' friend\"\ntitle: \"My Life: A Long Story\"\n\n\n\nA long title can also be entered on several lines. (EXPAND)\nA common source of error: you break a line in a middle of a field’s value and continue on the next line. Then pandoc interprets the next line not as part of the value, as you intended, but as a new field altogether, and can’t make sense of the rest of your block. For instance, the following will generate an error:\ntitle: 'Introduction: The Formalization of\narguments with various applications'\nauthor: Robert Michels\n\nWhy? Because the second line starts with ‘arguments’, which pandoc takes to be the name of a metadata field, which it doesn’t understand and complains about. Instead, there should be no manual line-break within the title:\ntitle: 'Introduction: The Formalization of arguments with various applications'\nauthor: Robert Michels\n\nGenuine vs apparent linebreak. Your text editor is likely set up to “soft wrap” long lines. This means that a very long line is in apparence broken and displayed as several lines. In the file though, and most importantly in the eyes of the computer, it remains a single line.1 When a text editor displays line numbers, you can tell that a line is soft-wrapped by the fact that doesn’t introduce a new line number. Another way to tell that your editor is soft-wrapping is to resize the windows: if the linebreaks are rearranged so that your text is showing, your editor is soft-wrapping and hence what looks like a new line could just be the continuation of a previous line.\n(To check that this happens, reduce the size of your windows: are the line breaks changed to fit the new window? if yes, then your display is “soft-wrapped”.) If your editor as line numbers on the left (e.g. RStudio, sublime), you can tell which are the genuine\nIf you aren’t sure whether there’s a line-break in the middle of your title (between various and applications in the title above, say), you can:\n\nwiden your editor’s window and see whether the text moves back up to the original line,\nor otherwise go to the beginning of the second line, hit backspace to ‘glue’ the two words (variousapplications), and hit the space key to make sure that they’re separated by a space and not a line-break."
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#additional-title-fields",
    "href": "chapters/copyediting/16-cop-metadata.html#additional-title-fields",
    "title": "7  Metadata",
    "section": "7.2 Additional title fields",
    "text": "7.2 Additional title fields\n\n7.2.1 Short title\nIf the title is too long to fit in the header, you can specify a short title in addition:\ntitle: An extremely long-winded and verbose title about a range of topics including but not restricted to the weather\nshorttitle: A long-winded title about the weather\n\nThis will be used in the table of contents too.\n\n\n7.2.2 Linebreaks in a title\nRequires: dialectica templates.\nIn LaTeX/PDF output it is sometimes useful to manually specify a line break within the title. There are two fields to provide this, title-latex and title-cover:\ntitle: A Very Long Title that Can be Broken in Various Places\ntitle-latex: |\n  A Very Long Title that \\\n  Can be Broken in Various Places\ntitle-cover: |\n  A Very Long Title that Can be\\\n  Broken in Various Places\n\nIn a metadata field, the \\ at then end of a line specifies a linebreak. Warning: it must be immediately followed by an end of line (no spaces!).\n\ntitle-latex controls the title on the first page (“chapter” title). It also sets the offprint cover page unless title-cover is also supplied.\ntitle-cover controls the title on the offprint’s cover page. If you want title-latex to modify the first page’s title only, simply insert title-cover with the same content as title.\nThe title field must be provided, even if title-cover and/or title-latex are given\n\n\nBy default titles on the offprint’s cover are of LaTeX size \\Huge if they are less than 31 characters long, otherwise the slightly smaller size \\huge. You can specify a custom LaTeX size if needed (\\Huge, \\huge, \\LARGE, \\Large, \\large etc.) with the title-cover-size field. This only affects LaTeX/PDF output.\ntitle-cover-size: \\huge\n\n\n7.2.3 Subtitle\nYou can provide a subtitle with the subtitle key:\ntitle: Frankenstein\nsubtitle: The Modern Prometheus\n\nRequires: dialetica templates. Dialectica’s template typeset the subtitle thus:\n\nOn the paper’s title page, it is printed below the title, in smaller font.\nIn the table of contents, it is printed after a colon:\n\n\n\nFrankenstein: The Modern Promoetheus\n\n\nYou can override the colon by specifying a subtitle separator, e.g. a simple space:\ntitle: So What?\nsubtitle: My Quest for the Meaning of Life\nsubtitleseparator: ' '\n\nAs with title, you can use the additional subtitle-latex, subtitle-cover, subtitle-cover-size to add linebreaks in the first page and cover subtitles and to control the size of the cover subtitle if needed.\nYou must still provide the subtitle key.\ntitle: So What?\nsubtitle: My Quest for the Meaning of Life\nsubtitle-separator: ' '\nsubtitle-latex: |\n  My Quest\\\n  for the Meaning of Life\nsubtitle-cover: |\n  My Quest\\\n  for the Meaning of Life\nsubtitle-cover-size: \\Large"
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#authors-information",
    "href": "chapters/copyediting/16-cop-metadata.html#authors-information",
    "title": "7  Metadata",
    "section": "7.3 Author(s) information",
    "text": "7.3 Author(s) information\nRequires. The scholarly-metadata and scholarly-format filters.\nWe specify author information as follows.\nauthor:\n- name: Susan Stebbing\n  email: s.stebbing@kcl.ac.uk\n  correspondence: true\n  institute: \"King's College London\"\n\nNote that there is a dash (-) before the first line (name field), and that all the other lines begin with a couple of spaces. correspondence: true is needed to indicate that the email address should be printed. Here we have put the affiliation in \" quotes because it contains a special symbol (the ' quote sign).\nWhen we have several authors, each gets a block that starts with a dash:\nauthor:\n- name: Susan Stebbing\n  email: s.stebbing@kcl.ac.uk\n  correspondence: true\n  institute: \"King's College London\"\n- name: Cecil Day-Lewis\n  institute: Cambridge University\n\nYou can specify several affiliations for an author:\nauthor:\n- name: Susan Stebbing\n  email: s.stebbing@kcl.ac.uk\n  correspondence: true\n  institute: \n  - \"King's College London\"\n  - Bedford College, London\n\nYou can also specify a list of affiliations separately, and associate each author to their affiliations. This is most useful when several authors share the same affiliation:\ninstitute:\n- kcl: \"King's College London\"\n- bedford: Bedford College, London\nauthor:\n- name: Susan Stebbing\n  institute: [kcl, beford]\n- name: \"Jane Q. Doe\"\n  institute: bedford\n\nHere kcl, bedford are used as internal keys to associate each author with their affiliations - they won’t be printed. Note that if an author has several affiliations, they should be listed in brackets, separated by commas: [kcl, bedford]. Where there is only one the brackets are optional: for Jane Q. Doe above we could have written institute: [bedford] as well.\nYou can do without keys too, by listing the affiliations in some order and using numbers to refer to them. The metadata below is equivalent to the above:\ninstitute:\n- \"King's College London\"\n- Bedford College, London\nauthor:\n- name: Susan Stebbing\n  institute: [1, 2]\n- name: Jane Doe\n  institute: [2]\n\nSee the scholarly-metadata filter page for more options and information."
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#author-in-page-header-and-table-of-contents",
    "href": "chapters/copyediting/16-cop-metadata.html#author-in-page-header-and-table-of-contents",
    "title": "7  Metadata",
    "section": "7.4 Author in page header and table of contents",
    "text": "7.4 Author in page header and table of contents\nRequires. The dialectica template.\nYou may sometimes need to typset the authors differently in the page header and table of contents. This is done using the author-header and author-toc keys:\nauthor:\n- name: Doe, Alice\n- name: Doe, Brit\n- name: Doe, Celia\n- name: Doe, Denis\n- name: Doe, Ethne\nauthor-header: Doe et al.\nauthor-toc: Doe A., Doe B., Doe C., Doe D., and Doe E."
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#abstract-and-thanks",
    "href": "chapters/copyediting/16-cop-metadata.html#abstract-and-thanks",
    "title": "7  Metadata",
    "section": "7.5 Abstract and thanks",
    "text": "7.5 Abstract and thanks\nthanks: |\n  The author would like to thank Jane Doe and Erika Mustermann\n  as well as audiences at the Universities of Shallow Objections.\nabstract: |\n  In this paper I explain that the *problem* is more difficult to\n  solve that the equation $4x^2 = 8$ and more complicated than the\n  formula $(P \\land \\lnot P) \\rightarrow Q$. Thankfully, I have\n  found the solution.\nkeywords:\n-   problem\n-   solution\n-   symbols\nbibliography: references.bib\nheader-includes: |\n  '''{=latex}\n  \\\\usepackage{bussproofs}\n  '''\n\nFields like abstract and thanks usually spread over several lines. If so, the field starts with a “I” and the content is written below. Each line should start with a space (so that the computer knows it’s still the abstract, and not a new metadata field). For instance, this would break down:\nabstract: |\n  The purpose of this introduction is to give a rough overview of the \ndiscussion of the formalization of arguments, focusing on deductive\narguments.\n\nBecause “discussion” is at the beginning of a line, so Pandoc assumes it’s a new field rather than the continuation of the multiline text.\nInstead you should have a space at the beginning of every line:\nabstract: |\n  The purpose of this introduction is to give a rough overview of the\n  discussion of the formalization of arguments, focusing on deductive\n  arguments.\n\nWarning. Abstract and acknowledgments cannot contain markdown citations like @Smith. Write them in plain text instead, Smith (1980).\n\nDialectica guidelines.\nAbstracts are strongly recommended. Most people who bump on the article will only read that. They must be at most 200 words or so, to fit in the first article page."
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#keywords-and-other-lists",
    "href": "chapters/copyediting/16-cop-metadata.html#keywords-and-other-lists",
    "title": "7  Metadata",
    "section": "7.6 Keywords (and other lists)",
    "text": "7.6 Keywords (and other lists)\nIn some cases the content is a list, and in those case the syntax is as with a list of authors:\nkeywords:\n- speculative metaphysics\n- nonsense"
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#bibliography",
    "href": "chapters/copyediting/16-cop-metadata.html#bibliography",
    "title": "7  Metadata",
    "section": "7.7 Bibliography",
    "text": "7.7 Bibliography\nThe name of the associated .bib file.\nImportant. The bibliography field cannot be empty. This:\ntitle: My paper\nauthor: Jane E. Doe\nbibliography:\n\nWill generate a Pandoc error File  not found in resource path."
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#and-more-generally",
    "href": "chapters/copyediting/16-cop-metadata.html#and-more-generally",
    "title": "7  Metadata",
    "section": "7.8 And more generally…",
    "text": "7.8 And more generally…\nMore generally format is simple, each entry is of the form:\nfield : content\nList entries are:\nfield :\n- item 1\n- item 2\n\nList within lists are sometimes used\nfield :\n- first list\n  - item 1\n  - item 2\n- another list\n  - object 1\n  - object 2\n\nMultiline fields start with |, followed by one or more lines that each start at least one space:\nfield : |\n  This very verbose field contains a bunch of text that \n  spans over a few lines\n  to allow the author to vent a few grudges."
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#footnotes",
    "href": "chapters/copyediting/16-cop-metadata.html#footnotes",
    "title": "7  Metadata",
    "section": "",
    "text": "Technically: a text file is just a sequence of characters (letters, numbers, spaces, etc.). But among those is the special “newline” character that ends a line. It’s sometimes displayed as a backwards P, or a carriage return arrow. Real lines are sequences of characters between newlines characters. Hard wrapping is cutting a line by adding a newline character. By contrast, soft-wrapping doesn’t add a newline character in the file, doesn’t create a real new line, and is just a matter of appearance.↩︎"
  },
  {
    "objectID": "chapters/copyediting/165-cop-grammar-usage.html#possessives",
    "href": "chapters/copyediting/165-cop-grammar-usage.html#possessives",
    "title": "8  Grammar and usage",
    "section": "8.1 Possessives",
    "text": "8.1 Possessives\nPossessives and plural. Distinguish shared vs separate ownership:\n\nAli and Ben’s book(s). The book(s) jointly authored by Ali and Ben.\nAli’s and Ben’s book(s). The book(s) authored by Ali and the book(s) authored by Ben."
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#punctuation",
    "href": "chapters/copyediting/17-cop-inline-elements.html#punctuation",
    "title": "9  Inline elements",
    "section": "9.1 Punctuation",
    "text": "9.1 Punctuation\n\n9.1.1 Punctuation and brackets\nIf only part of the sentence is in parentheses, put the final punctuation outside of the parenthesis:\n\n\nI enjoy breakfast (sometimes).\n\n\nIf the entire sentence is in parenthesis, put the punctuation inside the parenthesis.\n\n\nI enjoyed breakfast. (I always do.)\n\n\n\n9.1.2 Punctuation and quotation marks\nSee Chapter 12."
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#emphasis-and-bold",
    "href": "chapters/copyediting/17-cop-inline-elements.html#emphasis-and-bold",
    "title": "9  Inline elements",
    "section": "9.2 Emphasis and bold",
    "text": "9.2 Emphasis and bold\nEmphasized text is marked with surrounding asterisks or underscores. Bold is marked with double asterisks or underscores, emphasized bold with three:\nThis *word* and _that word_ are emphasized. \n\nThis **word** and __that word__ are strongly emphasized.\n\n***This sentence is extra strongly emphasized.*** \n\nEmphasis is printed in italics when surrounded with normal text. But when the surrounding text is itself in italics, this is the opposite.\n\nDialectica guidelines\nUse simple emphasis only. Avoid strong emphasis (bold), which stands out too much on the page.\nSimple emphasis (italics, one asterisk or underscore) is used: - for emphasis, - for labels of principles in statements:\nPrinciple of Compositionality.\n\nfor mentioned words (e.g. in philosophy of language papers):\nThe verb know has two meanings\nfor simple symbols (when the paper doesn’t use formulas otherwise):\nS knows that p.\n\n\nBold should be only used in limited cases:\n\nsome acronyms for a principle (PC), a system of logic (S4)."
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#subscripts-and-superscripts",
    "href": "chapters/copyediting/17-cop-inline-elements.html#subscripts-and-superscripts",
    "title": "9  Inline elements",
    "section": "9.3 Subscripts and superscripts",
    "text": "9.3 Subscripts and superscripts\nSubscripts and superscripts in markdown text are coded as follows:\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nA sub1 script and a sup1 script (when attached to plain text words).\nA sub~1~ script and a sup^1^ script.\n\n\nWater is H2O.\nWater is H~2~O.\n\n\nThe no 1 activity\nThe n^o^\\ 1 activity\n\n\n\nMost often, though, superscripts and subscripts are part of LaTeX formulas. The code is then entered as follows.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nWith \\(p_1\\) and \\(p^2\\) the sub(/super)scripts are in formulas.\nWith $p_1$ and $p^2$ the...\n\n\nWith \\(p_{12}\\) and \\(p^{**}\\) the sub(/super)scripts are several characters long.\nWith $p_{12}$ and $p^{xy}$ the...\n\n\n\nNote that in LaTeX, when your sub(/super)script is more than one character long, it needs to be enclosed in curly braces.\nDo not use LaTeX’s \\sb and \\sp commands: MathJaX, our tool for displaying LaTeX formulas in HTML output, doesn’t recognize them."
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#sec-hyphens-dashes",
    "href": "chapters/copyediting/17-cop-inline-elements.html#sec-hyphens-dashes",
    "title": "9  Inline elements",
    "section": "9.4 Hyphens and dashes",
    "text": "9.4 Hyphens and dashes\nThe hyphen - is used between words:\n\n\nAn eye-popping headline.\n\n\nEn-dashes -- between numbers:\n\n\nPages 17–19.\n\n\nEm-dashes --- for insertions:\n\n\nHe bailed out—and never came back. The mayor—a notorious narcissist—went to the press.\n\n\n9.4.1 Compound words: when to hyphenate\nThe general rule is that compound adjectives are hyphenated but compount nouns aren-t:\n\n\nAn Egyptian-inspired drawing. A day-to-day schedule. A theory-laden observation.\n\n\n\nA trailer park. A car shed. The equality view.\n\n\n\n9.4.2 Insertion dashes\nIn standard English typesetting, insert dashes should not be surrounded by spaces.\n\n\n\n\n\n\n\nGOOD\noutput\n\n\n\n\nThe y---or their friends---weren't having it.\nThey—or their friends—weren’t having it.\n\n\n\n\n\n\n\n\n\n\nBAD\noutput\n\n\n\n\nThey - -- or their friends ---weren't having it.\nThey — or their friends — weren’t having it.\n\n\n\nNote that end of lines in markdown are treated as spaces by Pandoc, so to avoid surrounding spaces the em dash should not be at the beginning or end of a line.\nFor a non-breaking hyphen, use the HTML code &#8209;:\n\n... $\\supset$&#8209;analysis... prints out as ‘\\(\\supset\\)‑analysis’ and the hyphen cannot be at a linebreak.\n\n\nDialectica guidelines\nEm-dashes are not surrounded by spaces."
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#acronyms",
    "href": "chapters/copyediting/17-cop-inline-elements.html#acronyms",
    "title": "9  Inline elements",
    "section": "9.5 Acronyms",
    "text": "9.5 Acronyms\nCf “Abbreviations” chapter in the Chicago manual.\nAcronyms are in caps, not bold. Exception: logic contexts, where axiom schemas, systems of logic, etc. may be labelled in bold.\nAcronyms of more than three letters are in small caps."
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#foreign-words",
    "href": "chapters/copyediting/17-cop-inline-elements.html#foreign-words",
    "title": "9  Inline elements",
    "section": "9.6 Foreign words",
    "text": "9.6 Foreign words\nCf “Italics, Capitals, and Quotation Marks” of the Chicago manual. In summary:\n\nNot italics if they are “familiar”, i.e. appear in the Webster’s dictionary. Italics otherwise.\nException: if you have two nearby each other and one is unfamiliar, make both italics for consistency (e.g. mise en scène and mise en bouteille).\n\n\nSome common cases:\n\nFamiliar. A priori, a posteriori, ceteris paribus, inter alia, ad hominem, modus ponens\nUnfamiliar. Salva veritate, ex falso quodlibet, …"
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#sec-linebreak",
    "href": "chapters/copyediting/17-cop-inline-elements.html#sec-linebreak",
    "title": "9  Inline elements",
    "section": "9.7 Line break",
    "text": "9.7 Line break\nExceptionally you may need a line break that does not start a new paragraph. This is encoded by finishing a line with a backlash. Thus the following:\n\n\nThis line ends here\nand a new one starts.\n\n\nis encoded as follows:\nThis line ends here \\\nand a new one starts."
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#prevent-line-breaks",
    "href": "chapters/copyediting/17-cop-inline-elements.html#prevent-line-breaks",
    "title": "9  Inline elements",
    "section": "9.8 Prevent line breaks",
    "text": "9.8 Prevent line breaks\nSometimes you need to prevent line breaks. If you use suppressed-author references, they are awkard at the beginning of lines as in:\n\n\n… Smith’s great theory (1972). On the other …\n\n\nThe code for this would be:\n... Smith's great theory [-@Smith1972]. On the other hand\n\nTo prevent this use non-breakable spaces, which can be introduced with a backclashed-escaped space \\ or with the HTML code &nbsp;, as follows:\n... Smith's great theory\\ [-@Smith1972]. On the other hand\n\n... Smith's great theory&nbsp;[-@Smith1972]. On the other hand\n\nDon’t use this to fine-tune how the long the lines are or the like; only when it makes sense in terms of the content: when it’s a matter of sticking say a citation year to what’s going with it, “i.e.” to what follows, and the like."
  },
  {
    "objectID": "chapters/copyediting/171-cop-inline-special-chars.html#schematic-letters",
    "href": "chapters/copyediting/171-cop-inline-special-chars.html#schematic-letters",
    "title": "10  Special characters",
    "section": "10.1 Schematic letters",
    "text": "10.1 Schematic letters\nSchematic letters in the text, as in:\n\n\n\\(S\\) knows that \\(p\\)\n\n\nshould normally be typset as math formulas. See Chapter 22.\nIf there are very few schematic letters in an article, it’s acceptable to typeset them as caps and/or emphasis:\n\n\nS knows that p."
  },
  {
    "objectID": "chapters/copyediting/171-cop-inline-special-chars.html#hyphens-and-dashes",
    "href": "chapters/copyediting/171-cop-inline-special-chars.html#hyphens-and-dashes",
    "title": "10  Special characters",
    "section": "10.2 Hyphens and dashes",
    "text": "10.2 Hyphens and dashes\nSee Section 9.4."
  },
  {
    "objectID": "chapters/copyediting/171-cop-inline-special-chars.html#split-fractions",
    "href": "chapters/copyediting/171-cop-inline-special-chars.html#split-fractions",
    "title": "10  Special characters",
    "section": "10.3 Split fractions",
    "text": "10.3 Split fractions\nInline fractions look better when split as in ½ than straight as in \\(\\frac{1}{2}\\). For ½, ¼ and ¾ you can use the HTML entites &frac12;, &frac14; and &frac34; respectively.\nFor more see Section 22.4."
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#what-is-a-block",
    "href": "chapters/copyediting/19-cop-block-elements.html#what-is-a-block",
    "title": "11  Simple block elements",
    "section": "11.1 What is a block?",
    "text": "11.1 What is a block?\nA traditional document consists of lines of text organized into blocks, e.g. paragraphs or headings. A markdown document is likewise organized into inline elements that are put together into block elements.\n\nInline elements\n\nwords and spaces,\na few words in italics,\na formula in the flow of the text, such as \\(x+y=c\\).\n\nBlock elements\n\nparagraphs\nsection headings\nimages, figures, tables\nfootnotes\n‘Divs’, i.e. arbitrary divisions\n…\n\n\n\nSome blocks (‘Div’ blocks, tables, footnotes) contain other blocks.\nSome mathematical formulas are blocks, others are inline. We deal with them separately in Chapter 22."
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#paragraphs",
    "href": "chapters/copyediting/19-cop-block-elements.html#paragraphs",
    "title": "11  Simple block elements",
    "section": "11.2 Paragraphs",
    "text": "11.2 Paragraphs\nNew paragraphs are encoded by leaving an empty line. That is, an empty line separates two paragraphs.\nIn typography paragraphs are distinguished from each other in two ways: first-line indentation (common in books) or a vertical space (common on the web). Your journal template will automatically typeset those.\nIf your journal template uses the first-line indent way of separating paragraphs, it will mostly handle typographic conventions correctly. For instance, it will be set not to indent the first line of paragraphs right below a heading (English convention) or to indent it (common in French). However, there are a few cases where you will need to manually specify that a first-line indent is or is not desired. See below.\nSometimes (rarely) you need a line break that does not start a new paragraph. See Section 9.7.\nProblem. Text that directly follows a list, quote, figure, table or other indented material (statement) may either be a continuation of the previous paragraph or the beginning of a new one. That is a matter of meaning (is the text finishing the previous idea, or beginning a new idea?) and may not be clear-cut in all cases. If your journal uses first-line indentation to separate paragraphs, continuations should not be typset with an indented first line, but new paragraphs should.\nThe engine makes default assumptions: normally text below a list, quotation or statement continues the paragraph above and text below a table is a new paragraph. When the default assumption is wrong, we need to manually specify that a paragraph’s indent is to be treated otherwise.\nThere are two ways to solve this.\n\nDialectica guidelines. Our template uses the first-line indentation style of separating paragraph, and we use the first solution below. Sometimes it is unclear whether a paragraph continues the previous one or is a new one: the best is to ask the author, but you can also use your best judgement.\n\n\n11.2.1 With the first-line-indent filter\nRequires: the first-indent-line filter.\n\nAdd \\indent at the beginning of a paragraph to force a first-line indentation.\nAdd \\noindent at the beginning of a paragraph to prevent first-line indentaiton.\n\n\nExample. In the text below, the quotation ends the paragraph: the text below the quotation isn’t a continuation of the previous paragraph but a new paragraph. This goes against the default assumption, so we need to add \\indent. On the other hand, the paragraph under the table is a continuation of the previous one, which also goes against the default assumption. So we add a \\indent.\nIn the final words of the wise man:\n\n&gt; It's unclear what is going on here.\n\n\\indent Now on another note, we can see from the table below:\n\n\nTest group   Control group\n----------- ----------------\n.9            .9\n\n\\noindent That we don't observe any difference between the two groups.\n\nNote: \\indent and \\noindent are LaTeX code, but the first-line-indent filter ensures they are formatted correctly in other output formats.\nNote: you can follow this section’s advice even if your journal doesn’t currently use first-line identation to separate paragraphs but vertical spaces instead. With the first-line-indent filter the added code won’t make a difference to the output, but it will allow you to switch to first-line indent later if needed.\nSee the first-line-indent filter’s page for more options and information.\n\n\n11.2.2 Without the filter\nIf your journal does not use the first-line-indent filter, you can only control first-line indentation for the LaTeX/PDF output, not HTML.\nWithout the filter, text after any block element is treated as a new paragraph.\n\nAdd \\noident at the beginning of paragraphs following quotations, statements, lists unless they are genuninely new paragraph.\n\n\nYou may add \\indent on paragraphs that need to be indented, but that’ll be the default.\nNote: if your journal currently uses vertical spacing rather than first-line indentation to separate paragraphs, adding \\noindent codes does no harm. But if you don’t use the first-line-indent filter, adding \\indent codes will indent paragraphs even if the journal style uses vertical spacing. So either use the filter or don’t use indent codes unless your journal is set to use first-line indentation."
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#headings",
    "href": "chapters/copyediting/19-cop-block-elements.html#headings",
    "title": "11  Simple block elements",
    "section": "11.3 Headings",
    "text": "11.3 Headings\nHeadings of different levels (section, subsection, subsubsection) are encoded as a line starting with #, ##, ### followed by the title.\n\n\n\n\n\n\n\nI want\nI type\n\n\n1. Section heading\n# Section title\n\n\n1.2 Subsection heading\n## Subsection title\n\n\n1.2.1 Subsubsection title\n\n### Subsection title\n\n\nlower titles\n####, #####, ######\n\n\n\n\nIn Dialectica headings are numbered up to the subsection (#, ##, ###). Headings of level four (####) are used for un-numbered smaller units.\nWe have also two “inline” headings style, where the heading title is displayed at the beginning of the following paragraph rather than on its separate line. They are level 5 (#####) and level 6 (#######).\nWe discourage authors from using headings below the subsection (##) in articles though, though we can use them if the they improve readibility.\n\nDo not manually add numbers to section headings. They are automatically added by the house template.\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\n# 1 Methods\n# Methods\n\n\n# 1\n#\n\n\n\nIf the heading has no title, you should simply enter # (or the relevant level) with no title.\n\n\nIf an article starts with an introduction section, that section should not have aheading. So do not start articles with:\n\n# Introduction"
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#footnotes-and-endnotes",
    "href": "chapters/copyediting/19-cop-block-elements.html#footnotes-and-endnotes",
    "title": "11  Simple block elements",
    "section": "11.4 Footnotes and endnotes",
    "text": "11.4 Footnotes and endnotes\nYour template decides whether notes are printed out as footnotes or endnotes. The encoding is the same whichever it uses. We’ll call them “notes” here.\nThere are two ways to enter notes. The first is inline, without identifier. This is suitable for brief notes:\n\n\nThis is the main text.1 This continues the main text.\n\nThis is the main text.^[In footnote, I distract you with an irrelevant point.]\nThis continues the main text.\n\nThe second is a reference link, with identifier. This is suitable for longer notes, and required if a note has several paragraphs:\n\n\nThis is the main text.2 This continues the main text. This next paragraph that isn’t part of the footnote.\n\nThis is the main text.[^myidentifier] This continues the main text.\n\n[^myidentifier]: This note takes more space.\n\n    It contains several paragaphs.\n                 \n    &gt; It even includes a quotation.\n                 \n    And ends here.\n    \nThis next paragraph that isn't part of the footnote.\n\nNote that the ^ is outside of square brackets in the inline style, inside it in the reference style. In the reference style the footnote can be placed anywhere in the document. Common choices are at the end of the current block or at the end of the current chapter, or at the end of the document or chapter.\nIn multi-paragraph footnotes, indent each block with two spaces to indicate that it’s part of the footnote rather than resuming the main text, as in the example above.\nIn the reference style you can use numbers as identifiers:\n\n\nThis is the main text.3\n\n\n&gt; This is the main text.[^1]\n\n[^1]: this is the foonote.\n\nNumber identifiers can be a problem if you’re planning to fuse several documents, e.g. chapters of a book or articles in a journal issue. For two [^1] footnotes in separate chapters will create an error. However, Quarto or the collection filter can handle these conflicts. With them number identifiers are fine.\nCross-reference to footnotes has to be done manually. Don’t enter them before you know that the footnote numbers are final. See the cross-referencing chapter.\n\nDialectica guidelines.\nIt’s fine to use link references with simple numbers: [^1], [^2], as we use the collection filter. These are automatically generated by Pandoc when converting manuscripts and it’s a waste of time to replace them. Our collection filter ensures that no identifier conflict arises between articles."
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#sec-divs",
    "href": "chapters/copyediting/19-cop-block-elements.html#sec-divs",
    "title": "11  Simple block elements",
    "section": "11.5 Divs",
    "text": "11.5 Divs\nDivs are general-purpose blocks that we use to typeset advanced elements like statements, or to mark out sections of a document for a special treatement, e.g. ‘imagifying’ all the LaTeX formulas it contains. This section explains how to encode them.\nA Div is an arbitrary document division, usually invisible to the reader. It contains one or more blocks—which can be paragraphs, quotations, etc. or even other Divs. It also has attributes, and that is what makes it useful: for we use the attributes to tell our typesetting engine that the Div’s content are to receive a special treatement. In the case of statements, we use a Div with the special statement attribute to tell the engine that its contents are a statement—hence, that they must be indented.\nIn markdown, Divs are created using a pair of “fences”, which are single lines consisting of one or more colons:\n\nThis paragraph is in the main flow of text.\n\n:::\n\nThis paragraph is inside a Div.\n\nThis paragraph is also inside the same Div\n\n:::\n\nThe first ::: fence opens the Div, the second one closes it. We can include a Div within a Div by using a greater number of colons for the enclosed one:\n\nThis paragraph is in the main flow of text.\n\n:::\n\nThis paragraph is inside a Div.\n\n:::::\n\nThis paragraph is inside a new Div that's inside the first Div.\n\n:::::\n\nThis paragraph is inside the first Div.\n\n:::\n\nIt’s good practice, though not technically necessary, to use the same number of colons for the opening fence and the closing fence of the same Div.\nThe Divs in the examples above are completely invisible in PDF or html outputs. Divs become interesting when you give them attributes. Attributes are added to the opening fence of a Div, between curly braces:\n\n::: { .statement #myprinciple color=red }\n\nEverything comes in due time.\n\n:::\n\nThis illustrates the three kinds of attributes a Div may have:\n\none or more classes indicated with a dot, e.g. .statement. A class indicate that the Div is of a certain kind. Several Div can be of the same class (kind), and a single Div can have several kinds.\nan unique identifier aka ID: indicated with a hash, e.g. #myprinciple. This uniquely identifies a Div, to cross-reference it for instance. A Div can only have one ID, and a Div’s ID should not be assigned to any other Div nor even to any other element (such as a heading, figure, etc.).\nKey-value pairs, indicated by the equal sign, e.g. color=red. These are used to state that a certain aspect of the Div (e.g., the text color) has a certain value. If the value contains space or special symbols it’s enclosed in quotation marks.\n\n\nFor statements only classes and IDs are relevant.\nWhen a Div’s attributes consist of a single class, and nothing else, it can be encoded without curly braces and dots. Thus the following:\n\n::: { .statement }\n\nEverything comes in due time.\n\n:::\n\ncan be abbreviated:\n\n::: statement\n\nEverything comes in due time.\n\n:::\n\nSome prefer more visible fences. You can use full lines of colons. If there are attributes, you may add colons after the attributes too. For instance, the earlier attributes example can just as well be encoded as:\n\n::: { .statement #myprinciple color=red } :::::::::::::::::::::::::\n\nEverything comes in due time.\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\nThis is wholly up to you: using full-width fences or shorter ones makes no difference to the result."
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#footnotes",
    "href": "chapters/copyediting/19-cop-block-elements.html#footnotes",
    "title": "11  Simple block elements",
    "section": "",
    "text": "In footnote, I distract you with an irrelevant point.↩︎\nThis note takes more space.\nIt contains several paragaphs.\n\nIt even includes a quotation.\n\nAnd ends here.↩︎\nthis is the foonote.↩︎"
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#inline-vs-block-quotations",
    "href": "chapters/copyediting/191-cop-block-quotations.html#inline-vs-block-quotations",
    "title": "12  Quotations",
    "section": "12.1 Inline vs block quotations",
    "text": "12.1 Inline vs block quotations\nSome quotations are inline and other are blocks.\n\nDialectica guidelines. Short quotations (up to about 2 lines) are inline, unless authors specifically want to set them out. Longer quotations (from about 3 lines) are normally block. But they can be inline, especially if they’re basically used as a substitute for the authors’ own words rather than something to be examined or discussed."
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#inline-quotations",
    "href": "chapters/copyediting/191-cop-block-quotations.html#inline-quotations",
    "title": "12  Quotations",
    "section": "12.2 Inline quotations",
    "text": "12.2 Inline quotations\nInline quotations are encoded with quotation marks ' or \". Don’t use special opening and closing quotation mark characters:\n\nFor inline quotations use double quotation marks:\n\n\n\nGOOD\noutput\n\n\n\n\nThis \"best practice\" is a hack.\nThis “best practice” is a hack.\n\n\nThis 'best practice' is a hack.\nThis ‘best practice’ is a hack.\n\n\n\n\nAs you can see, Pandoc automatically converts straight marks into opening or closing ones as needed.\nThere are two traditions:\n\nUS/modern British. Double quotation marks. Closing quotation mark placed after punctuation marks, even if those aren’t in the quote:\n\nShe never said the word “traitor.”\n\ntraditional British. Single quotation marks. Closing quotation mark before punctuation marks unless these are parts of the quote:\n\nShe never said the word ‘traitor’&zmj;.\n\n\n\nPandoc applies the US convention by default. This can be avoided globally by setting the document’s language to en-GB. It can be avoided on a case-by-case basis by using a “zero-width joiner” characters, markdown code &zmj;:\nShe never said the word 'traitor'&zmj;.\n\n\nShe never said the word ‘traitor’&zmj;.\n\n\nDialectica guidelines\nDialectica adopts the US/Chicago convention, unless authors insist otherwise or the results are particularly problematic. If an author insists to use the traditional British convention, it should be consistent throughout their paper.\n\n\n12.2.1 Quoting words\nWhen a word or expression is used not with its usual meaning but to denote that word or expression itself, we use quotation marks or italics.\n\n\nI can’t stand the word “scrumptious”.\n\n\n\nI can’t stand the word scrumptious.\n\n\nDon’t use italics if the word is scare-quoted, put a distance, quoted from some other person’s use, etc. Italics are only appropriate if we’re talking of the word or expression italicized.\n\nDialectica guidelines. If references to a word or words are common throughout the paper, as in e.g. linguistics papers, use italics. Otherwise both options are fine, but be consistent throughout a single paper.\n\n\n\n12.2.2 Quotations within quotations\nIf you must use quotation marks within quotation marks, use different ones:\n\n\n\nGOOD\noutput\n\n\n\n\n\"This 'word' is quoted.\"\n“This ‘word’ is quoted.”\n\n\n'This \"word\" is quoted.'\n‘This “word” is quoted.’\n\n\n\nIf you try to put double quotes with double quotes, Pandoc doesn’t output them correctly.\n\n\n\nBAD\noutput\n\n\n\n\n\"This \"word\" is quoted.\"\n“This”word” is quoted.”\n\n\n\nIt is best to impose the rule unless it is imperative to use the same quotes.\nIf you do need to embed the same quotation marks within themselves, use HTML entitles:\n\n\n\nGOOD\noutput\n\n\n\n\n\"This &ldquo;word&rdquo; is quoted\"\n“This”word” is quoted”\n\n\n'This &lsquo;word&rsquo; is quoted'\n‘This ’word’ is quoted’"
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#block-quotations",
    "href": "chapters/copyediting/191-cop-block-quotations.html#block-quotations",
    "title": "12  Quotations",
    "section": "12.3 Block quotations",
    "text": "12.3 Block quotations\nQuotations are marked by either starting a paragraph with &gt; and indenting it, or by starting each line of the paragraph with &gt;, or simply having the first line starting with &gt;\n\n\nThis is a quotation. The second sentence is on an indented line.\n\n\n\nThis is another quotation. The second sentence is on a line starting with &gt;.\n\n\n\nThis is quotation in the lazy style. The second line isn’t even indented or starting with &gt;.\n\n&gt; This is a quotation.\n  The second sentence is on an indented line.\n  \n&gt; This is another quotation.\n&gt; The second sentence is on a line starting with `&gt;`.\n\n&gt; This is quotation in the lazy style.\nThe second line isn't even indented or starting with `&gt;`.\n\nFor readability avoid the lazy style.\nThe quotation citation can be included at the end or in a footnote. If indicated at the end, it should come after the dot of the quotation’s last sentence.\n\n\nGOOD I am happy. (Doe 2020)\n\n\n\nBAD I am happy (Doe 2020).\n\n\n\nGOOD I am sad.1\n\n&gt; GOOD I am happy. [@doe_j:2020]\n\n&gt; BAD I am happy [@doe_j:2020].\n\n&gt; GOOD I am sad.[^doe-quotation]\n\n[^doe-quotation]: @doe_j:2020\n\nDistinguish clearly one quotation with several paragraphs from several consecutive quotations. If, for instance, your template sets out quotations in boxes, you want a single two-paragraphs quotation to come out in one box, not two. Continuing paragraphs are marked by an indentation of 2 spaces or by prefixing intervening empty lines with &gt;:\n\n\nSuppose this is a quotation’s first paragraph.\n\n\nThis second paragraph (indented) is part of the same quotation.\n\n\nSuppose this is a new quotation’s first paragraph.\nThis second paragraph (marked with &gt; prefixes) is part of the same quotation.\n\n&gt; Suppose this is a quotation's first paragraph.\n\n  This second paragraph (indented) is part of the same quotation.\n\n&gt; Suppose this is a new quotation's first paragraph.\n&gt;\n&gt; This second paragraph (marked with `&gt;` prefixes) \n&gt; is part of the same quotation.\n\nBeware: if you use indentation, make it two spaces only. Four spaces indentation is used for code blocks (blocks of computer language).\nSeveral but consecutive quotations are instead separated by an empty line:\n\n\nThis is a first quotation.\n\n\n\nThis is a second quotation that directly follows the first.\n\n&gt; This is a first quotation.\n\n&gt; This is a second quotation that directly follows the first.\n\nNote that the second quotation starts with &gt; and isn’t indented.\nYou can have quotations within quotations.\n\n\nAs someone said once:\n\n\nThe life unexamined isn’t worth living.\n\n\n&gt; As someone said once:\n&gt; \n&gt; &gt; The life unexamined \n&gt; &gt; isn't worth living.\n\nDialectica guidelines\nIf the quote is longer than 4 lines, use block quotation.\n\nno double marks\nperiod goes before reference\n\n&gt; [block quotation]. [@doe_j:2020, 20]\n\nResult:\n\n\n[block quotation]. (Doe 2020, 20)\n\n\n\n12.3.1 Troubleshooting\nProblem. The quotation or parts of it comes out in computer-language font.\nSolution. You’ve indented a block of your quotation by four spaces. Use two instead.\n\n\n\n\nDoe, Jane. 2020. “An Imaginary Article.” Review of Ideas 10: 13–27. https://doi.org/10.0000/123456789."
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#footnotes",
    "href": "chapters/copyediting/191-cop-block-quotations.html#footnotes",
    "title": "12  Quotations",
    "section": "",
    "text": "Doe (2020)↩︎"
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#simple-lists",
    "href": "chapters/copyediting/192-cop-block-lists.html#simple-lists",
    "title": "13  Lists",
    "section": "13.1 Simple lists",
    "text": "13.1 Simple lists\nSimple unnumbered lists\n* an item\n  * a sub-item\n  * another sub-item\n* an item\n\nResult:\n\nan item\n\na sub-item\nanother sub-item\n\nan item\n\n\nYou can use - as well as *, and you can mix markers.\nNumbered lists:\n1. item\n2. item\n  a. sub item\n  b. sub item\n3. another item\n\nResult\n\nitem\nitem\n\n\n\nsub item\nsub item\n\n\n\nanother item\n\n\nNote that markdown ignores the particular number and number format you enter.\na. apples\nb. peaches\n\n2. pears\n4. bananas\n7. cherries\n\nResult\n\napples\npeaches\n\n\n\npears\nbananas\ncherries\n\n\nYou can put blocks (paragraphs, quotations, etc.) as list items. To do so, align the following blocks with a couple of spaces:\n1. This list item has not just one paragraph.\n\n  It has two paragraphs.\n  \n2. &gt; This section list item\n  &gt; contains a quotation.\n  \n  &gt; And the quotation is two \n  &gt; paragraphs.\n\nResult\n\nThis list item has not just one paragraph.\n\n\nIt has two paragraphs.\n\n\nThis section list item contains a quotation.\n\n\n\n\nAnd the quotation is two paragraphs."
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#what-to-do-if-a-list-has-non-standard-labels",
    "href": "chapters/copyediting/192-cop-block-lists.html#what-to-do-if-a-list-has-non-standard-labels",
    "title": "13  Lists",
    "section": "13.2 What to do if a list has non-standard labels?",
    "text": "13.2 What to do if a list has non-standard labels?\nProblem: a text has a list with regularly numbered items (1, 2, 3, or a, b, c, …) but uses * or ' labels in some cases.\nThere are two solutions to this:\n\nIf it’s not too important to single out some items with * or ', then you can re-number the author’s list, using a simple numbered list instead.\nIf it is important to preserve the author’s labels, e.g. if it helps comprehension to see item ’2**’ as a revision of item ‘2’, then use custom labelled lists."
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#numbered-examples-lists",
    "href": "chapters/copyediting/192-cop-block-lists.html#numbered-examples-lists",
    "title": "13  Lists",
    "section": "13.3 Numbered examples lists",
    "text": "13.3 Numbered examples lists\nSome papers have examples (or other items) that are scattered throughout the paper but numbered continuously. For example:\n\n\nSentence (1) below illustrates the Liar paradox:\n\n\nSentence (1) is false.\n\n\n\nNot all self-referential sentences are paradoxical, however:\n\n\nThis sentence contains several words.\nSentence (3) is written in English.\n\n\n\n\nYou enter those as follows using (@) or (@identifier):\nSentence @liar below illustrates the Liar paradox: \n\n(@liar) Sentence (@liar) is false.\n\nNot all self-referential sentences are paradoxical, however:\n\n(@) This sentence contains several words.\n\n(@three) Sentence @three contains several words.\n\n(@) is enough to create a numbered example item. You add an identifier as in (@item3) if you need to refer to it later. To refer to it, simply use @identifier, as above, which you can wrap between parentheses if desired.\nWarning. References to numbered examples do not generate hyperlinks and cannot be placed within links.\nProblem. If a paragraph starts by a reference to a number example that you want to wrap between parentheses, markdown will wrongly think that it’s a new numbered example:\nThe sentence below illustrates the Liar paradox: \n\n(@liar) Sentence (@liar) is false.\n\n(@liar) cannot be true, because...\n\nSolution. “Escape” (i.e., put a backslash in front of) the first parenthesis\nThe sentence below illustrates the Liar paradox: \n\n(@liar) Sentence (@liar) is false.\n\n\\(@liar) cannot be true, because..."
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#sec-custom-labelled-lists",
    "href": "chapters/copyediting/192-cop-block-lists.html#sec-custom-labelled-lists",
    "title": "13  Lists",
    "section": "13.4 Custom labelled lists",
    "text": "13.4 Custom labelled lists\nRequires: the labelled-lists filter.\nA simple illustration of the custom label syntax:\n* [Premise 1]{} This is the first claim.\n* [Premise 2]{} This is the second claim.\n* [Conclusion]{} This is the conclusion.\n\nThis generates the following list (process this file with the filter to see the result):\n\nPremise 1 This is the first claim.\nPremise 2 This is the second claim.\nConclusion This is the conclusion.\n\n\nIn general, the filter will turn a bullet list into a custom label list provided that every item starts with a Span element.\n\nA Span element is inline text (i.e., not block like a paragraph) that optinally has some attributes. The default syntax is [inline text]{attributes}. Inline text will be used as label, placed within round bracket.\nThere is no need to specify attributes on the Span. But curly brackets must be present: [label] won’t work, [label]{} will.\nThe label can include formatting. [**T1**]{} will generate a label with strong emphasis (bold by default).\nSpan elements can also be entered using HTML syntax: &lt;span&gt;inline     text   &lt;/span&gt;. See [Pandoc manual] (https://pandoc.org/MANUAL.html#divs-and-spans) for details.\n\n\nIf an article has many custom labelled lists with empty labels (see Arguments), you may set the delimiters to be empty rather than parentheses by default. See the labelled-lists.lua filter manual.\n\n13.4.1 Commonly used custom labels\nSee also the section on symbols.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nA*, A**, …\nA*, A**, …\n\n\nA′, A″, A‴, A⁗\nA&prime;, A&Prime;, A&tprime;, A&qprime;\n\n\nA1, A2, …\nA^1^, A^2^, …\n\n\nA1, A2, …\nA~1~, A~2~, …\n\n\n\n\n\n13.4.2 Cross-referencing custom-label items\nCustom labels can be given internal identifiers. The syntax is [label]{#identifier}. In the list below, A1ref, A2ref and Cref identify the item:\n* [**A1**]{#A1ref} This is the first claim.\n* [A2]{#A2ref} This is the second claim.\n* [*C*]{#Cref} This is the conclusion.\n\nNote that # is not part of the identifier. Identifiers should start with a letter and contain only letters, digits, colons :, dots ., dashes - and underscores _.\nLabels with identifiers can be crossreferenced using Pandoc’s citations or internal links.\n\n\n13.4.3 Cross-referencing with citations\nThe basic syntax is:\n\nReference in text: @A1ref. Outputs the label with its formatting: A1.\nNormal reference: [@A1ref]. Outputs the label with its formatting, in parentheses: (A1). A prefix and suffix can be specified too: [remember @A1ref and the like] will output (remember A1 and the like).\nThe suppressed author style, [-@A1ref], will be processed as normal reference\n\n\nYou can crossrefer to several custom labels at a time: [@A1ref; @A2ref]. But mixing references to a custom label with bibliographic ones in a same citation won’t work: if Smith2003 is a key in your bibliography [@A1ref; Smith2003] will only output “((A1ref?); Smith, 2003)”.\nBecause this syntax overlaps with Pandoc’s citation syntax, conflicts should be avoided:\n\nAvoid giving the same identifier (e.g. Smith2005) to a custom label item and a bibliographic entry. If that happens, the citation will be interpreted as crossreference to the custom label item. To make sure you you may use identifiers starting with item:: item:A1ref, item:A2ref, or some other prefix.\nThe filter should preferably be run before citeproc, and before other filters that use citations (like pandoc-crossref). It may work properly even if it is run after, though citeproc will issue “citations not found” warnings. To ensure that the filter is run before, just place it before in the command line or in your YAML options file’s filters field.\n\n\nAlternatively, the citation syntax for crossreferencing custom label items can be deactivated. See [Customization] below.\n\n\n13.4.4 Cross-referencing with internal links\nIn Pandoc markdown internal links are created with the syntax [link  text](#target_identifier). (Note the rounded brackets instead of curly ones for Span element identifiers.) You can use internal links to cross-refer to custom label items that have a identifier. If your link has no text, the label with its formatting will be printed out; otherwise whichever text you give for the link. For instance, given the custom labelled list above, the following:\nThe claim [](#A1ref) together with [the next claim](#A2ref) \nentail ([](#Cref)).\n\nwill output:\n\n\nThe claim A1 together with the next claim entail (C).\n\n\nwhere the links point to the corresponding items in the list.\n\n\n13.4.5 Custom labelled lists within a numbered example list\nRequires: labelled-lists.lua, statement.lua.\nIn some cases we wanted to put a custom labelled list within a numbered example list. This is particularly difficult when we don’t want any content in the numbered example item other than the embedded list itself.\nSolution: place the embedded list within a statement. Note that the embedded content must be indented exactly twice (4 spaces). This works:\n(@example-Batu) \n\n    ::: statement\n\n    * []{delimiter=none} Every head of a horse is a head \n     of an animal.\n    * [&there4;]{} Batu is a head of an animal.\n  \n    ::::\n\nYou should reduce the right margin for the LaTeX output. (LaTeX experts: the statement is placed in a minipage whose with is that of the text minus the default list label width; this is typically too large for an embedded list.)\n(@Allskunksaremammals) \n\n    ::: statement\n\n    * []{} All skunks are mammals. `\\addtolength{\\rightskip}{1em} % fix needed`{=latex}\n\n    * [&there4;]{} All who fear all who respect all skunks fear all who respect all mammals.\n    :::"
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#sec-arguments",
    "href": "chapters/copyediting/192-cop-block-lists.html#sec-arguments",
    "title": "13  Lists",
    "section": "13.5 Arguments",
    "text": "13.5 Arguments\nRequires: the labelled-lists.lua filter.\nWe format arguments as custom labelled lists. To indicate the the conclusion, the last label is &there4;, i.e. the symbol ∴.\n* [1]{} No man is wise.\n* [2]{} Socrates is a man.\n* [C]{} Socrates is not wise.\n\nHere 1, 2, C are custom labels. We can also write an argument without labels, but we should then add the option deliminter=none to the first item in order to avoid empty parentheses:\n* []{delimiter=none} No man is wise.\n* []{} Socrates is a man.\n* [there4;]{} Socrates is not wise.\n\n&there4 is the standard ‘therefore’ sign (three dots).\nThe delimiter=none option can be set in the document metadata. It will then apply to all custom labelled lists in the document unless specified otherwise in the lists themselves. See custom labelled lists.\nAs explained in custom labelled lists, crossreference links to premises can be done by giving them identifiers and using the citation syntax:\n* [1]{#prem1} No man is wise.\n* [2]{#prem2} Socrates is a man.\n* [C]{#conc} Socrates is not wise.\n\nPremises @prem1 and @prem2 entail @conc.\n\nRequires: the statement.lua filter.\nArguments can be placed within statements, especially if they have a name.\n::: statement\n__The ontological argument__\n\n* []{delimiter=none}\n* []{}\n:::\n\nTo place an argument within a numbered example list, see custom-labelled lists within numbered example lists."
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#basic-table-syntax",
    "href": "chapters/copyediting/193-cop-block-tables.html#basic-table-syntax",
    "title": "14  Tables",
    "section": "14.1 Basic table syntax",
    "text": "14.1 Basic table syntax\nThere are three formats to encode tables in pandoc’s markdown (‘simple’, ‘grid’ and ‘pipe’). Some are easier to type, some easier to read, some give more functionality (i.e. having several lines in a cell).\nThe easiest way to create a table is to use RStudio’s visual editor. The editor allows you to create multiline cells, resize the columns a bit and so on. Alternatively, you can write tables in the markdown code. An online markdown table generator can help.\nFor tables with large cells (a lot of text in the cell), you might need to expand the “wrap line size” for the RStudio editor. The visual editor ensures that your markdown files has lines of a certain length. These don’t matter to the final PDF / html output, but they make your markdown source more readable. Now when you have a large table, you might need a bit more horizontal space in the markdown. For that you increase the wrap line size for the editor. In your file metadata block:\neditor_options:\n  markdown:\n    wrap: 72\n\nReplace 72 with e.g. 80 or more if needed. You’ll see the difference if you go to the visual editor and expand your table’s columns a bit.\nIn the markdown, words in tables should not be cut. If your markdown table is like this:\n+-----+-------+\n|know |valua- |\n|ledge|tion   |\n+=====+=======+\n|...  |...    |\n+-----+-------+\n\nThen “knowledge” and “valuation” will print as “know ledge” and “valua- tion” respectively. You need to ensure that no word is cut by enlarging your table:\n+----------+-----------+\n|knowledge | valuation |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n\nTables found in your document will be turned into that format if their cells require multiple lines. Otherwise they will be turned into the simpler format:\nCorner    Header 1    Header 2    Header 3\n-------- ----------- ----------- -------------\nRow 1     Hello       My          Friend\nRow 2     1asdoi      23          234\n\nYou can create tables from scratch (a) in the RStudio visual editor or (b) in markdown code. For the latter you can use a online markdown table generator."
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#cells-that-span-several-rows-or-several-columns",
    "href": "chapters/copyediting/193-cop-block-tables.html#cells-that-span-several-rows-or-several-columns",
    "title": "14  Tables",
    "section": "14.2 Cells that span several rows or several columns",
    "text": "14.2 Cells that span several rows or several columns\nUnfortunately this is not feasible in pandoc’s markdown, though that should change in the near future.1\nSolution. Enter your table with all cells, and put the content of any merged area in the top left cell of the merged area. For example, the table below:\n\n\nExample missing, to be entered in raw HTML\n\n| Cells merged across a row | Head 1                       | Head 2 |\n|:--------------------------|:-----------------------------|:-------|\n|                           | more                         | less   |\n| Row head                  | Cells merged across a column |        |\n\nShould be entered as if it was the table below:\n\n\nExample flawed, to be fixed\n\n| Cells merged across a row | Head 1                       | Head 2 |\n|:--------------------------|:-----------------------------|:-------|\n|                           | more                         | less   |\n| Row head                  | Cells merged across a column |        |\n\nA note should be made of the change. Next to the table code you should enter the following:\n&lt;!-- cells to merge: C1R1 and C1R2; C2R3 and C3R3 --\\&gt;\n\nThis will be invisible in the output, but visible to those who edit the file. ‘C2R3’ abbreviates ’second column from the left, third row the top.\nWe will then have to insert LaTeX and HTML output code directly. See [if-markdown-cant-handle-a-table] below."
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#if-markdown-cant-handle-a-table",
    "href": "chapters/copyediting/193-cop-block-tables.html#if-markdown-cant-handle-a-table",
    "title": "14  Tables",
    "section": "14.3 If markdown can’t handle a table",
    "text": "14.3 If markdown can’t handle a table\nRequires: the not-in-format filter. The instructions using Divs with not-in-format class below require the not-in-format filter.\nIn case the usual markdown code for a table doesn’t work, we can insert a set of LaTeX code to the markdown file. The goal is then to have a set of latex code that can be inserted into the articles markdown file and then be run the usual way. For that, there are three steps needed:\n\nget the latex code for the desired table\nmake the table look as desired\nget the code into the markdown file.\n\n\nGenerate a separate markdown file (in the following called “separate .md”, whereas the initial markdown file of the article is called “articles .md”). Here we want to put only the latex code that will be inserted into the articles .md.\n\nFor the first step (get the latex code for the desired table), there are two options:\n\n\nBuild the latex code from scratch or via the table generator for latex, put the code to the separate .md.\nBuild the markdown code from scratch or via the table generator for markdown, put it to the separate .md, let it produce a latex output, copy/paste the latex code to the separate .md (it probably begins with something like “\n” or “\\end{table}”).\n\n\nOnce you have the latex code in the separate .md, you can embed it in the following code:\n\n\n\n```{=latex}\n\\begin{center}\n\n[latex code for tables]\n\n\\end{center}\n```\n\n\nThe \\begin{center} and \\end{center} lines are optional, their effet is to center your table in the page.\nThe LaTeX code will only produce a result in LaTeX/PDF output. If the markdown code works with HTML output, you should leave it and embed it in a ::: {.not-in-format .latex} ... ::: Div, which ensures that the markdown table code is used only in formats other than LaTeX.\n\n\n\n```{=latex}\n\\begin{center}\n\n[latex code for your table]\n\n\\end{center}\n```\n\n\n\n::: {.not-in-format .latex}\n\n[markdown code for your table]\n\n:::\n\nCheck how the tables look by producing pdfs from the separate .md (much faster than always producing the whole article).\n\nFrom here, you might have or want to change several things:\n\n\n“longtable” -&gt; “tabular” (so that it doesn’t rely on longtable package, which doesn’t work within multicolumn environments).\n“”, “” and “” -&gt; “” for simple horizontal lines\nIf a vertical line is desired at some point in the table change latex code \\begin{tabular}[]{@{}lcccc@{}} to \\begin{tabular}[]{@{}c|cccc@{}}. See that the number of letters determines the number of columns in the table. The letter “l” in the former code is to change into a “c” in the latter. To have a vertical line after the first column from the left, insert the sign (not letter!) “|” after the first c from the left.\n\n\nOnce that frame is set, we can insert the code from the separate .md into the articles .md and see how it produces the tables from here.\n\n\nYou may need to do the same to insert HTML code. In that case you should still leave the original markdown for other formats (JATS-XML), using not-in-format again:\n  ```{=latex}\n  [latex code for your table]\n  ```\n  ```{=html}\n  [html code for your table]\n  ```\n  ::: {.not-in-format .latex .html}\n  [markdown code for your table]\n  :::"
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#table-captions",
    "href": "chapters/copyediting/193-cop-block-tables.html#table-captions",
    "title": "14  Tables",
    "section": "14.4 Table captions",
    "text": "14.4 Table captions\nRequires: pandoc-crossref.\nIf your table is in markdown only, add a caption thus:\n+----------+-----------+\n|knowledge | valuation |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n: An analysis of knowledge and valuation {#tbl:K-and-V}\n\nThe optional {#tbl:...} provides an identifier for crossreferences:\nAs you can see in @tbl:K-and-V, the analysis...\n\nFor further details on how to cite see the pandoc-crossref manual.\nIf your table is in raw LaTeX and markdown, the solution is this:\n::: {.not-in-format .latex }\n+----------+-----------+\n|knowledge | valuation |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n: An analysis of knowledge and valuation {#tbl:K-and-V}\n:::\n\n::: {only-in-format .latex}\n\n(latex code)\n\n:::\n\nOr you use the Imagify to convert the table into an image in non-PDF outputs."
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#latex-tables-tips",
    "href": "chapters/copyediting/193-cop-block-tables.html#latex-tables-tips",
    "title": "14  Tables",
    "section": "14.5 LaTeX tables tips",
    "text": "14.5 LaTeX tables tips\nStart with the Pandoc-generated table code: write your table in markdown, generate the LaTeX output and extract the LaTeX code for the table.\nTest your table in a simple LaTeX document. Pandoc uses longtable, booktabs, array, multicol, calc:\n\\documentclass{article}\n\\usepackage{longtable,booktabs,array}\n\\usepackage{multicol}\n\\usepackage{calc}\n\\begin{document}\n\n[TABLE CODE HERE]\n\n\\end{document}\n\n(Dialectica-specific: add the font, \\usepackage{stix2}, and preferably compile using LuaLaTeX.)\nReduce the space between column. Add:\n{\\setlength{\\tabcolsep}{2pt}\n\n[TABLE CODE HERE]\n\n}\n\nImportant: don’t forget to wrap this between { and }, otherwise it will affect subsequent tables—in the whole journal issue.\nMake the table font smaller. Add:\n{\\small\n\n[TABLE CODE HERE]\n\n}\n\nDon’t forget the {, } or subsequent text is small.\nAdd a space between rows. Use \\addlinespace:\n cell content & cell content & cell content \\\\\n \\addlinespace\n cell content & cell content & cell content \\\\\n\nAdd/remove a line between rows. Add/remove midrule():\n cell content & cell content & cell content \\\\\n \\midrule()\n cell content & cell content & cell content \\\\\n\nVertically center rows. Use m rather than p for the first column (details here). This table has three p type columns and aligns cell contents on top:\n\\begin{longtable}[]{@{}\n  &gt;{\\raggedright\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.5}}@{}}\n\\toprule\\noalign{}\n[TABLE ROWS]\n\\end{longtable}\n\nThis one centers cell content vertically:\n\\begin{longtable}[]{@{}\n  &gt;{\\raggedright\\arraybackslash}m{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.5}}@{}}\n\\toprule\\noalign{}\n[TABLE ROWS]\n\\end{longtable}"
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#footnotes",
    "href": "chapters/copyediting/193-cop-block-tables.html#footnotes",
    "title": "14  Tables",
    "section": "",
    "text": "It is now implemented in pandoc’s inner data representation, but pandoc can’t yet read that from your markdown file.↩︎"
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#inserting-figures-as-files",
    "href": "chapters/copyediting/194-cop-block-figures.html#inserting-figures-as-files",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.1 Inserting figures as files",
    "text": "15.1 Inserting figures as files\nBasic syntax:\n![caption](file.svg 'title of the image'){... attributes ..}\n\nWhere:\n\nfile.svg is the source file\ncaption is the text that will appear as the image’s caption if the image is treated as a floated.\n\nAs can be seen in the image below:\n![]\n\", followed by the image, followed\n  by \"a triangle can be split into two right triangles"
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#prefer-vector-formats-for-figures",
    "href": "chapters/copyediting/194-cop-block-figures.html#prefer-vector-formats-for-figures",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.2 Prefer vector formats for figures",
    "text": "15.2 Prefer vector formats for figures\nDiagrams, figures and the like should be provided in vector graphics formats (SVG files or code or TikZ code in LaTeX). Only photos, hand-drawn illustrations and the like should be provided as bitmap (a.k.a. raster) files. If you’re not familiar with the difference, see the explanation below.\nIf an author provides a diagram in bitmap form we ask that they recreated it in a vector format. Inkscape is an open-source, free software to generate vector images that is fairly easy to use and powerful. Authors who write in LaTeX may try to create in using the TikZ package instead."
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#background-on-vector-vs-bitmap-formats",
    "href": "chapters/copyediting/194-cop-block-figures.html#background-on-vector-vs-bitmap-formats",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.3 Background on vector vs bitmap formats",
    "text": "15.3 Background on vector vs bitmap formats\n(Skip this section if you are familiar with the distinction).\nWhat’s the difference between vector and bitmap image files? Bitmap (a.k.a. raster) images are encoded as a grid of pixels. Vector images are encoded as mathematical descriptions of lines and curves. For instance, a vector image may be (the computer-language equivalent of) “draw a circle of radius 10mm around the coordi nate (0,0).” The bitmap equivalent would be a big grid with cells coloured to form a circle. Because of this, vector images scale perfectly and magnify perfectly. Bitmap images can get noisy and pixelated when scaled or magnified. See below if you can tell which is which:\n \nAs you can see, the vector (first one) looks smooth when magnified, the bitmap looks pixelated.\nWhy use vector images for diagrams? They’re much better quality and use much less space. A bitmap diagram easily looks pixelated in print or on a high-resolution screen; it’ll look unprofessional to the reader. Bitmaps in high resolution can look good even in print or when enlarged on a screen, but at the cost of using a lot of space: a 1920*1080 high resolution bitmap easily takes about 1000 times the space of vector version of the same diagram; an article with bitmap images can easily occupy the same space as 10 to 100 articles without. It’s only in the case of highly textured images (e.g. photos) that a vector version would be either impossible or much heavier than a bitmap.\nWhich file types are vector, which are bitmap?\n\nJPEG, JPG, PNG, TIFF: bitmap images.\nPDF: can be bitmap, vector, and even images combining the two. The only way to tell is to zoom in a lot and see whether the lines remain perfect (vector) or pixelate (bitmap). File size is also an indicator: vectors are hardly more than a few Kbs, bitmaps can be anything from a few Kbs to one Mb or so.\nSVG: vector. Exception: an SVG file can import bitmaps from other files, including by URL. So in principle an author could send you a SVG ‘conversion’ that is nothing else than a link to an online version of their image. You’re very unlikely to encounter that problem, but if in doubt: the SVG file is a text file, you can open it in a text editor. Look for the tag &lt;image , e.g. &lt;image href=\"mybitmap.pgn\" width=\"200px\"/&gt;.\n\n\nHow to convert a bitmap image to a vector image? It can’t really be done. The problem is that the computer has to guess from the pixel grid of a bitmap image what’s supposed to be a line, a curve, etc. and that requires some intelligence (think of it like this: we’re going from a limited resolution to infinite precision). This is called vectorizing the bitmap image. Software like Inkscape can try and vectorize images for you, but you have to fiddle with the settings for each specific image, and the results are rarely satisfactory. In most cases, your or the author will have a much easier time recreating the image in vector mode. If you want to try to vectorize anyway, search “vectorize an image in Inkscape” or “convert an image to SVG” online to find some tutorials."
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#how-to-create-a-vector-image",
    "href": "chapters/copyediting/194-cop-block-figures.html#how-to-create-a-vector-image",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.4 How to create a vector image?",
    "text": "15.4 How to create a vector image?\nHow to create a vector image? Draw it in an editor, or code it in TikZ.\n\nDrawing in a vector graphics editor. Wikipedia has a [list of visual graphics editor]. Fully-featured editors will cover all needs but may require more work. Inkscape is the best open-source one; Adobe Illustrator a good propertary one. However for simple diagrams you may be able to get by with a quick-and-dirty online editor. There are quite a few of those; try online svg editor in a search engine (check whether you need to pay to save your file). At the moment\nDrawSVG seems good (easy to use, free and no registration, ads).\n\n\nTikZ diagrams. TikZ is a language to describe vector images that can be embedded in LaTeX. It’s powerful but has a very steep learning curve. If authors can provide them, TikZ diagrams are the best - because any text in those diagrams will be printed out in the journal’s own fonts. TikZ code can be included directly in the markdown. Our template will include them directly in the LaTeX/PDF output and convert them to SVG files for other output formats.\nHow to create a TikZ diagram? Typically the author needs to go through the (large) TikZ documentation and work from existing examples. But there is also an online visual editor (TikZit) that can help."
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#how-to-modify-a-bitmap-image",
    "href": "chapters/copyediting/194-cop-block-figures.html#how-to-modify-a-bitmap-image",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.5 How to modify a bitmap image",
    "text": "15.5 How to modify a bitmap image\nWikipedia has a list of bitmap image editors. GIMP is the best open-source editor. Adobe Photoshop and Photoshop Elements is a good commercial one, photography-oriented."
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#figures-with-letters-or-text",
    "href": "chapters/copyediting/194-cop-block-figures.html#figures-with-letters-or-text",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.6 Figures with letters or text",
    "text": "15.6 Figures with letters or text\nFigures often include letters or text. They look best if their fonts are consistent throughout your journal. It is desirable, but not mandatory, your house template fonts. If these can be freely distributed you could ask authors to install them and use them, but that’s a tall order. It’ll typically fall on you to apply house fonts if possible.\n\nFigures in TikZ code: automatic. TikZ specifies the text, not the fonts, so your house template will render the figures with your house fonts.\nFigures in SVG. Use a good editor like Inkscape with the house fonts installed on your computer. Open the file, select text elements, change their font. It should be quick. Exception: in some rare cases, the original files may have encoded the characters as complicated lines rather than characters proper; if so the editor won’t recognize them as text and change their font. If so your only option would be to remove the original text and recreate it: it is probably more time-costly than it’s worth.\nFigures in bitmap format: can’t realistically be done. Editing in a bitmap editor is possible but probably more time-costly than it’s worth. If you’re settling for a bitmap you’re already tolerating low quality anyway."
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#resizing-svg-files",
    "href": "chapters/copyediting/194-cop-block-figures.html#resizing-svg-files",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.7 Resizing SVG files",
    "text": "15.7 Resizing SVG files\nIf the author provides you with a SVG file that has too much whitespace around, resize it using Inkscape.\n\nopen the file in Inkscape\nselect all the content with the arrow tool (click on the top left, drag your mouse to form a rectangle around it). Note: you could try Edit &gt; Select all (Ctrl+A on Win, Cmd+A on MacOS) but this sometimes take the entire page, even if it has a lot of whitespace.\nGo to File &gt; Document Properties. In the “Custom Size” area, expand the “Resize page to content…” line.\nMake sure “Units” is “px” (pixels). Enter 20 (20.00000) margins everywhere. If you activate the lock icon, you only need to enter 20 in one of the margins and the others will be the same.\nClick “Resize page to drawing or selection”. You should see that the page limits are just around the drawing.\nClose the “Document properties” box and save the document."
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#including-svg-image-files-in-markdown",
    "href": "chapters/copyediting/194-cop-block-figures.html#including-svg-image-files-in-markdown",
    "title": "15  Figures (images, diagrams, graphs)",
    "section": "15.8 Including SVG image files in markdown",
    "text": "15.8 Including SVG image files in markdown\nIf you insert an SVG image file in markdown and generate a PDF output, Pandoc needs to convert it to a format that LaTeX understands. It does so using an external programme, rsvg-convert. If rsvg-convert is not present, you will get a warning: [WARNING] Could not convert image...: check that rsvg-convert is in path.\nSolutions\n\nConvert the SVG files to PDF using Inkscape. They will still be vector file and print out well, but the LaTeX engine that generates your PDF output will be able to insert them. Open the file(s) in Inkscape, go to File &gt; Save a copy, select the “Portable Document Format (pdf)” format, save. In your markdown code replace ImageFile.svg with ImageFile.pdf.\nInstall rsvg-convert. As far as we can tell the least difficult way to do this is to use package managers. On Linux look for rsvg-convert in your package manager. On MacOS you should install homebrew first, if you haven’t already, and run the command brew install rsvg-convert. On Win you should install the chocolatey package manager, open an administrator Powershell (Windows menu &gt; Windows Powersheel &gt; right click on Powershell and select “Run as Administrator”, give the permission) and run the command choco install rsvg-convert.\n\n\nNote: on Windows Pandoc 2.14.0.3 (June 2021 version) cannot handle SVG conversion, even if rsvg-convert is installed. If that’s your setup use the first solution."
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statements-basics",
    "href": "chapters/copyediting/195-cop-block-statements.html#statements-basics",
    "title": "16  Statements and indented blocks",
    "section": "16.1 Statements basics",
    "text": "16.1 Statements basics\nA statement is encoded as a Div with the special class statement:\n...main flow of text...\n\n::: { .statement }\n\nThe sum of angles of a triangle equals two right angles.\n\n:::\n\n...subsequent flow of text...\n\nAs explained in Section 11.5, there are a couple of equivalent variations for this code.\nFirst, provided that the Div has no other attribute than a single class, you can omit dot and curly braces:\n::: statement \n\nThe sum of angles of a triangle equals two right angles.\n\n:::\n\nSecond, you can make the opening and closing ‘fences’ as wide as you want, if you find that this makes your source code more readible. This doesn’t affect the output:\n::: { .statement } ::::::::::::::::::::::::::::::::::::::::::\n\nThe sum of angles of a triangle equals two right angles.\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\n\n::: statement :::::::::::::::::::::::::::::::::::::::::::::::\n\nThe sum of angles of a triangle equals two right angles.\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#no-statements-in-footnotes",
    "href": "chapters/copyediting/195-cop-block-statements.html#no-statements-in-footnotes",
    "title": "16  Statements and indented blocks",
    "section": "16.2 No statements in footnotes",
    "text": "16.2 No statements in footnotes\nStatements don’t work in footnotes—that’s a limitation of the LaTeX package we use for them, amsthm.\nTo get an indented block in footnote use a custom-labelled list with an empty label. See Section 13.4."
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-titles",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-titles",
    "title": "16  Statements and indented blocks",
    "section": "16.3 Statement titles",
    "text": "16.3 Statement titles\nA statement can have a title (aka custom label). This is specified in Strong emphasis (**...** or __...__), at the beginning of the statement:\n::: statement\n**The Principal Principle**. One's credence in $p$ conditional\non the hypothesis that the chance of $p$ is $x$ should be $x$.\n:::\n\nThis will be rendered as an indented block with its title in the template’s preferred formatting of statement titles, for instance:\n\n\nThe Principal Principle. One’s credence in \\(p\\) conditional on the hypothesis that the chance of \\(p\\) is \\(x\\) should be \\(x\\).\n\n\nIf you don’t specify an ID or acronym for the statement, its title is used to generate an ID automatically. The automatic ID is a lower case version, with all spaces and symbols replaced by _: the-principal-principle. If this ID already exists in your document (for instance, if it’s also the title of a section that Pandoc uses to automatically generate an ID for that section), the ID will be ...-1, or ...-2, as needed.\nA statement can only have one ID so if the statement has an acronym or custom ID (see below) they’re replace this one."
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-acronyms",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-acronyms",
    "title": "16  Statements and indented blocks",
    "section": "16.4 Statement acronyms",
    "text": "16.4 Statement acronyms\nIf a statement has a title, you can also give it an acronym. It’s placed at the beginning of the title, within parentheses:\n::: statement\n**(PP) The Principal Principle**. One's credence in $p$ conditional\non the hypothesis that the chance of $p$ is $x$ should be $x$.\n:::\n\nThe result will depend on where the template prefers to place the acronym. For instance:\n\n\nThe Principal Principle (PP). One’s credence in \\(p\\) conditional on the hypothesis that the chance of \\(p\\) is \\(x\\) should be \\(x\\).\n\n\nBeware that the acronym must be within the title, i.e. within the strong emphasis delimiters:\n\nGOOD: __(PP) The Principal Principle__\nBAD: (PP) __The Principal Principle__\n\n\nIf you don’t specify an ID for a statement with an acronym, the acronym will be used to automatically generated an ID, e.g. PP. (When the ID PP already exists in your document, it’ll be PP-1 instead, or PP-2, etc.)."
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-info",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-info",
    "title": "16  Statements and indented blocks",
    "section": "16.5 Statement info",
    "text": "16.5 Statement info\nA statement can have some info, e.g. a source citation or some text within parentheses This is put at the end of, or right after, the statement’s title.\n::: statement\n**(Acro) Title of the satement (some info).** Content of the statement\n:::\n\n::: statement\n**(Acro) Title of the satement @Doe2020.** Content of the statement\n:::\n\n::: statement\n**(Acro) Title of the satement.** (some info) Content of the statement\n:::\n\n::: statement\n**(Acro) Title of the satement.**  @Doe2020 Content of the statement\n:::\n\nIf there’s no title, the info is just at the beginning.\n::: statement\n(some info) Content of the statement\n:::\n\n::: statement\n@Doe2020 [@Doe2021; @Doe2022] Content of the statement\n:::\n\nThe output depends on the template. (The template may even define different styles for different kinds of statement.) It may look like this, for instance:\n\n\nThe Principal Principle (PP). (Lewis (1990)) One’s credence in \\(p\\) conditional on the hypothesis that the chance of \\(p\\) is \\(x\\) should be \\(x\\)."
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-custom-ids",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-custom-ids",
    "title": "16  Statements and indented blocks",
    "section": "16.6 Statement custom IDs",
    "text": "16.6 Statement custom IDs\nYou can cross-reference statements that have an ID If the statement has an acronym or title, you can use the ID automatically generated based on those. Otherwise you can give it an ID by putting a #myidentifier entry in its attributes:\n::: {.statement #my-favourite-statement}\n__Title of the statement__. Content of the statement\n:::\n\nIt’s good practice to start your ID by sta: to make clear that it’s a statement ID:\n::: {.statement #sta:psr}\n__(PSR) Principle of Sufficient Reason__. Content of the statement\n:::\n\nBeware of adding curly brackets and a dot before statement:\nGOOD\n::: {.statement #my-favourite-statement}\n...\n:::\n\nBAD\n::: statement #my-fav-statement\n...\n:::\n\n::: {statement #my-fav-statement}\n...\n:::\n\nA statement can only have one ID so if you provide one you can’t refer to it by its acronym or title."
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-within-a-numbered-example-list",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-within-a-numbered-example-list",
    "title": "16  Statements and indented blocks",
    "section": "16.7 Statement within a numbered example list",
    "text": "16.7 Statement within a numbered example list\nSee custom-labelled lists within numbered example lists."
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#crossreferencing-statements",
    "href": "chapters/copyediting/195-cop-block-statements.html#crossreferencing-statements",
    "title": "16  Statements and indented blocks",
    "section": "16.8 Crossreferencing statements",
    "text": "16.8 Crossreferencing statements\nStatements with ID (either automatically generated from their title or acronym, if any, or custom IDs that you provide) can be crossreferenced. You can use the citation syntax or the link syntax.\n\n16.8.1 Citation syntax\n\n@mystatement will produce a link with the statement acronym if it has one: PP, otherwise a link its title if has one: The Principal Principle or nothing.\n[@mystatement] will produce the same as above, surrounding by bracket. Beware that if your statement has no title or acronym (and it’s not a numbered statement e.g. theorem) you’ll only get two parentheses: ().\nCitations of multiple statements produce a ;-separated list. [@sta:psr, @sta:pp] can produce ‘(Principle of Sufficient Reason; Principal Principle)’ for instance.\ncitation prefixes and suffixes are allowed: [See @sta:pp above].\n\n\n\n16.8.2 Link syntax\n\n[](#mystatement) will produce the same as @mystatement.\n`arbitrary text will produce “[arbitrary text]” with a link to the statement.\n\n\nWithin the link text, &lt;&gt; will be replaced the statement’s automatic label, i.e. its acronym (it is has one) or title.\nSee the [principle &lt;&gt;]{#sta:pp} above.\n\nThis will produce: ‘See the principle PP’ if the statement @sta:pp has acronym PP.\nThe link syntax can’t be used to refer multiple statements. But it gives you more control over how the link is formatted. Compare:\n* According to principle @sta:pp, ...\n* According to [principle &lt;&gt;]{#sta:pp}, ...\n\nThe former generates a small link: ‘according to principle PP’, the latter a longer one: ‘according to principle PP’."
  },
  {
    "objectID": "chapters/copyediting/196-cop-block-columns.html",
    "href": "chapters/copyediting/196-cop-block-columns.html",
    "title": "17  Multiple columns",
    "section": "",
    "text": "Requires: the columns filter.\nThis is about setting parts of text in multiple columns, not about typesetting an entire document in two columns.\nIt is sometimes useful to typset a part of text into multiple columns, e.g. to display some claims or formulas side by side. Note that this is not the same as using a table. Here we just divide part of the text into two or more columns, and the text may be allowed to flow from one to the other. The syntax is this:\n::: columns\n:::: column\nThis goes in the first column\n::::\n\n:::: column\nThis goes in the second column\n::::\n\n:::: column\nThis goes in a third column\n::::\n:::\n\nIn LaTeX, columns are justified vertically by default. That is, if columns are explicitly broken at certain points, LaTeX ensures that the text in each column occupies its full height by stretching inter-paragraph space. This means that some paragraph may end up being “bumped” at the end of a column. To avoid this, set the .ragged class on your columns Div like so:\n::: {.columns .ragged}\n\n...\n\n:::\n\nNote that this doesn’t work on individual column Divs, only on the columns Div that contains them.\nAbove I use three colons to open and close the “columns” part, and four colons to open and close each “column”. Any number above two works, provided they are distinct from each other.\n\n\n\n\n\n\n\nGood\nBad\n\n\n\n\nColumns opens and closes with 3 colons, each column opens and closes with 5:\n::: {.columns}\n::::: {.column}\nOn the left\n:::::\n\n::::: {.column}\nOn the right\n:::::\n:::\nEverything opens and closes with 4 colons:\n:::: {.columns}\n:::: {.column}\nOn the left\n::::\n\n:::: {.column}\nOn the right\n::::\n::::\n\n\nFirst column opens and closes with 5 colons, second with 7:\n::: {.columns}\n::::: {.column}\nOn the left\n:::::\n\n::::::: {.column}\nOn the right\n:::::::\n:::\n```\nFirst column opens with 5 but closes with 7, second column opens with 7 but closes with 5:\n::: {.columns}\n::::: {.column}\nOn the left\n::::::::\n\n::::::: {.column}\nOn the right\n:::::\n:::\n\n\nThe {. … } is optional if you have one word only, but mandatory if you have several\n::: {.columns}\n::: {.column}\nOn the left\n:::\n\n::: {.column}\nOn the right\n:::\n:::\n\n::: {.columns \\#my-columns}\n::: {.column}\nOn the left\n:::\n::: {.column}\nOn the right\n:::\n:::\n::: columns \\#my-columns\n\n::::: column width=\"40%\"\n\nOn the left\n\n:::::\n\n::::::: column label=\"red\"\n\nOn the right\n\n:::::::\n\n:::\n\n\n\nAt present you cannot set the relative width of columns.\nSee columns filter manual for further details."
  },
  {
    "objectID": "chapters/copyediting/199-cop-block-other.html#raw-code-if-all-else-fails",
    "href": "chapters/copyediting/199-cop-block-other.html#raw-code-if-all-else-fails",
    "title": "18  Troublesome blocks",
    "section": "18.1 Raw code if all else fails",
    "text": "18.1 Raw code if all else fails\n\n18.1.1 Adding Raw LaTeX commands within markdown\nLaTeX/PDF typesetting may require fine-grained adjustements that we can ignore in HTML output. It is often possible to provide it alongside markdown. Caution: use sparingly. Don’t tinker with e.g. line or list spacing on a per-article basis.\nExample: you have a markdown table that you’re happy with, but it’s too wide to fit in a PDF page. You can make its text smaller in PDF output with:\n`{\\small`{=latex}\n\n+-----+-------+\n|know |valua- |\n|ledge|tion   |\n+=====+=======+\n|...  |...    |\n+-----+-------+\n\n`}`{=latex}\n\nUsing `...`{=latex} creates an (inline) element of raw code that is passed as is to latex and erased in other formats. {\\small .... } in LaTeX creates a group ({...}) within which the text is small.\n\n\n18.1.2 Providing a Raw LaTeX alternative\nRequirement. The not-in-format filter is required for some of the below.\nWhen there is no markdown solution to typeset something there is fallback solution: include raw output code of other formats directly in your markdown document. We first figure out how the element should be coded in relevant output formats (LaTeX, html, xml); we call this raw code. Then we insert raw code without our markdown document.\nIn some cases you’re happy with the output markdown generates in some, but not all, formats. For instance, the XML output is fine (XML has no typesetting), but you’d like to do some fine-grained typesetting in LaTeX that the normal LaTeX output doesn’t handle. In that case you’ll use markdown for some output formats, but provide raw code only for LaTeX.\nTo provide Raw code for all output formats, you insert it as follows:\n\n\n``` {=latex}\n... LaTeX code here ...\n```\n\n``` {=html}\n... html/epub code here ...\n```\n\n``` {=xml}\n... xml code here ...\n```\n\n\nThe part marked with {=latex} will be included as is in the LaTeX output (for PDFs) and only in the LaTeX output.\nTo provide raw code for some, but not all, formats, you should put the relevant bits of markdown within a not-in-format div, and the raw code after it. (This method requires the not-in-format Pandoc filter.) For instance:\n::: {.not-in-format .latex}\n-------- -------\nsimple    table\n-------- -------\n:::\n\n\n\n```{=latex}\n\\begin{table}\n\\begin{tabular}{ll}\n\\hline\nsimple & table\n\\hline\n\\end{tabular}\n\\end{table}\n```\n\n\n\nHere the simple markdown table enclosed within :::{.not-in-format .latex} … ::: will be used for all outputs formats except LaTeX and LaTeX-based outputs like PDF and beamer. The raw code below included within ```{=latex} … ``` will be used for LaTeX and LaTeX-based outputs.\nYou can leave out some markdown section from several formats too: :::{.not-in-format .xml .latex}."
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-sections",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-sections",
    "title": "19  Cross-referencing",
    "section": "19.1 Cross-referencing sections",
    "text": "19.1 Cross-referencing sections\nTo cross-reference a section you first need to know its identifier. pandoc accepts manually specified identifiers but also automatically generates identifiers. A manually specified identifiers is given by adding {#sec:mysecid} after the heading. An automatically generated identifier is obtained by putting the section heading in lowercase, removing all formatting, links, footnotes, removing all characters other than letters, numbers, underscore, periods and hyphens, and replacing spaces by hyphens. Some examples:\n\n\n\n\n\n\n\nMarkdown heading\nResulting section identifier(s)\n\n\n\n\n# The Last Stand\nthe-last-stand\n\n\n## Cause *célèbre*^[Sic.]\ncause-célèbre\n\n\n## The no.1 'Foolish' Claim that $E=mc^2$\nthe-no.1-foolish-claim-that-emc2\n\n\n# The First Word {#sec:first}\nfirst\n\n\n\nSpecial cases. If a heading starts with something else than a letter, everything before that letter is removed (to ensure that all identifiers start with a letter). If a heading is empty, its identifier is section. If there are several headings of the same name (say, section), the second one is suffixed with -1 (section-1) then -2, etc.\n\n\n\n\n\n\n\nMarkdown headings\nResulting section identifier(s)\n\n\n\n\n# 3 Little Pigs\nlittle-pigs\n\n\n# Surprise Party\n\n## Surprise Party\n\nsurprise-party\n\nsurprise-party-1\n\n\n#\n\n#\n\nsection\n\nsection-1\n\n\n\n\nWarning: of course, if you change a section heading title, the automatically generated identifier changes. So if your headings might change, either use manual identifiers or wait before entering cross-references.\nWhen editing in RStudio visual mode, you can use Insert &gt; Cross-reference to find heading identifiers. A menu with the list of headings is displayed; pick the one you want and the editor will insert the code @ref(the-first-word). Remove @ref(…), and enter @sec: right in front of the the-first-word. The code @sec:the-first-word should become blue as you type @ and the following letters; if not it’s not interpreted as a reference, try again or edit in code mode instead.\nNow to cross-reference sections with identifiers the-first-word, the-second-word, use the following code:\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nIn sec. 1, we review…\nIn @sec:the-first-word, we review\nor\nIn [@sec:the-first-word], we review\n\n\nSec. 1 discusses\n@Sec:title-of-section discusses\nor\n[@Sec:title-of-section] discusses\n\n\nIn secs. 1, 2 we\nIn [@sec:the-first-word; @sec:the-second-word]\n we review\n\n\n… elsewhere (sec. 1).\n...elsewhere (@sec:the-first-word).\nor\n...elsewhere ([@sec:the-first-word]).\n\n\n\nNote that @Sec:… instead of @sec:… capitalizes the label. Note that the quare-bracketed version doesn’t add parentheses (unlike in citations): the square brackets are only necessary if you have several references or a manually specified prefix (below).\nThe prefix (“sec.” here) is specified by the template. It can be suppressed or manually specified:\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nas said above (1).\nas said above [-@sec:the-first-word]\n\n\nIn unit 1, we…\nIn [unit @sec:the-first-word]\n\n\nIn § 1, we…\nIn [§ @sec:the-first-word]\n\n\nIn appendix 5, …\nIn [appendix @sec:appendix-proof-of-theorems], ...\n\n\nIn appendices 5, 6, …\nIn [appendices @sec:app1; appendices @sec:app2]\n\n\n\nAs the last line illustrates, you need to repeat the custom prefix to each entries that it applies to, even though in the output they will be grouped.\nStyle recommendations.\nCall subsections “sections” when referencing to them. If you’re referencing a subsection, you should still call it “section” in the readable text: ``cf. section [@sec:asubsectionid]. A subsection is a section, and the terminology of “subsection” is clunky and technical.\nAvoid specifying a manual prefix just to follow the author’s style. The default prefix is specified in the journal’s style template and should be preferred wherever possible. A manual prefix is only recommended for appendices (or any other section that is not a regular section of the paper).\n“In the last section”, “In the next section”, …. What if the author references sections verbally, e.g.: “In the last section, we will summarize…”, or “The next section reviews …”? Two options, decide what fits best:\n\nmake non-verbose: In @sec:the-last-one, we..., @Sec:the-next-one reviews ...\nadd cross-references in brackets: In the last section ([@sec:the-last-one]), In the next section ([@sec:the-next-one]), ....\n\n\nThe following does not work with PDF output, so we do not use it. It is also possible to specify a custom label to replace the number. This can be combined with a custom identifier:\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nSee appendix A…\n12. Appendix A: Proofs\nSee [appendix @sec:appendix-a-proofs]...\n# Appendix A: Proofs {label=\"A\"}\n\n\nSee appendix A…\n12. Appendix A: Proofs\nSee [appendix @sec:app1]...\n# Appendix A: Proofs {label=\"A\" #sec:app1}"
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#crossreferencing-and-captioning-tables-figures-images-equations",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#crossreferencing-and-captioning-tables-figures-images-equations",
    "title": "19  Cross-referencing",
    "section": "19.2 Crossreferencing and captioning tables, figures, images, equations",
    "text": "19.2 Crossreferencing and captioning tables, figures, images, equations\nRequires: the pandoc-crossref filter.\nTables, images can be cross-referenced and can be given a coption text. To cross-reference an image:\n![](imagefile.png) {#fig:my-image}\n\nAs you can see in @Fig:my-image ...\n\nTo add a caption to the image:\n![An image of a flying pig](imagefile.png) {#fig:my-image}\n\nAs you can see in @Fig:my-image ...\n\nExample with a table:\nAs the reader can see in @tbl:diffstyles, there are many\noptions:\n\n+----------+-----------+\n| style    | features |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n\n: The different styles of text {#tbl:diffstyles}\n\nThe identifiers of images or figures must have the form #fig:..., those of tables #tbl:..., those of equations #eq:....\nWhen crossreferencing them we use citation syntax with the prefixed identifiers: [@fig:my-image], @tbl:my-table, etc. This will print “figure 1”, “table 2”, etc. To get “Figure 1”, “Table 2” you capitalize the prefix: @Fig:..., @Tbl:....\nDetails are in the Pandoc-cross-ref documentation here."
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-footnotes",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-footnotes",
    "title": "19  Cross-referencing",
    "section": "19.3 Cross-referencing footnotes",
    "text": "19.3 Cross-referencing footnotes\nCross-reference to footnotes has to be done manually. If your footnote numbers are not final yet, you will need to revist them before publishing.\nWe do not reference the page numbers where the footnote appears. This is meaningless in HTML and ePub output.\nThe syntax is as follows:\nThis is the main text.[^myfn]\n\n[^mfn]: [On this]{#my-best-footnote} difficult point I would like to add irrelevant remarks... .\n\n...\nAs mentioned above in [footnote 7](#my-best-footnote), ...\n\n[^myfn] and [myfn]: create a footnote. We could have the alternative syntax, ^[... content ...] placed directly in the text:\nThis is the main text.^[[On this]{#my-best-footnote} difficult \npoint... .]\n[On this]{#my-best-footnote} creates a “Span” element with the identifier my-best-footnote. A Span is an invisible inline element that can carry attributes such as an identifier. The identifier allows us to target it with a link.\n[footnote 1](#my-best-footnote) adds to the text “footnote 7” a clickable link to the span we create above. You need to enter the footnote number manually.\n\n\nCommon mistake. Beware of not confusing the syntaxes for Span (targets) and Links:\n\nA Span uses curly brackets: [span]{#id}\nLinks use parentheses: [link](#id)\n\n\nSyntax and placement of the target.\n\nThe target Span can be empty: []{#my-footnote}\nIt should be placed within the first line of the footnote, to ensure referencing links take the reader to that line.\nBut **do not* place an empty Span right at the beginning of the foonote: in this position the Span leaves an unwanted blank space:\nBAD\n[^footnote]: []{#fn-point} On this difficult point \n\nGOOD\n[^footnote]: [On]{#fn-point} this difficult point \n\nGOOD\n[^footnote]: See @doe_j:2020.[]{#fn-doe}\n\n\nNon-final manuscripts. If footnote numbers are not final, you will need to update crossreferences to footnotes. A good practice is to use very visible text to ensure that you don’t miss them in proofing:\nSee above [footnote NUMBER](#fn-doe)."
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-list-items",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-list-items",
    "title": "19  Cross-referencing",
    "section": "19.4 Cross-referencing list items",
    "text": "19.4 Cross-referencing list items\nYou have a numbered list and you want to cross-reference one of its items:\n\n\nfirst item\nsection item\nthird item.\n\n\nMy favour item is (2), what’s yours?\n\n\nThe solution is as with footnotes: you have to put an invisible link target in the item and you have to create a link to it. The number is manually entered in the link, not automatic, so you have to make sure you know which number it is.\n1. first item\n2. []{#myidentifier} section item\n3. third item.\n \nMy favour item is ([2](#myidentifier)), what's yours?\n\nNote the difference between the target, where the identifier is in curly braces, and the link, where the identifier is in parentheses:\ntarget: []{#myidentifier}\nlink: [2](#myidentifier)"
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#internal-links",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#internal-links",
    "title": "19  Cross-referencing",
    "section": "19.5 Internal links",
    "text": "19.5 Internal links\nIf you want a part of the text to link to another, say have a statement labelled “C1” and later parts referring to it as “(C1)”, use internal link syntax. The general syntax is:\n[text to be linked to]{#unique-identifier}\n\n...\n\n[text that will become a link](#unique-identifier)\n\nCommon error: leaving spaces between text and {\\#identifier}:\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\n[text linked to] {#identifier}\n[linking text] (#identifier)\n[text linked to]{#identifier}\n[linking text](#identifier)\n\n\n\nExample:\n[Claim 1]{#my-claim}. Death is nothing to us.\n\n(... article goes on ...)\n\nAs [my earlier claim](#my-claim) established, ... .\n\nThis outputs, in both HTML and LaTeX :\n\n\nClaim 1. Death is nothing to us\n…\nAs my earlier claim established, …\n\n\nDon’t worry about whether the link is coloured and/or underlined: that is to be decided by the journal style.\nNote that [text that will be linked] to and [text that will become a link] are printed as is. If you wanted to change all labels to “Claim 2”, for instance, you need to change both the text linked to and the text that becomes a link.\nTargets (also known as “anchors”) and links to them typically need some formatting. For instance, we may want our claim label in bold and the link to it to be the label itself in parentheses:\n[**C1**]{#my-new-claim}. Death is nothing to us.\n\n...\n\nAs ([C1](#my-new-claim)) established, ... .\n\nThis outputs:\nC1. Death is nothing to us.\n…\nAs (C1) established, … .\na cleaner version for internal links may be achieved by putting the syntax\n[**C1**]{#my-new-claim}. Death is nothing to us.\n\n...\n\nAs [@my-new-claim] established, ... .\n\ninstead, which in turn outputs the same as above: C1. Death is nothing to us.\n…\nAs (my-new-claim?) established, … . but with a much cleaner syntax behind."
  },
  {
    "objectID": "chapters/copyediting/23-cop-citations.html#encoding-citations",
    "href": "chapters/copyediting/23-cop-citations.html#encoding-citations",
    "title": "20  Citations",
    "section": "20.1 Encoding citations",
    "text": "20.1 Encoding citations\nThere are three styles of citations:\n\nNormal: (Smith 2012) in author-date style, [7] in number style, footnote in citations-in-footnotes style.\nInline: Smith (2012) says that….\nYear-only: … that elephants are happier than humans (2012).\n\n\nHow normal citations are displayed is taken care of by the journal’s template. The illustrations below use the author-date style.\nTo code a citation of a given reference, you need to know the reference’s citation key. You can see the keys from the .bib file of your article. In RStudio, if you use the visual mode, use Insert &gt; citation and select the source “Bibliography”, and it will allow you to select entries from the .bib file.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nNormal\n\n\n\n(Smith, 2012)\n[@Smith2012]\n\n\n(Smith, 2012, 2015)\n[@Smith2012; @Smith2015]\n\n\n(Smith 2012; Jones 2015)\n[@Smith2012;@Jones2015]\n\n\n(Smith 2012, 205)\n[@Smith2012, 205]\n\n\n(Smith 2012, iv-vii)\nNote: when non-numerical page numbers specify p. in the code\n[@Smith2012, p. iv-viii]\n\n\n(see Smith 2012, 205)\n[see @Smith2012, 205]\n\n\n(Smith 2012, 205-210, 235)\n[@Smith2012, 205-210, 235]\n\n\n(Smith 2012, 28; Jones 2015, 2017)\n[@Smith2012, 28; @Jones2015; @Jones2017]\n\n\n(see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58)\nNote: whether you get ‘;’ or ‘,’ or ‘:’ separators between several citations should be specified and handled automatically by the template.\n[see @Smith2018, 28; comp.\n @Jones2015, 28; also\n @Jones2017, 45--48]\n\n\nInline\n\n\n\nSmith (2012) says that\n@Smith2012 says that\n\n\nSmith (2012, 205) says that\n@Smith2012 [205] says that\n\n\nSmith (2012, x-xii) says that\nSpecify p. when the page numbers are not numerical\n@Smith2012 [p. x-xii] says that\n\n\nInline several papers by same author, you format the first inline and the rest regular:\n\n\n\nSmith (2012; 2015, 205) says that\n@Smith2012 [@Smith2015, 205] says that\n\n\nPeregrin & Svoboda (2013, 2016, 2017, and also Read, 2018)\nSmith (2012, p. 33; 2015, p. 300)\nAlternatively, you can type the name and use year-only:\nSmith (2012; 2015)\n@peregrin-svoboda:2013a [@peregrin-svob oda:2016;@peregrin-svoboda:2017; and also @read_s:2000]\n@Smith2012 [p.33; @Smith2015, p.300]\nSmith [-@Smith2012, @Smith2015]\n\n\nYear only\nSmith makes an outrageous claim (2015, 277).\nSmith keeps repeating himself (2012, 2013, 2014, 2015).\nSmith said this in a few places (2012, 20; 2013, 30)\nSmith said (in his 2012 a.o.) that\nnote: -(Smith2012?) doesn’t work, brackets are needed.\nSmith makes an outrageous claim [-@Smith2015, 277].\nSmith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015]\nSmith said this in a few places [-@Smith2012, 20; @Smith2013, 30].\nSmith said (in his Smith2012? a.o) that\n\n\n\nCommon errors:\n\n\n\n\n\n\n\nBad\nGood\n\n\n\n\nCode:\n(See for instance [@Smith2015]).\n(See for instance @Jones2018).\nOutput:\n(See for instance (Smith, 2015)).\n(See for instance Jones (2018)).\nCode:\n[See for instance, @Smith2015]\nOutput:\n(See for instance Smith, 2015).\n\n\nCode:\nSee f o r instance @Smith2012; @Smith2015.\nOutput:\nSee for instance Smith (2012); Smith (2015).\nCode:\nSee for insta n ce Smith [-@Smith2012; @Smith2015]\nOutput:\nSee for instance Smith (2012, 2015).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore details explained in pandoc’s markdown reference, citations section.\n\n20.1.1 Ibid., Op. Cit., sec. or § and the like\nAll the finer-grained formating is handled by the bibliography template. Whether repeated citations are printed out as “ibid”, “op. cit”, whether page ranges are referred to as “pp. 12-15” or “p. 12-15” or “12-15”, whether sections are called “sec.” or “§”, etc., all of this is decided and automatically handled by the bibliography template.\nIf an author uses ibid. or op. cit., just replace it with the original citation. For instance, if the author’s manuscript has:\n\n\nLewis (1986, 19) says something important. He adds something less interesting a few pages later (ibid., 29).\n\n\nWe encode:\n@Lewis1986 [19] says something important. He adds something less\ninteresting a few pages later [@Lewis1986, 29].\n\n\n20.1.2 Putting a citation link on a page number, or a word\nCitations must all be in one of the three forms above (Normal, Inline or Year-only). We cannot, and should not, put them on arbitrary words or page numbers. For instance, in the following:\n@Lewis1986 [19] says something important, but see also page 29.\n\nWe could either turn “page 29” in an inline or year-only citation, or leave it without link—provided there’s already a link to the work nearby, as is the case above."
  },
  {
    "objectID": "chapters/copyediting/23-cop-citations.html#examples-with-preferred-answers",
    "href": "chapters/copyediting/23-cop-citations.html#examples-with-preferred-answers",
    "title": "20  Citations",
    "section": "20.2 Examples with preferred answers",
    "text": "20.2 Examples with preferred answers\n\n20.2.1 Example: Doe (2019, 2020)\nOriginal\n\n\nIt should be noted here that, on the face of it, Doe (2019, 2020) does introduce his theory to justify placing greater weight on oneself than on others in making decisions.\n\n\nProposed\n\n\nIt should be noted here that, on the face of it, Doe (2020, 2019) does introduce his theory to justify placing greater weight on oneself than on others in making decisions.\n\non the face of it, Doe [-@doe_j:2020; -@doe_j:2019] does introduce...\n\nPreferred\nUse the inline citation format.\n\n\nIt should be noted here that, on the face of it, Jane Doe (2020, 2019) does introduce his theory to justify placing greater weight on oneself than on others in making decisions.\n\non the face of it, @doe_j:2020 [@doe_j:2019] does introduce\n\n\n20.2.2 Example: locating the possessive “’s”\nOriginal\n\n\nOne example is Doe (2020)’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon.\n\n\nProposal\n\n\nOne example is Doe (2020)’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon.\n\nOne example is Doe\n[-@doe_j:2020]'s notion...\n\nPreferred\nInline citations are simpler and give a better output link (clickable name as well as year):\n\n\nOne example is Jane Doe (2020)’s notion…\n\nOne example is @doe_j:2020's notion...\n\nBut in the original, “Doe (2020)’s …” is bad typesetting. Better move the citation to the end of the sentence or attach the possessive to the author’s name:\n\n\nOne example is Doe’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon [doe_j:2020].\n\n“the” (preeminent) horizon [doe_j:2020]. \n\n\nOne example is Doe’s [-doe_j:2020] notion…\n\nOne example is Doe's [-doe_j:2020] notion...\n\nBoth are fine, my favoured option is the first.\n\n\n20.2.3 Example\nOriginal\n\n\nOthers have granted him as much (e.g., Jones (2017), and Jane Doe in the introduction to Smith (2018)).\n\n\nCopyedited\nWe would avoid the double parenthesis at the end. More generally, avoid parentheses when the references is in parentheses:\n\n\nOthers have granted him as much (e.g., Jones, 2017, and Jane Doe in the introduction to Smith, 2018).\n\n\nBut also, if we’re citing Jane Doe’s introduction to Smith (2018), we should have a bibliography entry for that chapter itself. So ultimately we want:\n\n\n(e.g., Jones, 2017, Doe 2018).\n\n\nProposed\nFirst attempt, use two inline citations. But it results in a double parenthesis:\n\n\nOthers have granted him as much (e.g., Jones (2019), and Jane Doe in the introduction to Smith (2018)).\n\nas much (e.g., @jones_j:2017, and Jane Doe in the introduction to @smith_j:2018).\n\nSecond attempt, make it a single parenthesis citation with two references, on the model (Jones 2019; Smith 2018) ([@jones_j:2017; @smith_j:2018]). But pandoc doesn’t see it as a citation and the phrase disappears:\n\n\nOthers have granted him as much Smith (2018).\n\nas much [e.g., @jones_j:2017, and Jane Doe in the introduction to @smith_j:2018].\n\nWhat is going on? The syntax of inline citation separates prefixes and suffixes with commas (,) or spaces and different references with semi-colons (;). So the general rule is: if you have two keys you should have a semi-colon. In the code above what pandoc sees is:\n[prefix, @citekey, verylongsuffix]\n\nwhere verylongsuffix is the code and Jane Doe in the introduction to @smith_j:2018. But a suffix cannot include citations. It can only be simple text (and passim or a famous passage) or locator type + location (chap. 2, pages 12-13) or location (12-13).\nTo avoid that, we must make “and Jane Doe in the introduction to” the prefix of the second citation, @smight_j:2018:\n\n\nOthers have granted him as much (e.g., Jones 2019; and Jane Doe in the introduction to Smith 2018).\n\nas much [e.g., @jones_j:2017; and Jane Doe in the introduction to @smith_j:2018].\n\nThis is seen by pandoc as:\n[prefix, @jones_j:2017; anotherprefix @smith_j:2018].\n\nRemark that we get ; rather than , in between the citations. Compare:\n\n\nOthers have granted him as much (e.g., Jones, 2017, and Jane Doe in the introduction to Smith, 2018).\n\n\n\nOthers have granted him as much (e.g., Jones, 2017; and Jane Doe in the introduction to Smith, 2018).\n\n\nSome might prefer the first. But this is a small cost and one could argue that the second is more systematic.\nPreferred\nThe preferred method is to cite Doe’s introduction to Smith (2018) as a reference in its own right:\n\n\nOthers have granted him as much (e.g., Jones 2019; John Doe 2018).\n\nas much [e.g., @jones_j:2017; @doe_j:2018].\n\nThis requires an adding to the entry in the bibliography. The entry is a book section authored by Doe is a book authored (not edited) by Smith. Entering it in Zotero and exporting as Bibtex gives us the code:\n@inbook{doe_j:2018,\n    author = {Doe, John},\n    title = {Introduction},\n    booktitle = {An imaginary book},\n    bookauthor = {Smith, John},\n    publisher = {Ideas Press},\n    address = {Mainville},\n    year = {2018}\n}\n\n\n\n\nDoe, Jane. 2019. “Another Imaginary Article.” Review of Ideas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\n———. 2020. “An Imaginary Article.” Review of Ideas 10: 13–27. https://doi.org/10.0000/123456789.\n\n\nDoe, John. 2018. “Introduction.” In An Imaginary Book, by John Smith. Mainville: Ideas Press.\n\n\nJones, Jane. 2019. “Yet Another Imaginary Article.” Review of Ideas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\nSmith, John. 2018. An Imaginary Book. Mainville: Ideas Press."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#important",
    "href": "chapters/copyediting/24-cop-bibliography.html#important",
    "title": "21  Bibliography",
    "section": "21.1 Important",
    "text": "21.1 Important\n\nUse different names for the BibTeX files of different articles in the same issue. If one journal issue has several .bib files with the same name, the second won’t be found. (dialectica template)\nYour BibTeX file may ‘self-cite’: entries that cite other entries (in the note field, or even in the title field.) You need to check that (a) all entries cited in that way are included in the Bibfile. If they aren’t you’ll see “Citation not found” errors. You also need to check that (b) all citations within the bibliography are printed correctly. Look at the bibliography in PDF and html output, make sure it doesn’t contain garbage like Smith_2008:c? or wrong formatting like “(reprinted in (Smith 2008))”.\n\n\nThere’s more detail on self-citing bibliographies below."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#get-or-create-a-bibtex-file",
    "href": "chapters/copyediting/24-cop-bibliography.html#get-or-create-a-bibtex-file",
    "title": "21  Bibliography",
    "section": "21.2 Get or create a BibTeX file",
    "text": "21.2 Get or create a BibTeX file\nTemporary solution: get your .bib from Philipp."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#adding-non-cited-references-in-the-bibliography",
    "href": "chapters/copyediting/24-cop-bibliography.html#adding-non-cited-references-in-the-bibliography",
    "title": "21  Bibliography",
    "section": "21.3 Adding non-cited references in the bibliography",
    "text": "21.3 Adding non-cited references in the bibliography\nIn the metadata block, add a line:\nnocite: |\n  @bibtexentry1, @bibtexentry2, @bibtexentry3\n\nIf you have lots of those, best use a tool to extract the keys automatically from a bibtex file."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#inserting-citations-in-the-text-in-rstudio",
    "href": "chapters/copyediting/24-cop-bibliography.html#inserting-citations-in-the-text-in-rstudio",
    "title": "21  Bibliography",
    "section": "21.4 Inserting Citations in the text in RStudio",
    "text": "21.4 Inserting Citations in the text in RStudio\nRequires: RStudio visual editor mode.\nIn visual mode, Insert &gt; @ Citation. It opens a popup window; on its left menu, choose bibliography. Click the plus sign on the right of each citation, then press the insert button.\nMissing references: Go to @ Citations. On the left menu of the pop-up window, choose CrossRef. (See image below). Type the author and the name of the paper in the search bar; that should find the paper. Click on the plus sign on the right of the entry, then press insert button which will add the reference to the bibliography file."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#formatting-citations-in-the-text",
    "href": "chapters/copyediting/24-cop-bibliography.html#formatting-citations-in-the-text",
    "title": "21  Bibliography",
    "section": "21.5 Formatting citations in the text",
    "text": "21.5 Formatting citations in the text\nThere are various formats of citations:\n\nIn several recent papers, this has all been shown wrong (Castor &gt; 2018; Pollux 2020).\nAs Castor (2020: 127) shows, this is all wrong.\n\n\nTo get these various formats you need to modify the markdown code for citations. For instructions refer to the Markdown guide above (cheatsheet or section on citations)."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-guidelines",
    "href": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-guidelines",
    "title": "21  Bibliography",
    "section": "21.6 BibTeX file guidelines",
    "text": "21.6 BibTeX file guidelines\nThis only applies to BibTeX (.bib) files. If you’re using CSL Json files, you are probably generating them from Zotero or some other bibliography manager instead.\n\n21.6.1 Edit BibTeX files\nSeveral methods:\n\nEdit the .bib file directly in a text editor (e.g. RStudio). Either:\n\n\nfix manually what is wrong with the entry.\ndelete the entry, search and add it again with the same method as when you miss a reference (see below).\n\n\nUse a BibTeX editor (BibDesk, comes with TeXshop on Macos, or JabRef).\nUse a bibliography manager like Zotero that imports / exports BibTeX files. Beware: Zotero and others convert the .bib file into their own formats on import. This means that you may lose of your bib file’s features: with Zotero, \\cite commands (that a BibTeX file may use to cite some entries in other entries) are lost.\n\n\n\n21.6.2 Check BibTeX file formatting\nYou can use biber (LaTeX’s bibliography generator) to check a BibTeX file for errors. Run on the terminal:\nbiber --tool references.bib\n\nThis prints out a report on any problem in the file. It also creates a cleaned-up version of the file, as references_bibtools.bib.\n\n\n21.6.3 BibTeX field names aren’t case-sensitive\nBibTeX field names are not case-sensitive: they can be named “author”, or “Author”, or “AUTHOR”.\n@inbook{Jakobson:1980,\n  Author = {Jakobson, Roman},\n  Title = {Metalanguage as a Linguistic Problem}\n}\n\nIs the same as:\n@inbook{Jakobson:1980,\n  author = {Jakobson, Roman},\n  TITLE = {Metalanguage as a Linguistic Problem}\n}\n\n\n21.6.4 Title capitalization\nTraditionally, in English bibliographies titles in English are typeset in title case (“An Article with Results”) but titles in other languages are typeset in sentence case (“An article with results”). In German or French bibliographies, all titles (including those of works in English) are in sentence case.1\nThe appearance is controlled by our bibliography template. For this to work entries in the the BibTeX file must:\n\nHave a langid field specifying the entry’s language as an IETF language tag: en, en-US, de, etc.2 Though (at least some) full names like english or french will work too. If there is no\nlangid field for a given BibTeX entry, the entry is assumed to be in the language of the document (as specified in the document’s metadata, lang field).\nHave titles in sentence case, that is, where only names and words that need to be capitalized no matter what are in upper case. For instance, “The philosophy of logical atomism” or “Der Wahrheitsbegriff in den formalisierten Sprachen”.\n\n\nIf an entry uses title case (“Rezension der Schrift von…”), the capitals will be assumed to be mandatory and will be printed even when it should be in sentence case. Thus if you know that your bibliography entries in English will always be printed in title case (i.e., your publication is in English and you’re sure it won’t adopt the APA sentence case convention), then it’s harmless to use title case in the BibTeX file itself. But when in doubt sentence case + langid field is the safe option.\nFor an illustration:\n@article{Tarski1936,\n    author = {Alfred Tarski},\n    title = {Der Wahrheitsbegriff in den formalisierten Sprachen},\n    journal = {Studia Philosophica},\n    volume = {1},\n    pages = {261--405},\n    year = {1936},\n    langid = {de},\n}\n@article{Russell1905,\n    author = {Bertrand Russell},\n    title = {On denoting},\n    journal = {Mind},\n    volume = {14},\n    number = {56},\n    pages = {479--493},\n    year = {1905},\n  langid = {en},\n}\n\nFor more detail:\n\nthe langid field is a biblatex field name. It is recognized by Pandoc’s citeproc (Pandoc’s internal citation processor) for use in a association with a CSL style file.\nThere is a language field in BibTeX files too. But it is not meant to affect an entry’s format; rather, it is used for entries to explicitly state its language](ttps://tex.stackexchange.com/questions/323441/how-does-langid-field-in-biblatex-differ-from-language-field) affect the formal of the bibliography.\n\n\n\n21.6.5 Original year of publication\nIf the author isn’t using the original edition of a book, e.g. citing from a 2010 edition of Locke’s 1689 essay, add a field origdate in the bibtex entry. (will not show up in the PDF at the moment, but our final template will do it). Ex:\n@inbook{Jakobson:1980,\n  Author = {Jakobson, Roman},\n  Booktitle = {The Framework of Language},\n  Location = {Ann Arbor},\n  Year = {1980}\n  Origdate = {1956},\n  Pages = {81\\--92},\n  Publisher = {University of Michigan Press},\n  Shorttitle = {Metalanguage as a Linguistic Problem},\n  Title = {Metalanguage as a Linguistic Problem}\n}\n\nSee biblatex documentation, §2.2.2 on data fields.\n\n\n21.6.6 BibTeX conventions and resources\nThere are two BibTeX standards that can be used:\n\nBibTeX\nBibLaTeX\n\n\nThe two conventions overlap a lot (most of the field names are common). The BibLaTeX conventions are more recent and complete. The BibTeX ones are widely used, and almost entirely compatible with BibLaTeX. Each corresponds to a LaTeX bibliography processor (bibtex and biber, respectively). Both are understood by Pandoc’s bibliography processor, citeproc.\nWhere to find references on these BibTeX standards?\n\nBibTeX. The BibTeX original documentation (1988), Paperpile’s BibTeX guide.\nBibLaTeX. The BibLaTeX official documentation and the BibLaTeX cheatsheet.\n\n\nNote: if you have a full LaTeX installation on your computer you will have access to some of these documents from your terminal using the texdoc command. Try the commands:\ntexdoc biblatex\n\ntexdoc biblatex-cheatsheet\n\ntexdoc bibtex\n\nDialectica guideline. We use the biblatex conventions."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-special-entry-types",
    "href": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-special-entry-types",
    "title": "21  Bibliography",
    "section": "21.7 BibTeX file special entry types",
    "text": "21.7 BibTeX file special entry types\n\n21.7.1 Unpublished manuscript\nChoose the type unpublished. Add a note field:\n  note = {unpublished manuscript}\n\nAdd a URL if available.\nDialectica guideline. We require a URL. If the author cannot provide a URL, we do not create a bibliography entry at all but only describe the source in a footnote (“in an unpublished manuscript titled”XXX”)."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#make-sure-any-self-cited-entries-are-included-and-printed",
    "href": "chapters/copyediting/24-cop-bibliography.html#make-sure-any-self-cited-entries-are-included-and-printed",
    "title": "21  Bibliography",
    "section": "21.8 Make sure any self-cited entries are included and printed",
    "text": "21.8 Make sure any self-cited entries are included and printed\nYour bibliography file may be ‘self-citing’, that is it may include some entries that cite other entries. For instance, a bibliography entry may have the title “Review of \\citet{Smith_h:2005}”, where the latter is LaTeX code to cite the entry with key Smith_h:2005. If your bibliography file might have such entries you need to do two things:\n\nMake sure that for all the self-cited keys, there is an entry in the file.\nMake sure that the self-cited keys are printed out in the final bibliography.\n\n\nIf somebody else is taking care of your bibliography file, you only have to do the second. If in addition you’re sure that your bibliography file does not include unnecessary entries, you have a simple way of dealing with (2) by adding the nocite: @* line in your metadata. See below.\n\n21.8.1 Check that the BibTeX file includes all self-cited entries\nRequires: Dialectica’s selfcites.py script. Using the terminal.\nThe problem. If a bibliography file self-cites some keys, but doesn’t include an entry for these keys, you will get “Missing reference” warnings and your bibliography will be incomplete. You need to ensure that there’s an entry for any self-cited key.\nSolution. Run the selfcites.py script on your bibliography file. Suppose your article’s bibliography file is named myreferences.bib. Open a terminal, navigate to the article folder and run:\npython3 ../../../resources/scripts/selfcites.py myreferences.bib\n\nMore generally, you can run that script from anywhere on a bib file that is anywhere:\npython3 path/to//selfcites.py path/to/myreferences.bib\n\nThe script will check the .bib file for self-citations and output a report in the terminal such as:\nDialectica open access initative self-citing bibliography file check, (c) Thomas Hodgson 2021\nI found these self cited keys:\n quine:1951e, loux:1970, lewis_dk:2001c, vaninwagen:2001, quine:1953, lewis_dk:1983\nThese self cited keys are missing from the file's entries:\n quine:1951e\nloux:1970\nlewis_dk:2001c\nvaninwagen:2001\nquine:1953\nlewis_dk:1983\nFor information, these are all the entries I found:\n horgan_te-potrc:2008, brenner_and:2017a, zimmerman_dw:2008, kleinschmidt_s:2014, sider_t:2013, rettler:2016, vaninwagen:1998d, cameron_rp:2012, lewis_dk:1973, cowling_s:2013b, finocchiaro_p:2019:, burgess_jp-rosen:1997, mcsweeney:2019, willard_mb:2014, bennett_k:2009, nolan_dp:1997b, tallant:2013a, schaffer_j:2015a, prior_an-fine:1977, turner_j:2015, churchland_pm:1984, finocchiaro_p:2021:, melia:2008a, quine:1948, torza:2015, schaffer_j:2009d, lewis_dk-lewis:1970, bennett_k-zimmerman:2013, linnebo-nicolas:2008, lewis_dk:1986, parsons_j:2014, chalmers_dj-etal:2009, sober:2015, sider_t:2011, merricks:2001, keller_ja:2017, finocchiaro_p:2019b:, mckay_tj:2006, paul_la:2017a\n\nIf there are keys below “These self cited keys are missing from the file’s entries:”, then your .bib file cites these keys but they are missing. You need to add them.\nThe line below “I found these self cited keys:” can be used to ensure the self-cited entries are printed in the article bibliography. See below.\n\n\n21.8.2 Make sure all the self-cited entries are printed out\nThe problem. If bibliography file self-cites some entries, but the manuscript itself doesn’t cite them, these entries will not be printed in the bibliography.\nThe solution. The self-cited entries must be added in the document’s metadata, in a nocite field. There are two ways to do so:\n\nif you’re sure that your .bib file only contains entries that need to be printed out (no extra entries), then you can use the simple option 1.\notherwise, use option 2, which requires a script.\n\n\nOption 1. If you are sure that your .bib file only contains entries that need to be printed out in the bibliography\nRequires: the selfcites.py script. See above.\nOpen the .bib file in a text editor. Search for \\cite. If you have no no results, then your .bib file doesn’t include self-citations and you are good to go. If you do find results, you will have bibliography entries in the file that look like this, for instance:\n@book{geach_pt:1962,\n  address =       {Ithaca, New York},\n  author =        {Geach, Peter Thomas},\n  note =          {third edition: \\citet{geach_pt:1980}},\n  publisher =     {Cornell University Press},\n  title =         {Reference and Generality, an examination of some\n                   medieval and modern theories},\n  year =          {1962},\n}\n\nIn the note = line here, you see the code \\citet{geach_pt:1980}. This is a LaTeX command that cites another bibliography entry in the same file, namely the one with the key geach_pt:1980. Ultimately this will be printed out in the bibliography as:\n\n\nGeach, Peter Thomas (1962) Reference and Generality, an Examination of Some Medieval and Modern Theories, Ithaca, New York: Cornell University Press. Thrid edition: Geach (1980).\n…\nGeach, Peter Thomas (1980) Reference and Generality, …\n\n\nThe LaTeX \\cite commands can start with \\cite, \\citet, \\citep; you will find all of these by searching \\cite in the file. Sometimes the command cites pages numbers and looks like this instead:\n  note =          {reprinted in \\citet[232--258]{mccall_s:1967}, with\n                   considerable change in notation},\n\nIn that case the cited entry’s key is still the thing between curly brackets, here mccall_s:1967.\nNow you need to make sure that the self-cited entries appear in the bibliography. The problem is that if it is only cited in the bibligraphy and not the paper itself, it will not automatically be included. To ensure that it is included, you need to add the key in your document metadata, in a nocite field:\ntitle: A Neat Paper\nauthor: Smith, John\nbibliography: smith.bib\nnocite: |\n  geach_pt:1980, mccall_s:1967\n\nThe nocite: | should appear on one line, the entries on one or several lines below but each of those lines must start with at least two spaces, and the entries should be separated by commas.\nYou need not check whether the entries are actually cited in the paper or not: just add them to the nocite metadata, it will not hurt if they are also cited.\nContinue searching for \\cite commands in your .bib file and make sure all the keys are entered in your document’s nocite metadata section."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#troubleshooting-and-examples",
    "href": "chapters/copyediting/24-cop-bibliography.html#troubleshooting-and-examples",
    "title": "21  Bibliography",
    "section": "21.9 Troubleshooting and examples",
    "text": "21.9 Troubleshooting and examples\n\n21.9.1 Error message: Unexpected end of file\nThe following message indicates an error with the BibTeX file:\nError at \"percent.bib\" (line 9, column 1):\nunexpected end of input\n\n\n21.9.2 Percent signs in DOI field\nAt the moment % signs in DOI fields generate an error.\nIf you copied/pasted DOIs in your BibTeX file, symbols in them may end up ‘percent-encoded’, e.g. “%2F” instead of “/”. For instance, the DOI “10.1007/15.12345” copied from the web may end up being pasted as “10.1007%2F15.12345”.\nThese DOIs crash Pandoc version 3.0.1 and lower, but the bug will be fixed in future releases.\n\n\n21.9.3 Error message: \\citet unknown command\nRequires: script or filter that manages recursive bibliography management .\nPandoc encounters a LaTeX citation command (\\citet or the like). Unless you or the author has written one in the text, it is in the .bib file.3\nSolution 1. In Dialectica, LaTeX citation commands in the .bib file are processed. This is achieved by a script that runs pandoc on the document twice, first to generate a json that includes the biblio, second to generate the final output (at which state the latex commands in the biblio are processed). The first run is --to json and the second with -M suppress-bibliography. Suggested by John MacFarlane on pandoc-discuss.\nSolution 1. Replace the offending \\citet command(s) in your .bib file. To find it or them:\n\nprocess the markdown with .tex output.\nsearch \\citet in the tex output. you should see which bib entry it is in.\ngo to the .bib file and replace the \\citet{jones_a:2020} in that entry with e.g. Jones (2020), and in the md, enter the citation key as no-cite (see above)\n\n\nSolution 2. Implement a double-pass generation procedure. This is the publisher’s job.\n\nWe have now figured out a method to process those command. However, we’ll need to update the document-generation procedure to implement it. Either wait for it, or use solution 1.\nin a field of your .bib file is printed out. It needs to be replaced. To find it:\n\nprocess the markdown with .tex output.\nsearch \\citet in the tex output. you should see which bib entry it is in.\ngo to the .bib file and replace the \\citet{jones_a:2020} in that entry with e.g. Jones (2020), and in the md, enter the citation key as no-cite (see above)\n\n\nExplanation. Pandoc doesn’t process it (at least, not if the field is “title”, and perhaps not in general), leaves the \\citet command. At the LaTeX stage it’s not recognized by LaTeX (because we don’t load natbib).\n\n\n\n21.9.4 From Frege to gödel\nMystery. The cross ref below is printed out as “From Frege to gödel:” by citeproc, no matter (a) whether we write Gödel or G{\\¨o}del, (b) no matter the position, i.e. we get “From gödel to Frege”. The solution is put G in curly brackets. But why???\n\\@incollection{frege:1967a,\n  Author = {Frege, Gottlob},\n  Crossref = {vanheijenoort:1967},\n  Note = {translated by Stephan Bauer-Mengelberg},\n  Num_Sort = {40337},\n  Pages = {1\\--82},\n  Title = {Begriffsschrift: A Formula Language Modeled on that of\n  Arithmetic, for Pure Thought},\n  Year = {1967}\n}\n\n\\@book{vanheijenoort:1967,\n  editor = {van Heijenoort, Jan},\n  year = {1967},\n  title = {From Frege to G{\\\"o}del: A Source Book in Mathematical Logic\n  1879-1931},\n  booktitle = {From Frege to {G}ödel: A Source Book in Mathematical Logic\n  1879-1931},\n  address = {Cambridge, Massachusetts},publisher = {Harvard University\n  Press}\n}\n\nBeginning of an answer: case is protected if a subpart of the word is bracketed. A dog called {Pizza} will be overriding by the style (and thus printed “A pizza” if the style calls for it) but A dog called {P}izza is protected."
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#footnotes",
    "href": "chapters/copyediting/24-cop-bibliography.html#footnotes",
    "title": "21  Bibliography",
    "section": "",
    "text": "The Chicago manual recommends title case for English titles; the APA manual recommends sentence case for all titles.↩︎\nThe polyglossia package documentation has a useful list of tags. If you have a full LaTeX installation you can also get it from the terminal by running the command texdoc polyglossia.↩︎\nExplanation. By default Pandoc doesn’t process the \\citet command in a bib file (at least, not if the field is “title”, and perhaps not in general), leaves the \\citet command. At the LaTeX stage it’s not recognized by LaTeX (because we don’t load natbib).↩︎"
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#math-and-logic-conventions",
    "href": "chapters/copyediting/241-cop-math-latex.html#math-and-logic-conventions",
    "title": "22  Math and LaTeX elements",
    "section": "22.1 Math and logic conventions",
    "text": "22.1 Math and logic conventions\nThese are decided by your house style.\nDialectica guidelines.\n\nPropositional connectives: \\lnot (\\(\\lnot\\)) rather than \\sim (\\~). (those who prefer the latter should note that \\sim doesn’t have operator spacing in LaTeX, better redefine \\lnot to print ~ with math operator spacing.)\n\n\nResources: many websites allow you to search for HTML entites code."
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#formulas",
    "href": "chapters/copyediting/241-cop-math-latex.html#formulas",
    "title": "22  Math and LaTeX elements",
    "section": "22.2 Formulas",
    "text": "22.2 Formulas\n\n22.2.1 Basics\nIf the author’s manuscript includes formulas, make sure they are in MS Word / Google Docs Equation mode before converting to markdown. pandoc will then convert them in LaTeX formulas, which will greatly simplify your work.\nAn “inline” formula, that is a formula within the flow of the text, is delimited by $ signs. For instance, this:\n\n\nThe principle of non-contradition, \\(\\lnot (\\phi \\land \\lnot \\phi)\\) is Leibniz’s…\n\n\nis coded:\nThe principle of non-contradition, $\\lnot (\\phi \\land \\lnot \\phi)$ is\nLeibniz's...\n\nA “display” formula, one that occupies more than one line, is delimited by $$ signs. For instance, this:\n\n\nLeibniz’s law, \\[\\forall x \\forall y (x=y \\rightarrow \\forall X\n(Xx \\leftrightarrow Xy))\\] is …\n\n\nis coded:\nLeibniz's law, $$\\forall x \\forall y (x=y \\rightarrow \\forall X \n(Xx \\leftrightarrow Xy))$$ is ... \n\nDisplay formulas are ‘block’ elements. For more or them, in particular, numbering them, see the Equations.\nDo not leave a space after the opening $ or before the closing one, otherwise markdown thinks they are ordinary dollar signs.\n\nGOOD: $\\forall x (Fx \\rightarrow Gx)$\nBAD: $ \\forall x (Fx \\rightarrow Gx) $\n\n\nCan pandoc confuse ordinary dollar signs and formula delimiters? Normally not. In the following:\n\nAmounts of $20,000 and $30,000 are...\n\n\nPandoc will not think that $20,000 and $ is a formula, because the last $ is preceded by a space. If, however, for some reason you need to typeset something like:\n\nAmounts of $20,000 and 0.00$ are...\n\n\nwhere Pandoc will turn into a formula, “escape” the dollar signs:\nAmounts of \\$20,000 and 0.00\\$ are...\n\n\nAmounts of $20,000 and 0.00$ are…\n\n\n\n22.2.2 Good practices\nDo not break up a formula apart into its individual symbols. For instance, this:\n\n\nThe formulas \\(\\exists x(Fx \\rightarrow Gx)\\), \\(\\forall x\\neg\\text{Gx}\\) are quantified formulas.\n\n\nShould be entered in markdown as:\nThe formulas $\\exists x(Fx \\rightarrow Gx)$, $\\forall x\\neg\\text{Gx}$\nare quantified formulas.\n\nNot as:\nThe formulas $\\exists$ x (Fx $\\rightarrow$ Gx), $\\forall$ x$\\neg$Gx\nare quantified formulas.\n\nDo not enter a list of formulas as a single formula (with exceptions). Merging two formulas into one prevents linbreaks between them in the output:\n\nGOOD: $\\exists x (Fx \\rightarrow Gx)$, $\\forall x \\lnot Gx$.\nBAD: $\\exists x (Fx \\rightarrow Gx), \\forall x \\lnot Gx$.\n\n\nException: if you have lists of small items as in \\(p_1, p_2, \\ldots , p_n\\), no need to split those into many equations:\n\nGOOD: $p_1, p_2, \\ldots, p_n$1\nALSO GOOD: $p_1$, $p_2$, ..., $p_n$.\n\n\nAnother exception, list of premises in a formula stating that they entail a conclusion:\n\n\n\\(A, B, \\vDash C\\)\n\n\nGOOD: $A, B, \\vDash C$\nBAD: $A$, $B$, $vDash C$\n\n\nThe latter might look right but it is not accurate in e.g. a machine-readable JATS XML export, as the whole line here should be treated as a single claim (that \\(A\\),\\(B\\) entail \\(C\\)), not three claims (\\(A\\), \\(B\\) and \\(\\vDash C\\)).\nElements of formulas repeated in the text are entered as formulas too. For instance this:\n\n\nIn the formula \\(\\exists xFx\\) the variable \\(x\\) is bound.\n\n\nis coded thus:\n\nGOOD: In the formula $\\exists xFx$ the variable $x$ is...\nBAD: In the formula $\\exists xFx$ the variable x is...\nBAD: In the formula $\\exists xFx$ the variable *x* is...\n\n\nNote that *x* is not in formula mode and not a suitable replacement for $x$ here. While both would be displayed in italics, their meaning is different (on indicates emphasis, the other indicates an element of a formula) and they are subtle differences in typesetting (different font and spacing for formulas). Similarly:\n\n\nIf a subject \\(S\\) has property \\(P\\)\n\n\nGOOD: If a subject $S$ has property $P$...\nBAD: If a subject S has property P...\nBAD: If a subject *S* has property *P*...\nBAD: If a subject **S** has property **P**...\n\n\nOrdinary text within formulas. Some authors put ordinary text within formulas:\n\\(\\exists\\Phi(\\textrm{All }\\Phi\\textrm{ one})\\)\nYou should put that text within the formula LaTeX code, using \\textrm{...} for normal text, and \\textit{...} for italic, \\textbf{...} for bold, \\texttt{...} for code.\n\nBAD: ($\\exists\\Phi$)(All $\\Phi$ One)\nGOOD: $(\\exists\\Phi)(\\textrm{All} \\Phi \\textrm{One})$\n\n\nThis makes more sense (the first is one formula, the second is two mixed with the text) and the spacing will be better."
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#schematic-letters-in-the-text",
    "href": "chapters/copyediting/241-cop-math-latex.html#schematic-letters-in-the-text",
    "title": "22  Math and LaTeX elements",
    "section": "22.3 Schematic letters in the text",
    "text": "22.3 Schematic letters in the text\nSchematic letters in the main text should normally be typeset as formulas:\n\n\n\nI want\nI type\n\n\n\n\n\\(S\\) knows that \\(p\\)\n$S$ knows that $p$\n\n\n\\(n\\)-ary predicate\n$n$-ary predicate\n\n\n\\(F\\)-ness\n$F$-ness\n\n\n\\(\\mathrm{F}\\)-ness\n$\\mathrm{F}$-ness\n\n\n\nThis does not apply to acronyms, e.g. “PP” for the Precautionary Principle.\nRemark. If there are few, e.g \\(S\\), \\(p\\), and they don’t appear in formulas proper such as \\(K_Sp\\), then it can be tolerated to enter them as is (S) or with emphasis to obtain italics (*p*). We advise against this because *...* indicates emphasis and not a symbol or italics. For instance, if the markdown source is later fed into text-to-speech software the read out will wrongly stress *p* wherever it’s used.\nSome mathematic texts use upright uppercase letters and lowercase italicized letters.2 To get upright letters with math mode use the \\mathrm{...} LaTeX command. All letters within {...} will be typset as upright serif letters (“roman” is another name for serif):\n\n\n\nI want\nI type\n\n\n\n\n\\(\\mathrm{MA}p\\)\n$\\mathrm{MA}p$\n\n\n\\(\\mathrm{M}Ap\\)\n\\mathrm{M}Ap\n\n\n\\(\\mathrm{A+B}\\)\n\\mathrm{A+B}\n\n\n\nIf the predicates are referred to in the text around, I would make sure there are in dollar signs too:\n\n\nPredicate \\(F\\) is unary, predicate \\(G\\) binary.\n\n\nGOOD Predicate $F$ is unary, predicate $G$ binary.\nNOT ADVISED Predicate F is unary, predicate G binary.\nNOT ADVISED Predicate *F* is unary, predicate *G* binary."
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#sec-cop-math-latex-split-fractions",
    "href": "chapters/copyediting/241-cop-math-latex.html#sec-cop-math-latex-split-fractions",
    "title": "22  Math and LaTeX elements",
    "section": "22.4 Split fractions",
    "text": "22.4 Split fractions\nFractions like 2/3, 1/2, can (and are often better) be printed out as split fractions, with the first number slightly up and left and the lower slightly down and right.\nSolution 1. Fraction ½. This can be printed in both HTML and LaTeX output with the HTML entity code &frac12;. However, the HTML entites cannot be used in LaTeX so you need to break down any formula including it, which is potentiall bad for output (allows an unwanted linebreak, for instance).\nThe glass is &frac12; empty.\n\n$x =$&frac12;$+ 1$. \n\n\nThe glass is ½ empty.\n\\(x =\\)½\\(+ 1\\).\n\n\nSolution 2. LaTeX package + imagify. Use the xfrac LaTeX package by adding the following to the header-includes metadata field:3\nheader-includes: |\n  ~~~ {=latex}\n  \\usepackage{xfrac}\n  ~~~\n\nand enter the fractions in formulas like so:\n$\\sfrac{2}{3}$\n\nDownside: these are not handled by MathJAX in HTML output, so they have to be converted to images by your template Chapter 23.\nFuture solution? (fails with MathJAX 3). Use xfrac as above but add a custom extension to MathJaX instead of imagifying. See this page for a MathJaX 2 example. This doesn’t seem to work in MathJAX 3 (perhaps because we can’t have the “unpacked” version from the CDN). With a working extension the idea would be to add the conde:\nheader-includes:\n  ~~~ {=latex}\n  \\usepackage{xfrac}\n  ~~~\n  ~~~ {=html}\n  &lt;script type=\"text/x-mathjax-config\"&gt;\n  MathJax.Hub.Register.StartupHook(\"TeX Jax Ready\",function () {\n   ... extension code\n  });\n  &lt;/script&gt;  \n  ~~~\n\nWarning though: if using OJS’s inline HTML the script should be in the body rather than header."
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#equations",
    "href": "chapters/copyediting/241-cop-math-latex.html#equations",
    "title": "22  Math and LaTeX elements",
    "section": "22.5 Equations",
    "text": "22.5 Equations\nFor the basics of formulas, see Formulas.\n\n22.5.1 Numbered equations\nRequires: pandoc-crossref filter.\nDisplay formulas can be numbered by assigning them an identifier:\n$$E = mc^2$$ {#eq:my-label}\n\nHere the identifier is eq:my-label. It must start with eq:. It can then be used for crossreferences:\nAs shown by @my-label, ...\n\nThe syntax for crossreferences is like that of citations, but it can also automatically add a prefix like ‘Eq.’ or ‘Eqs.’. See the pandoc-crossref documentation."
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#theorems-and-proofs",
    "href": "chapters/copyediting/241-cop-math-latex.html#theorems-and-proofs",
    "title": "22  Math and LaTeX elements",
    "section": "22.6 Theorems and proofs",
    "text": "22.6 Theorems and proofs\nRequires: the statement.lua filter.\nWe format them as “fenced Div blocks”, i.e. blocks separated by three or more colons (the closing fence must have as many as the opening one). The fenced Div must have a class from one of the default theorem types like theorem (or thm), proposition (or prop), lemma (or lem), definition (or defn), remark (or rmk), etc.\n::: theorem\nContent of the theorem\n\nSecond paragraph of the same theorem.\n:::\n\nAn theorem can have an id for cross-reference. If you add an ID don’t forget the curly brackets and point before theorem:\n::: {.theorem #theorem}\nContent of the theorem\n:::\n\nTheorems can also have a source, or some info. The source is a citation right at the beginning of the theorem:\n::: theorem\n@jones1990 Content of the theorem\n:::\n\nInfo is some text between brackets at the beginning of the theorem. The text can itself contain brackets, provided they’re properly balanced:\n::: theorem\n(negative (or positive) values) Content of the theorem\n:::\n\nProofs:\n::: proof\nObvious from theorem @mytheorem.\n:::\n\n22.6.1 No theorems in footnotes\nStatements don’t works in footnote for LaTeX/PDFoutput. That’s a limitation imposed by the LaTeX amsthm package we rely on. It’s a sensible limitation: countless maths books are published with this package and not a single one of them needs theorems in footnotes.\nIndented blocks (plain statements) may appear in footnote. If so use a custom labelled list with empty labels.\n\n\n22.6.2 More theorem options\nThe Statement filter has many more options. Check its manual (in progress as of April 2023)\nStatement filter manual"
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#natural-deduction-proofs-with-bussproofs",
    "href": "chapters/copyediting/241-cop-math-latex.html#natural-deduction-proofs-with-bussproofs",
    "title": "22  Math and LaTeX elements",
    "section": "22.7 Natural deduction proofs with bussproofs",
    "text": "22.7 Natural deduction proofs with bussproofs\nIf an article uses the LaTeX bussproofs package, the following guidelines will allow them to be displayed directly in HTML when using the Mathjax option.4\nBussproofs can be either inline, ending with \\DisplayProof:\n\\AxiomC{$P \\land Q$)}\n\\UnaryInfC{$Q$}\n\\DisplayProof\n\nOr display (block element), within a prooftree environment:\n\\begin{prooftree}\n\\AxiomC{$P \\land Q$)}\n\\UnaryInfC{$Q$}\n\\end{prooftree}\n\nMathJax can only render the latter, so we always use display proofs. They’re a bit more spaced than inline ones, but that looks better. If, for some reasons, inline bussproofs are required, we would imagify them.\n\n22.7.1 Inline bussproofs\nMathjax does not display inline bussproofs. So prefer block ones wherever possible. If you must use an inline proof, you have two options.\n\nUse the Imagify to convert the proof to image in HTML output.\nReplace any $...$ math delimitors in the proof with \\(...\\), and wrap the proof within $...$. If you do this, the HTML output will display a warning message where the proof would have been. If you don’t, you will get nothing at all or a confusing mix of LaTeX code and error message such as ...A\\(}\\UnaryInfC{\\)AExtra close brace or missing open...\n\n\n(Dialectica-specific). We strongly prefer block proofs. We imagify any proof that doesn’t display correctly.\nIllustration of option 2. Suppose you have the Inline proof:\n\\AxiomC{$P \\land Q$)}\n\\UnaryInfC{$Q$}\n\\DisplayProof\n\nYou should rewrite it as:\n$\\AxiomC{\\(P \\land Q\\)}\n\\UnaryInfC{\\(Q\\)}\n\\DisplayProof$\n\n\n22.7.2 Block bussproofs\nRequires: Pandoc 2.19.3+. Enter the prooftree environment directly in markdown, without enclosing $$...$$:\n\\begin{prooftree}\n\\AxiomC{\\(P \\land Q\\)}\n\\UnaryInfC{\\(Q\\)}\n\\end{prooftree}\n\nIt should display correctly in HTML output.\nExceptions: some commands like \\doubleline aren’t handled by MathJaX. They are displayed in red in the HTML output. You can either leave it as is or use Imagify to convert it to an image:\n::: {.imagify}\n\n\\begin{prooftree}\n...\n\\end{prooftree}\n\n:::\n\nSee the Imagify section to fine-tune the result.\n*(Dialectica-specific)**. We strongly prefer block proofs. We imagify any proof that doesn’t display correctly.\nRequires: the not-in-format filter.\n(Note: the problem below will be fixed with Pandoc 2.19.3. With this update we should be able to enter the prooftree environments without the surrounding $$..$$. (to be tested).)\nWith prooftree environments we face the following problem:\n\nIf we include the LaTeX directly in the source, it’s not printed at all in HTML output:\n\\begin{prooftree}\n\\AxiomC{\\(P \\land Q\\)}\n\\UnaryInfC{\\(Q\\)}\n\\end{prooftree}\nIf we enclose it within `$$...$$, it is passed to the HTML output and then correctly displayed by MathJax. But the PDF generation crashes.\n$$\\begin{prooftree}\n\\AxiomC{$P \\land Q$}\n\\UnaryInfC{$Q$}\n\\end{prooftree}$$\n\n\nSolution. We provide two versions of the prootree environment, one for formats other than LaTeX, one for LaTeX. This is done as follows:\n::: {.not-in-format .latex}\n $$\\begin{prooftree}\n  \\AxiomC{$P \\land Q$}\n  \\UnaryInfC{$Q$}\n\\end{prooftree}$$\n:::\n\n::: {.only-in-format .latex}\n\\begin{prooftree}\n  \\AxiomC{$P \\land Q$}\n  \\UnaryInfC{$Q$}\n\\end{prooftree}\n:::\n\nWithin prooftree environements there’s no need to replace the $...$ with \\(...\\).\nThe not-in-format and only-in-format Divs can contain any markdown content, including a mix of LaTeX and markdown if needed. For isntance, your proofs may be in numbered example lists:\n::: {.not-in-format .latex}\n(@) $$\\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}$$\n:::\n\n::: {.only-in-format .latex}\n(@) \\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}\n:::\n\nAnd if you have several proofs in a row, you don’t need to have two Divs for each, you can have two Divs overall:\n::: {.not-in-format .latex}\n1.   $$\\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}$$\n2.   $$\\begin{prooftree}\n      \\AxiomC{$P$}\n      \\UnaryInfC{$P\\lor Q$}\n    \\end{prooftree}$$\n:::\n\n::: {.only-in-format .latex}\n1.   \\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}\n2.   \\begin{prooftree}\n      \\AxiomC{$P$}\n      \\UnaryInfC{$P\\lor Q$}\n    \\end{prooftree}\n\n:::"
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#latex-new-and-redefined-commands",
    "href": "chapters/copyediting/241-cop-math-latex.html#latex-new-and-redefined-commands",
    "title": "22  Math and LaTeX elements",
    "section": "22.8 Latex new and redefined commands",
    "text": "22.8 Latex new and redefined commands\nA document can include \\newcommand (\\renewcommand, \\newenvironment, \\renewenvironment, \\def,\\let) commands to define abbreviations. For instance some authors introduce a command to produce tuples:\n\\newcommand{\\tuple}{\\langle #1 \\rangle}\n...\n\nThe pair \\tuple{a,b} is...\n\nThe command \\tuple{a,b} then abbreviates \\langle a,b \\rangle which produces \\(\\langle a,b \\rangle\\).\nWe can use these commands, but not put them in {=latex} wrappers.\nBAD:\nheader-includes: |\n  ```{=latex}\n  \\usepackage{fancypkg}\n  \\newcommand{\\tuple}{\\langle #1 \\rangle}\n\nGOOD:\n\n```yaml\nheader-includes: |\n  ```{=latex}\n  \\usepackage{fancypkg}\n\n\n\n* Put in `{=latex}` things that only work in LaTeX. Special packages that can only be imagified in HTML output go there. For example `stmaryrd` is a package often used to get double brackets; it doesn't work in MathJaX and we need to imagify those elements instead. So it goes in `{=latex}`. \n* Put outside of `{latex}` things that Pandoc needs to know about even when generating HTML output. Here the new command needs to be translated whichever output we're generating, so Pandoc needs to know about it. We put it outside of `{=latex}`.\n\n## MathJAX \"Math Input Error\"\n\nError: you're expecting a LaTeX element to be rendered by MathJAX in\nHTML output, but instead MathJAX displays a red-on-yellow \"Math Input\nError\" message.\n\nTo identify the source of the problem, open the HTML in a text editor.\nFind the bit of HTML corresponding to your latex element. It'll be in a\n`math inline` or `math display` span element:\n\n``` html\n&lt;span class=\"math display\"&gt;\\[\\begin{prooftree}\n\\AxiomC{A}\\RightLabel{Id}\n\\UnaryInfC{$A$}\\RightLabel{example, \nRefl}\n\\UnaryInfC{$A$}\n\\end{prooftree}\\]&lt;/span&gt;\n\nCreate an empty math element next to it, e.g.:\n&lt;p&gt;TEST CODE:&lt;/p&gt;\n&lt;span class=\"math display\"&gt;\\[\n\\]&lt;/span&gt;\n\nOpen the file in a browser. Add the contents of the original element line by line, refreshing the browser each time, until you find the bit of code that produces the error. In the example above, for instance, the error was produced by the linebreak:\n\\UnaryInfC{$A$}\\RightLabel{example, \nRefl}\n\nand was fixed when we removed it:\n\\UnaryInfC{$A$}\\RightLabel{example, Refl}"
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#footnotes",
    "href": "chapters/copyediting/241-cop-math-latex.html#footnotes",
    "title": "22  Math and LaTeX elements",
    "section": "",
    "text": "\\ldots is LaTeX code for suspension dots.↩︎\nBecause latin lowercase letters come from handwritten Carolingian letters but latin uppercase letters come from stone-engraved Roman letters, some think that uppercase latin letters shouldn’t be used unless strictly necessary. The same can be said for uppercase/lowercase greek letters.↩︎\nRecall that ~~~ marks code blocks like ```.↩︎\nMathJax is a HTML-embedded script that allows your browser to display most LaTeX-encoded math. When Pandoc converts to HTML in MathJax code, it includes LaTeX code within $...$ and $$...$$ directly in the HTML, and MathJax typesets it. However, MathJax cannot process all LaTeX. It covers most of the standard maths and some special math-related packages like bussproofs for natural deduction. But custom commands, special packages and other advanced LaTeX will result in red text error messages.↩︎"
  },
  {
    "objectID": "chapters/copyediting/25-cop-imagify.html#basic-usage",
    "href": "chapters/copyediting/25-cop-imagify.html#basic-usage",
    "title": "23  Imagify",
    "section": "23.1 Basic usage",
    "text": "23.1 Basic usage\n\n23.1.1 When is imagify needed?\nYou see red text in the HTML output corresponding to some LaTeX code in the original. E.g. \\llbracket in red.\n\n\n23.1.2 Imagify with default settings or specific settings\nYou’ll have to figure out whether you can imagify with default settings alone or whether you need specific settings. Simply try the default settings first, and move to specific ones if that doesn’t work.\nDefault settings work e.g. when you have a bussproof that uses doubleLine, a table, or a Tikz image. Specific settings are required e.g. when the LaTeX uses symbols found in a extra package (double brackets from the stmaryrd package).\nSpecific settings may also be used to fine-tune the image: its vertical alignment, or size (zoom).\n\n\n23.1.3 Imagifying with default settings\nCreate a Div with class imagify:\n\n::: {.imagify} \n\nMixed content here.\n\n:::\n\nThe Div can contain a mix of text and LaTeX elements. So you don’t need to place your Div exactly around the LaTeX bit that needs to be converted, you can take e.g. the paragraph that contains it.\nWithin the Div, any LaTeX element is converted to a separate image:\n\nEvery math formula ($...$, /(.../), $$...$$, /[.../])\nEvery raw LaTeX element, block or inline:\n`...inline latex...`{=latex}\n\n\n\n```{=latex}\n...block latex...\n```\n\nEvery LaTeX command directly inserted into the text:\n... (end of some paragraph).\n\n\\pagebreak\n\n... (begining of some other paragraph)\n\n\nBy default, images are embedded within the HTML document. But Imagify options allow you to save them as separate files instead.\nTikZ. Tikz images start with \\begin{tikzpicture} (sometimes preceeded with \\usetikzlibrary{...}). They should work with default settings. However, you sometimes need to check which “libraries” are loaded. Suppose the original manuscript (in LaTeX) has a preamble with either of the following commands:\n\\usepackage[arrows]{tikz}\n\\usetikzlibrary{arrows}\n\nThen the document is loading a “package” for TikZ images, the arrows package. You need to tell Imagify that it’s used in your particular image. To do so you add the \\usetikzlibrary command at the beginning of the LaTeX code itself:\n\\usetikzlibrary{arrows}\n\\begin{tikzpicture}...\n\n\n23.1.4 Imagify with specific settings\nYou may use specific Imagify settings instead. The best way to do so is to declare an Imagify “class” in the document’s metadata:\nimagify-classes:\n  myclass:\n    header-includes: |\n      \\usepackage{stmaryrd}\n    zoom: 1.6\n\nHere we declare an imagifying class myclass. It uses the LaTeX package stmaryrd (with provides a bunch of symbols like double brackets) and an extra zoom of 1.6 (default is 1.5 or 1.4). You can then use the class by putting content in a Div of that class:\n\n::: myclass\n\n... Mixed content (LaTeX elements here are imagified with those settings)\n\n:::\n\nIt that helps clarity you can also declare the Div both of imagify and myclass:\n\n::: {.myclass .imagify}\n\n...\n\n:::\n\n(Recall that when multiple identifier/classes/attributes are declared we need to use curly brackets and dots at the beginning of classes.)\nClass names rules. It’s a good idea to use if you use “imagify” in the name, perhaps with the name of the author (imagify-smith) or a name related to the particular element to be imagified (imagify-bussproofs). Important: avoid name clashes between two papers in the same issue. E.g. two papers with the same imagify-table class but different class settings in each.\nHow to find out which packages are needed. Sometimes it’s obvious which LaTeX package is needed from the original LaTeX manuscript.\nOften the missing LaTeX is a symbol.Look at the command(s) that are printed in red in HTML output. Suppose you see the \\\\llbracket command, for instance. A good idea is to check whether this command is in the LaTeX Comprehensive Symbols List:\n\nrun texdoc symbols on a Terminal. If you have a rich enough LaTeX distribution installed this will open the LaTeX Comprehensive Symbols List (a large PDF). Otherwise search for it online.\nsearch in the document for your command, e.g. search for llbracket.\nif it shows up, it’ll be in a Table. The table caption tells you which LaTeX package contains the symbol, e.g. “Table 225: stmaryrd Variable-sized Delimiters” tells me that \\llbracket is part of the stmaryrd package.\n\n\nWhen you figure out which LaTeX package is needed to imagify your bit of LaTeX, add it to the relevant imagify class with header-includes.\nSpecifying settings on the Div itself. You can also specify Imagify settings on the Div itself:\n::: {.imagify zoom=\"1.6\" }\n\n...\n\n:::\n\nUnfortunately, you cannot use this to specify LaTeX packages. The following:\n::: {.imagify header-includes=\"\\usepackage{stmaryrd}\" }\n\nis converted by Pandoc into “usepackage{stmaryrd}”, i.e. a backslash symbol followed by the text ‘usepackage’ rather than the actual LaTeX command \\usepackage.\nCascading styles. Imagify settings are applied in a “cascading” order: first the defaults, then those associated with a Div’s class, then those specified on the Div itself. The latter ones override the former.\nIf a LaTeX element is contained within an imagify-class Div that is itself contained in another imagify-class Div, then the settings (class and local) of the first are applied first, then those of the contained one. And so on for multiple containment."
  },
  {
    "objectID": "chapters/copyediting/25-cop-imagify.html#advanced-usage",
    "href": "chapters/copyediting/25-cop-imagify.html#advanced-usage",
    "title": "23  Imagify",
    "section": "23.2 Advanced usage",
    "text": "23.2 Advanced usage\n\n23.2.1 See the LaTeX document used to generate an image\nImagify uses Pandoc’s default LaTeX template to create a document of the standalone class that contains your LaTeX element’s code.\n\nSeveral packages are already included: amsmath, amssymb, etc.\nYour header-includes code is included. To prevent that, set an alternative Imagify header-includes empty in your doc metadata:\nheader-includes: |\n  ... document header-includes ...\nimagify:\n  header-includes: |\n  ... header-includes used by Imagify ...\n\n\nTo see these intermediate LaTeX files, set imagify’s debug option in your document’s metadata:\nimagify:\n  debug: true\n\nThey will be placed in the document folder, or if the folder specified by Imagify’s output-folder option:\nimagify:\n  output-folder: imagify_files\n\nIf Imagify conversion crashes, you can open these files in an editor and figure out which modifications (e.g. additional packages) are needed to make it work.\n\n\n23.2.2 TikZ\nIf \\begin{tikzpicture} or usetikzlibrary appears within the imagified code, Imagify will handle it well.\nIf your code uses TikZ indirectly (e.g., it uses a package that loads TikZ), you normally have to set the tikz classoption:\nimagify:\n  classoption: tikz\n\n\n23.2.3 Additional packages\nYou can use Imagify’s header-includes to provide any LaTeX packages an image needs:\nheader-includes: |\n  ... document header-includes ...\nimagify:\n  header-includes: |\n     ... header-includes used by Imagify ...\n\n\n23.2.4 Imagify classes\nYou can create multiple imagify classes with different options. This allows you to provide different packages for different images:\nimagify:\n  classes:\n    fitchproof:\n      header-includes: |\n        ```{=latex}\n        \\usepackage{fitch}\n        ```\n    bussproof:\n      header-includes: |\n        ```{=latex}\n        \\usepackage{bussproofs}\n        ```\n\nAll of Imagify’s rendering options (zoom, pdf-engine, embed, etc.) work under these classes too."
  },
  {
    "objectID": "chapters/copyediting/25-cop-imagify.html#brief-notes",
    "href": "chapters/copyediting/25-cop-imagify.html#brief-notes",
    "title": "23  Imagify",
    "section": "23.3 Brief notes",
    "text": "23.3 Brief notes\n\n23.3.1 mdframed\nSet-up for using the mdframed package:\n\nWill crash if you don’t provide the varwidth=... standalone class option.\nWill crash if you provide the tikz option, even though it uses tikz.\n\nimagify-framed: # varwidth, no TikZ even though mdframed uses it\n  classoption: varwidth=3.5cm\n  header-includes: |\n    ```{=latex}\n    \\usepackage[framemethod=TikZ]{mdframed}\n    ```"
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#paragraph-starts-with-1-or-1.-or-some-other-list-code",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#paragraph-starts-with-1-or-1.-or-some-other-list-code",
    "title": "24  Trouble and troubleshooting",
    "section": "24.1 Paragraph starts with ‘(1)’ or ‘1.’ or some other list code",
    "text": "24.1 Paragraph starts with ‘(1)’ or ‘1.’ or some other list code\nProblem. you have a paragraph or blockquote starting with (1) or 2) or 3.. Pandoc thinks it’s a list, but it’s not.\nSolution. Escape the parenthesis or dot that follows the number.\n\n\n\n\n\n\n\nI TYPE\nI GET\n\n\n\n\n(1) This is interpreted\nas a list item.\n\n3. And so is this.\n\nThis is interpreted as a list item.\n\n\n\nAnd so is this.\n\n\n\n(1\\) This isn't interpreted\nas a list item.\n\n3\\. This isn't either.\n(1) This isn’t interpreted as a list item.\n3. This isn’t either."
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#if-pdf-generation-doesnt-work",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#if-pdf-generation-doesnt-work",
    "title": "24  Trouble and troubleshooting",
    "section": "24.2 If PDF generation doesn’t work",
    "text": "24.2 If PDF generation doesn’t work\nMake sure first that you’ve checked the advice in the “how to produce outputs” sections.\nPDF generation happens in two stages. Identify which one fails:\n\nMarkdown to LaTeX (the Pandoc stage)\nor LaTeX to PDF (the LaTeX stage)\n\n\nYou do so by trying to generate a LaTeX (.tex) output. If that fails, there’s an error at the Pandoc stage, otherwise (more commonly, unfortunately) the error is at the latex stage.\nPandoc-stage errors are mostly due to:\n\nFaulty YAML metadata.\n\nYAML parse exception at line 453.. your YAML is not well formatted. See the metadata section.\nEven if you don’t get the YAML parse error, there might be some formatting error around line breaks or identation. Check multiline fields and nested fields of maps/lists.\nSome YAML value isn’t correct and makes a filter crash.\n\nFile not found. File not found in resource path error, see below.\nA bug in one of the “filters” that we use to handle various typesetting tasks (e.g. statements). You will see the name lua in the error message.\nFaulty LaTeX template. Cannot compile the template error. There’s an error in the house template.\n\n\nLaTeX stage errors are due to a multitude of causes. You can learn more about the error by running your pdf engine on the LaTeX output:\nlualatex article.tex\n\nFor lualatex; replace with pdflatex or xelatex depending on your setup.\nOnce you run LaTeX a detailed log of its action rolls out—faster than you can read. The error message will be close to the end and look like this:\nError/Warning (...) Error: MESSAGE\n\nType  H &lt;return&gt;  for immediate help.\n ...                                              \n                                                  \nl.3984       {See the manual for further details.}\n\nThe l.3984 is the line of the LaTeX file where the error arose. (Not necessarily the line that caused it! The cause might be earlier in the code, though not later.) You can go to that location in your LaTeX file and investigate.\nYou can place the LaTeX run log in a file if you want to examine it in a text editor rather than the terminal:\nlualatex article.tex &gt; latex_log.txt"
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#word-manuscript-with-many-symbols-phi-psy-greek-letters-logical-symbols.",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#word-manuscript-with-many-symbols-phi-psy-greek-letters-logical-symbols.",
    "title": "24  Trouble and troubleshooting",
    "section": "24.3 Word manuscript with many symbols (phi, psy, greek letters, logical symbols,).",
    "text": "24.3 Word manuscript with many symbols (phi, psy, greek letters, logical symbols,).\nIf the symbols aren’t in MS Word Equations, they will be preserved as is in markdown - and the document won’t work. All the symbols have to converted into LaTeX formulas. A tip:\n\nUse search and replace in RStudio to convert each symbol in its &gt; LaTeX equivalent.\nThen go through the document to enclose each of them in $...$ (to &gt; indicate maths formulas)."
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#reverse-conversion-.md---.tex",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#reverse-conversion-.md---.tex",
    "title": "24  Trouble and troubleshooting",
    "section": "24.4 Reverse conversion .md -> .tex",
    "text": "24.4 Reverse conversion .md -&gt; .tex\n\n\n\n\n\n\n\n\nI want\nI type\nLaTex\n\n\n\n\nBasic\n(Smith, 2012)\n(Smith, 2012, 2015)\n(Smith 2012; Jones 2015)\n(Smith 2012, 205)\n(see Smith 2012, 205)\n(Smith 2012, 205-210, 235)\n(Smith 2012, 28; Jones 2015, 2017)\n(see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58)\n[@Smith2012]\n[@Smi th2012;@Smith2015]\n[@Smi th2012;@Jones2015]\n[@Smith2012, 205]\n[see @Smith2012, 205]\n[@Smith2012, 205--210, 235]\n[@Smith2012, 28; @Jones2015; @Jones2017]\n[see @Smith2018, 28; comp. @Jones2015, 28; also @Jones2017, 45--48].\n\\citep{smith:2012}\n\\citep{sm ith:2012,smith:2015}\n\\citep{sm ith:2012,jones:2015}\n\\cite p[205]{smith:2012}\n\\citep[see\n][205]{smith:2012}\n\\citep[205--2 10,235]{smith:2012}\n(Smith \\citeyea r[28]{smith:2012}; Jones \\citeyear{jon es:2015,jones:2017})\n(see Smith \\citeyea r[28]{smith:2012}; comp. Jones \\citeyea r[28]{jones:2015}; also Jones \\citeyear[45 --58]{jones:2017})\n\n\nInline\nSmith (2012) says that\nSmith (2012, 205) says that\nSmith (2012; 2015, 205) says that\nPeregrin & Svoboda (2013, 2016, 2017, and also Read, 2018)\nAlternatively, you can type the name and use year-only:\nSmith (2012; 2015)\n@Smith2012 says that\n@Smith2012 [205] says that\n@Smith2012 [@Smith2015, 205] says that\n@pe regrin-svoboda:2013a [@pe regrin-svoboda:2016;\n@pe regrin-svoboda:2017; and also @read_s:2000]\nSmith [-@Smith2012, @Smith2015]\n\\citet{smith:2012} says that\n\\cite t[205]{smith:2012} says that\nSmith (\\c iteyear{smith:2012}, \\citeyea r[205]{smith:205}) says that\n\\citet[][and also Read \\citeyear{r ead_s:2000}]{peregr in-svoboda:2013,pere grin-svoboda:2016,pe regrin-svoboda:2017}\nPeregrin \\& Svoboda (\\citeyear{peregri n-svoboda:2013,pereg rin-svoboda:2016,per egrin-svoboda:2017}, and also Read \\ci teyear{read_s:2000})\n\n\nYear only\nSmith makes an outrageous claim (2015, 277).\nSmith keeps repeating himself (2012, 2013, 2014, 2015).\nSmith said this in a few places (2012, 20; 2013, 30)\nSmith makes an outrageous claim [-@Smith2015, 277].\nSmith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015].\nSmith said this in a few places [-@Smith2012, 20; @Smith2013, 30].\nSmith makes an outrageous claim (\\citeyear\n[277]{smith:2015}).\nSmith keeps repeating himself (\\citeyear{smith :2012,smith:2013,smi th:2014,smith:2015})\nSmith said this in a few places (\\citeyea r[29]{smith:2012}, \\citeyear [30]{smith:2013})."
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#file-not-found-in-resource-path",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#file-not-found-in-resource-path",
    "title": "24  Trouble and troubleshooting",
    "section": "24.5 File not found in resource path",
    "text": "24.5 File not found in resource path\nFile mydefaults.yaml not found in resource path\n\nThe file mydefaults.yaml is absent or not at the place expected. Check whether the relative locations of your article, master and template are correct.\nFile  not found in resource path\n\nPandoc is looking for a file with no name. Check if you don’t have an emtpy bibliography field in the metadata."
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#htmlmathjax-math-mode-letter-in-heading-not-showing",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#htmlmathjax-math-mode-letter-in-heading-not-showing",
    "title": "24  Trouble and troubleshooting",
    "section": "24.6 HTML/MathJax: Math-mode letter in heading not showing",
    "text": "24.6 HTML/MathJax: Math-mode letter in heading not showing\nPROBLEM: a Math-mode letter (e.g. \\(\\alpha\\)) is not showing in a heading in HTML/MathJax output.\nSOLUTION. Is your CSS using a font variant, e.g. small-caps? Make sure Spans of the math-inline class are in regular shape and variant."
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#missing-character",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#missing-character",
    "title": "24  Trouble and troubleshooting",
    "section": "24.7 Missing character",
    "text": "24.7 Missing character\n[WARNING] Missing character: There is no SPECIAL-CHAR (U+2192) in font FONT\n\nMeans that your markdown file include a character SPECIAL-CHAR that is not available in the font you use. Typically, SPECIAL-CHAR is a symbol or character from non-latin languages. Note that you might not see anything where SPECIAL-CHAR is above, if the character in question is a (special kind of) space or if it’s not present in the font in which this warning is printed.\nSolution: if SPECIAL-CHAR is visible you can copy it, and search it in your markdown file. Remove it and if needed replace it with some character that is present in your font. Typically, this involves replacing a unicode symbol (a right arrow) by its LaTeX equivalent, e.g. \\(\\rightarrow\\).\nSolution: if SPECIAL-CHAR is not visible, look up the unicode number (e.g. U+2192 online) to see what character is it, and hunt it down in your markdown manuscript."
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#yaml-parse-exception",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#yaml-parse-exception",
    "title": "24  Trouble and troubleshooting",
    "section": "24.8 YAML Parse exception",
    "text": "24.8 YAML Parse exception\nError message: PandocParseError \"YAML parse exception at line 2, column 2:\\nmapping values are not allowed in this context\"\nSolution: this is probably due to several --- lines in your source markdown. The text in between might be interpreted as an additional YAML metadata block by Pandoc. Replace them with a longer dash sequence, e.g ------."
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#attempt-to-compare-nil-with-number",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#attempt-to-compare-nil-with-number",
    "title": "24  Trouble and troubleshooting",
    "section": "24.9 attempt to compare nil with number",
    "text": "24.9 attempt to compare nil with number\nError:\nwarning  (node filter): error: ...e/2022/texmf-dist/tex/generic/babel/babel-bid\ni-basic.lua:155: attempt to compare nil with number\n\nThis bug can be produced by a statement with a custom label containing an uppercase letter followed by a dash, such as:\n::: statement\n__L-a__. This statement might generate an error!\n:::\n\nFix. Surround the dash with spaces\n::: statement\n__L - a__. This will not generate an error.\n:::\n\nA longer dash probably looks better:\n::: statement\n__L -- a__. This will not generate an error.\n:::"
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#hard-coded-latex-table-undefined-control-sequence",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#hard-coded-latex-table-undefined-control-sequence",
    "title": "24  Trouble and troubleshooting",
    "section": "24.10 Hard-coded LaTeX table: Undefined control sequence",
    "text": "24.10 Hard-coded LaTeX table: Undefined control sequence\nWe hard-coded a complex LaTeX table but used markdown to include a link target in the caption:\n::::: {.only-in-format .latex}\n\n`\\begin{longtable}{ccc}`{=latex}\n`\\caption{`{=latex}Numbers to prove [this idea]{#idea}.`}\\\\`{=latex}\n\n\n``` {=latex}\n \\hline\n    header & header & header \\\\\n  \\hline\n  ... table rows \\\\\n \\hline\n\\end{longtable}\n```\n\n\n:::::\n\nWe got a “Undefined control sequence” for an obscure command (HyperRaiseLinkLength) that doesn’t appear in the pandoc-generated LaTeX. The cause is that Pandoc inserts a \\phantomsection command before the link target:\n\\begin{longtable}{ccc}\n\\caption{Numbers to prove \\phantomsection\\label{idea}{#idea}.} \n\nWhich cannot be inserted within table captions.\nSolution. Redefine \\phantomsection to nothing (or \\relax) within the scope of this table. Note that we wrap the entire table within {...} to ensure that \\renewcommand only affects this table, not the rest of the document:\n::::: {.only-in-format .latex}\n\n\n\n``` {=latex}\n{\n\\renewcommand{\\phantomsection}{}\n\\begin{longtable}{ccc}\n```\n\n\n`\\caption{`{=latex}Numbers to prove [this idea]{#idea}.`}\\\\`{=latex}\n\n\n``` {=latex}\n \\hline\n    header & header & header \\\\\n  \\hline\n  ... table rows \\\\\n \\hline\n\\end{longtable}\n```\n\n\n:::::"
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#a-list-of-things-that-cause-trouble",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#a-list-of-things-that-cause-trouble",
    "title": "24  Trouble and troubleshooting",
    "section": "24.11 A list of things that cause trouble",
    "text": "24.11 A list of things that cause trouble\nSome hurdles that beginning copyeditors typically face.\n\n24.11.1 Visual editor RStudio\n\nDoes not preserve numbered examples code (all processed).\nTables: Doesn’t preserve code (not pipe format -&gt; loss of cell &gt; alignment)\nInterprets \\[ and \\] as display maths.\n\nSolution: do not escape the [ ]. Only possible problem: it &gt; picks up a section label. But I think you can change the title &gt; in section labels.\n\n\n\n\n24.11.2 Pandoc\n\nLaTeX encoding of tables is heavy (every cell is a minipage! &gt; Specifies detailed widths)\nTables: no colspan nor rowspan yet\nIndented blocks (statements, arguments, …) and AMS theorems\nHTML default encoding of formulas uses unicode + italics + “math &gt; inline” custom style class. Use --mathjax flag; adds a link to &gt; mathjax.js in the head so this should be present on the website &gt; (or unnecessary if the galley has its own head). See pandoc &gt; manual on maths in &gt; html &gt; .\n\n\n\n24.11.3 LaTeX\n\nStandard logic symbols: \\neg, \\lnot, \\land, \\lor, \\sim all well &gt; supported in MathML? (Not a big worry!)"
  },
  {
    "objectID": "chapters/copyediting/29-cop-markdown-cheatsheet.html#inline-elements",
    "href": "chapters/copyediting/29-cop-markdown-cheatsheet.html#inline-elements",
    "title": "25  Markdown Cheatsheet",
    "section": "25.1 Inline elements",
    "text": "25.1 Inline elements\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nAn emphasized word.\nAn *emphasized* word.\nAn _emphasized_ word.\n\n\nSome strong emphasis.\nSome **strong emphasis**.\nSome __strong emphasis__.\n\n\nA sub1 script and a sup1 script (when attached to plain text words).\nA sub~1~ script and a sup^1^ script.\n\n\nWith \\(p_1\\) and \\(p^2\\) the sub(sup)scripts are in math formulas.\nWith   $p_1$ and $p^2$ the ..."
  },
  {
    "objectID": "chapters/copyediting/29-cop-markdown-cheatsheet.html#block-elements",
    "href": "chapters/copyediting/29-cop-markdown-cheatsheet.html#block-elements",
    "title": "25  Markdown Cheatsheet",
    "section": "25.2 Block elements",
    "text": "25.2 Block elements\n\n\n\n\n\n\n\nParagraph\nLeave an empty line to separate two paragraphs\n\n\nUnindented paragraph (following equation, quotation)\n\\noindent This new paragraph...\n\n\n1. Section heading\n# Section title\nDo not put a number: the house style should add numbers.\n\n\n1.2 Subsection heading\n## Subsection title\n\n\n1.2.1 Subsubsection title\n\nlower titles\n### Subsection title\n####, #####, ######\n\n\nQuotations\nNote: only use this for genuine quotations, not to indent blocks.\n&gt; Start each line with `&gt;`\n&gt; This is a quotation\n&gt; with two lines\n\n\nStatement (indented block)\nThese lines are going to be indented\nFirst Principle (FP). Everything is what it is.\nSee below on how to cross-refer to statements.\n::: statement\nThese lines are going to\nbe indented.\n:::\n\n::: {.statement}\n*First principle* (**FP**).\nEverything is what\nit is.`\n:::\n\n\n\n\n25.2.1 Citations\nCitations are a more difficult aspect of markdown. You should read the chapter on copyediting citations before you use this cheatsheet.\nFor the following we assume that your document’s bibliography has keys (identifiers) Smith2012, Jones2017 for Smith’s 2012 article, Jone’s 2017 articles, and so on.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nBasic\n(Smith, 2012)\n(Smith, 2012, 2015)\n(Smith 2012; Jones 2015)\n(Smith 2012, 205)\n(see Smith 2012, 205)\n(Smith 2012, 205-210, 235)\n(Smith 2012, 28; Jones 2015, 2017)\n(see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58)\nNote: whether you get ‘;’ or ‘,’ or ‘:’ separators between several citations should be specified and handled automatically by the template.\n[@Smith2012]\n[@Smith2012; @Smith2015]\n[@Smith2012;@Jones2015]\n[@Smith2012, 205]\n[see @Smith2012, 205]\n[@Smith2012, 205\\--210, 235]\n[@Smith2012, 28; @Jones2015; @Jones2017]\nsee @Smith2018, 28; comp. @Jones2015, 28; also @Jones2017, 45\\--48]\n\n\nInline (note: should with latest RStudio visual mode, but read warning below)\nSmith (2012) says that\nSmith (2012, 205) says that\nInline several papers by same author, you format the first inline and the rest regular:\nSmith (2012; 2015, 205) says that\nPeregrin & Svoboda (2013, 2016, 2017, and also Read, 2018)\nAlternatively, you can type the name and use year-only:\nSmith (2012; 2015)\n@Smith2012 says that\n@Smith2012 [205] says that\n@Smith2012 [@Smith2015, 205] says that\n@peregrin-svoboda:2013a [@peregrin-svoboda:2016;\n@peregrin-svoboda:2017; and also @read_s:2000]\nSmith [-@Smith2012, @Smith2015]\n\n\nYear only\nSmith makes an outrageous claim (2015, 277).\nSmith keeps repeating himself (2012, 2013, 2014, 2015).\nSmith said this in a few places (2012, 20; 2013, 30)\nSmith makes an outrageous claim [-@Smith2015, 277].\nSmith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015]\nSmith said this in a few places [-@Smith2012, 20; @Smith2013, 30].\n\n\n\nCommon errors:\n\n\n\n\n\n\n\nBad\nGood\n\n\n\n\nCode:\n(See for instance [@Smith2015]).\n(See for instance @Jones2018).\nOutput:\n(See for instance (Smith, 2015)).\n(See for instance Jones (2018)).\nCode:\n[See for instance, @Smith2015]\nOutput:\n(See for instance Smith, 2015).\n\n\nCode:\nSee f o r instance @Smith2012; @Smith2015.\nOutput:\nSee for instance Smith (2012); Smith (2015).\nCode:\nSee for insta n ce Smith [-@Smith2012; @Smith2015]\nOutput:\nSee for instance Smith (2012, 2015).\n\n\nSpace after a formula marker $:\nCode:\n$ \\Delta \\rightarrow \\Phi $ | Output:\nError, missing $ at line…\nCode:\n$\\Delta \\rightarrow \\Phi$\nOutput:\n\\(\\Delta \\rightarrow \\Phi\\)"
  },
  {
    "objectID": "chapters/dialectica/60-dialectica-house-outputs.html#setting-up-your-system",
    "href": "chapters/dialectica/60-dialectica-house-outputs.html#setting-up-your-system",
    "title": "26  Dialectica house style outputs",
    "section": "26.1 Setting up your system",
    "text": "26.1 Setting up your system\n\n26.1.1 Pre-requisites\nYou will need the following (2 to 8 Gb disk space):\n\nPandoc version 3+. ~240Mb\nA LaTeX distribution.1 ~200Mb (custom) to ~5Gb (full)\nFonts: STIX Two, Libertinus (incl. Libertinus Display) and VenusSBExtended available in dialectica-workhouse/resources/fonts. &lt;1Mb\nOn MacOS, Apple’s Command line tools for Xcode. ~2.5Gb\n(Optional but recommended) RStudio, a markdown editor with a visual mode, a built-in terminal, and the ability to run scripts that generate HTML / PDF versions of your manuscript. ~1Gb\n(Optional but recommended) on Windows, latexmk, a command-line program we use to generate PDFs. It is part of LaTeX but not always installed by default. ~100Mb, if you need to install Perl\n\n\n26.1.1.1 How to check what’s installed\nTo check whether Pandoc, LaTeX and latexmk are installed, you can run the following on a terminal (see Appendix -Appendix A on how to do this). For Pandoc:\npandoc -v\n\nFor LaTeX:\npdflatex -version\n\nFor latexmk:\nlatexmk -v\n\nIf you get error messages, they are not installed. If you get version numbers, they are installed. This works on all systems.\n\n\n\n26.1.2 MacOS only\nTo install Apple’s Command Line Tools. This is necessary even if you’re not going to use the command line your self: it installs the software needed to run the “scripts” (short instruction files) that render our outputs. Open the Terminal (in Applications &gt; Utilities), type the following and hit Enter:\nxcode-select --install\n\nIf you get the error message “command line tools already installed”, it’s already installed, you can close the terminal. Otherwise it will download and install for some time. When it’s finished, close the terminal.\n\n\n26.1.3 Optional: install tools with a package manager\nPackage managers are tools to install and update software. Typically terminal tools see A but Linux has graphical ones too.\n\nAt installation time, they spare you looking up the software’s website, downloading, running the installer. Instead you just run a simple command like choco install pandoc on the terminal and the manager installs Pandoc for you.\nLater, they allow you to update all the software you’ve installed with them at once. No need to go back to the websites, download again etc. You run a command like choco upgrade all.\nLess relevant for us: it handles ‘dependencies’, ie if the software you’re installing needs another, it’ll install the latter too.\n\n\nFor instance on MacOS you’d install LaTeX, Pandoc and RStudio by typing just one command on the terminal: brew install mactex pandoc rstudio.\n\nOn Linux, there’s a package manager pre-installed and you’ll probably know what it is. In “Debian” distributions, Ubuntu included, it’s APT (apt-get install pandoc). There are graphical user interfaces for it: Software center in Ubuntu, Synaptic in Linux Mint, and others.\nOn MacOS, install Homebrew. Note: sometimes you’ll see --cask in the command (compare brew install pandoc vs brew install –cask rstudio). The rule of thumb is that graphical programs are --cask, command line programs aren’t. But don’t worry, if you omit --cask the installation typically works anyway. You can formally check whether it’s needed by searching the software on homebrew’s depository.\nOn Windows, install Chocolatey. Important: don’t forget that it can’t be run in the basic CMD terminal but only in the “Windows Powershell” with administrator privileges. Search it in the start menu, right-click and chose “Run as administrator”.\n\n\nIf unsure what the package name of some software is you can search it online (e.g. “Ubuntu package texlive”). It’ll probably land you on the right page of their online package lists: debian, ubuntu, homebrew, chocolatey.\n\n\n26.1.4 Common to all platforms\n\n26.1.4.1 Pandoc\nDownload and install from Pandoc’s website.\nCommand line users: run brew install pandoc (MacOS, Homebrew), choco install pandoc (Win, Chocolatey) or apt-get install pandoc (APT, Linux) in a terminal.\n\n\n26.1.4.2 LaTeX\nUse either MikTeX or TexLive (whose Mac version is called MacTeX).\n\nFor MikTeX: download the installer, launch it. Select “install only for this user”, and for installing packages on the fly, select “Ask me first”.\nFor TexLive, non-Mac: download the network installer, launch it. When/if offered the choice, choose to install “all” or “everything”. This can take ~30 minutes depending on download speed.\nFor TexLive, Mac users: download the installer.\n\n\nMikTeX’s advantage is that it downloads any needed packages on the fly, so it’s quicker to install and will get whatever you need. So be aware that if you use MikTeX, you first PDFs generation will open a window asking you to confirm the download of packages and take a long time as MikTeX download missing pages. Don’t worry, subsequent PDF generations are much faster.\nTexLive’s full install is large (5Gb) and takes ~30 mins but you’re done once and for all—well, for one year, as it is updated yearly.\nCommand-line users:\n\nHomebrew: brew install --cask mactex. Cannot install MikTeX (as of Jan 2023). MikTeX doesn’t need brew anyway, it self-updates.\nChocolatey: choco install miktex or choco install texlive --params \"'/scheme:full'\".\nLinux: depends on package managers, e.g. sudo apt-get install miktex or sudo apt-get install texlive-full. However, you might need to add ‘Software sources’ to do this: see e.g. the MikTeX webpage.\n\n\n\n26.1.4.3 Fonts\nDialectica’s fonts are located in dialectica-workhouse\\resources\\fonts. Open a file browser and navigate to the folder of a desired font (for Stix Two, STIX Two fonts\\OTF). Select all the files and, depending on system:\nTo install fonts, open the Finder and navigate to the folder where the fonts are located (dialectica-workhouse/resources/fonts). Open the folder of the desired font (for Stix Two, STIX Two fonts/OTF). Double-click each file there (regular, italic, bold, …), and in the windows that appear, select “Install font”. You can check that the fonts are installed by opening the Font Book (in the Applications folder, or Cmd + Space and search for Font Book) and selecting the User tab.\n\n(Windows) right-click and select “Install fonts”,\n(Mac) Enter or right-click &gt; Open. Select “Install font” in the windows that open. You can check that they are installed by opening the Font Book app.\n(Linux) depends on distribution. On Ubuntu, for instance, double-click on the font files opens a font viewer with the option to install. If that doesn’t work on your distribution, try an online search.\n\n\n\n26.1.4.4 RStudio (optional)\nSee RStudio’s download page for installation instructions. Command line users also install it with package managers (e.g. brew install rstudio). RStudio needs R (a statistics programming language), so you might need to install it too (e.g. brew install r rstudio).\nWhen installed, note that RStudio includes:\n\na file browser on the left\na terminal at the bottom, under the ‘Terminal’ tab. (The ‘Console’ is something else).\nwhen editing markdown files, the Source and Visual tabs at the top left of the editor. These allows you to edit files in visual mode rather than markdown. Limitation: the visual mode can’t be used if the manuscript contains “numbered examples lists”.\nwhen editing markdown files, an ‘Outline’ panel on the right side of the editor. Useful to navigate a manuscript.\n\n\nRStudio might be intimidating at first: it’s not a word processor but a “development environment” for the statistics programming language R. It’s not just used to write programs, however, but also write documents that embed compuations: a webpage with a graph that is daily updated, or a scientific article that includes algorithms and data to reproduce its results. So don’t worry: you will mostly be using its markdown editor here, which is powerful but simple. Some of the development features are handy too, like the file browser and the ability to run scripts to generate our outputs."
  },
  {
    "objectID": "chapters/dialectica/60-dialectica-house-outputs.html#prepare-an-article-or-issue-folder",
    "href": "chapters/dialectica/60-dialectica-house-outputs.html#prepare-an-article-or-issue-folder",
    "title": "26  Dialectica house style outputs",
    "section": "26.2 Prepare an article or issue folder",
    "text": "26.2 Prepare an article or issue folder\nYou’ll need to add a few files to your article working folder to be able to generate outputs.\n\nA ‘maker script’, i.e. a mini program that tells the computer how to generate your outputs.\nThis is the file titled make.sh.\nA master file, which contains issue-level metadata needed to generate your article outputs.\n\n\n26.2.1 Ensure your folder contains the maker script\nCheck whether your working article folder contains a file title make.sh. If it does, you’re good.\nIf it doesn’t, you should make a copy of it in your work article folder. You can find it in template/X.X/copyeditors-scripts, where X.X stands for the most recent template version. (That is the highest you find, e.g. 1.2.) But this file is the same for each article and issue that uses the same version of the Dialectica template, so you can also copy it from other article folder in the same year.\nBeware of copying make.sh from an article folder, not the issue folder that contains it. (Article-folders make.sh tell the computer: go three folder up and find the template engine; issue-folders make.sh tell it: go two folders up and find the template engine; that’s why issue maker files don’t work in article folders and conversely.)\n\n\n26.2.2 Create a master file\nCopy a master.md file into your article folder. You can take one from another article in the same issue, or the template one at template/X.X/copyeditors-scripts. Beware: you can take the master file in the issue folder, but if you do so you’ll need to modify paths in the imports field (see below).\nOpen the file in text editor. It should already contain an imports metadata field that consists of a list of one or more files (each item on a single line starting with a dash), for instance:\nimports:\n- 01-author.md\n- 02-author.md\n\nYou should amend it to contain just one item referring to your file. If your markdown file is smith_j-2023.md you should make it:\nimports:\n- smith_j-2023.md\n\nNote on issue master files. Issues have master files too, where located in issue folders. Their imports field normally contain a list of all article files for that issue, including which subfolder they’re in, for instance:\nimports:\n- 01-jones/jones_s-2023.md\n- 02-smith/smith_j-2023.md\n- ...\n\nTherefore, if you copy an issue master file within an article folder, or the other way round, you should make sure you add (issue master file) or remove (article master file) the subfolders names as required."
  },
  {
    "objectID": "chapters/dialectica/60-dialectica-house-outputs.html#generate-outputs",
    "href": "chapters/dialectica/60-dialectica-house-outputs.html#generate-outputs",
    "title": "26  Dialectica house style outputs",
    "section": "26.3 Generate outputs",
    "text": "26.3 Generate outputs\n\n26.3.1 With RStudio on Windows\nOn Windows, you might be able to generate outputs from RStudio directly without running a command. If that fails, skip to the next sections and run a command instead.\nSetup. In RStudio, open your article’s project and go to the menu Build &gt; Configure Build Tools. Enter the following choices:\n\nProject build tools: “Makefile”\nMakefile directory: leave as default (Project Root).\nAdditional argument: empty to generate html, or any of the rendering commands detailed below Section 28.3.3.\n\n\nGenerate. Once that is done, go to Build &gt; Build all (or use Shift-Ctrl + B) to generate the desired output.\nGo back to Build &gt; Configure Build Tools if you want to change the format you’re generating, e.g. enter offpdf —proof in Additional argument to generate a proof PDF.\n\n\n26.3.2 Run a command in the terminal\nIn all systems, you can generate outputs by running the sh make.sh command in a terminal.\n\nIn RStudio, if you’ve created a project for your article, it’s best to use the Terminal within RStudio itself. See Tools &gt; Terminal. This terminal will be “located in” the project’s folder, so you can just take sh make.sh to generate a html output.\nIf you’re using a separate terminal application, you’ll need to “navigate” to the folder where your article is. See Appendix A for help.\n\n\n\n26.3.3 Short rendering commands\nRendering commands can be executed in a article’s folder or in an issue folder. All these commmands must be added to sh make.sh, e.g.:\nsh make.sh offprints\n\nor used in the “additional argument” of RStudio’s configure build tools in Windows, as explained above.\nSingle-article outputs will be named after the source file, e.g. smith_j-2020.pdf. Issue outputs will be named after the issue DOI, e.g. dial.v74.i1.pdf or dial.v75.i2-book.pdf.\n\nArticle folder rendering commands\n\n\n\n\n\n\nCommand\nOutput\n\n\n\n\n(empty)\narticle in HTML\n\n\noffpdf\noff1pdf\narticle in PDF\n\n\nofftex\noff1tex\narticle in LaTeX. Useful to debug when the PDF generation crashes: try lualatex smith_j-2020.tex to see error messages.\n\n\nrefs\ngenerate a list of references cited in the article. Saved as &lt;article_name&gt;.bib.txt. Only works when the references have been turned into citations and a bibtex file is provided.\n\n\n\n\nIssue folder rendering commands\n\n\n\n\n\n\nCommand\nOutput\n\n\n\n\n(empty)\nfirst article in HTML\n\n\nall\nissue pdf, all articles PDF + HTML\n\n\nallhtml\nall offprints (=articles) in HTML\n\n\noffprints\noff\nall offprints HTML and PDF\n\n\nvol\nvolpdf\nissue PDF\n\n\noff2\noff2html\nHTML of the second article (i.e. second item in the masterfile’s imports list).\n\n\noff2pdf\nPDF of the second article (i.e. second item in the masterfile’s imports list).\n\n\noff7tex\nLaTeX of seventh article\n\n\nvoltex\nLaTeX of the issue\n\n\nrefs\ngenerate list of references cited for each article. Saved as &lt;article_name&gt;.bib.txt. Only works when for articles where references have been turned into citations and given in bibtex files.\n\n\nbare\nbaretex\nIssue covers only, PDF (bare) or LaTeX (baretex). articles (also baretex). Useful for cover design.\n\n\n\n\n\n26.3.4 Rendering options\n\nProof mode\n\nAdd --proof or -p at the end of your command (separated by a space):\n\n\nsh make.sh off2 --proof\nsh make.sh off3pdf -p\n\n\nThis only affects PDF output.\n\nVerbose or quiet\n\nAdd --verbose or -v to get a detailed log of the rendering process. Useful for debug. You can save the output in a log file like so:\nsh make.sh off2pdf -v 2&gt; out.log \nThe 2&gt; tells the computer to “redirect” the error/information output to a file named out.log. This works in Windows and Linux / MacOS terminals.\nYou can make the output quieter with --quiet or -q. Though certain programs executed during the rendering process may still display error or output messages. If you don’t want to see anything just “redirect” the output to a file with sh make.sh … 2&gt; out.log.\n\n\n\nSingle letter options can be combined: -pv is short for --proof —verbose.\n\n\n26.3.5 Long rendering commands\nRendering commands can also be given in key-value form:\nsh make.sh mode=offprint chapter=3 format=pdf\n\nmode includes “offprint” aka “off”, “vol” aka “issue”, “bare” , “refs”\nformat includes pdf, html, tex aka latex (also epub, jats but we don’t generate these yet)\nchapter includes chapter numbers.\n\n\nThe advantage is that you can specify multiple modes and formats separated by commas:\nsh make.sh mode=off,refs chapter=3,4,5\n\nRendering options like --proof can be combined with long rendering commands."
  },
  {
    "objectID": "chapters/dialectica/60-dialectica-house-outputs.html#advice-on-html-vs-pdf",
    "href": "chapters/dialectica/60-dialectica-house-outputs.html#advice-on-html-vs-pdf",
    "title": "26  Dialectica house style outputs",
    "section": "26.4 Advice on HTML vs PDF",
    "text": "26.4 Advice on HTML vs PDF\nHTML is best when you start working on an article because it’s much faster and less error-prone than PDF. HTML only fails to produce an output if your document’s metadata is ill-formed or if there’s a bug in the “filters” we use to format outputs.\nPDF is best for the latter typesetting stages when you need to check that the fine-grained outputs look right, that advanced LaTeX formulas or images work correctly, that there is no awkward page break and so on."
  },
  {
    "objectID": "chapters/dialectica/60-dialectica-house-outputs.html#footnotes",
    "href": "chapters/dialectica/60-dialectica-house-outputs.html#footnotes",
    "title": "26  Dialectica house style outputs",
    "section": "",
    "text": "LaTeX is called a ‘distribution’ or ‘installation’ because it’s not a single program but a large collection of programs and ‘packages’ that work together to generate PDFs.↩︎"
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "",
    "text": "28 Generating outputs\nBy “Terminal” we mean a command line interface. See Appendix -Appendix A on how to use it.\nAll file paths are given relative to the base (“root”) of Dialectica’s workhouse folder. For instance:\nis the make.sh file contained in the scripts folder contained in the 1.1 folder contained in the template folder within the dialectica workhouse folder.\nNote for Windows users: paths are noted in the Linux / MacOS style with a forward slash / separator. In Windows this would be a backslash \\ instead:"
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#setting-up-your-system",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#setting-up-your-system",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "27.1 Setting up your system",
    "text": "27.1 Setting up your system\nDialectica copyediting requires:\n\nGit, to clone the repository of the compilation environment\nDocker, to run a container containing the actual environment\nVSCode, to connect to and use the container\n\n\nBriefly put, to set up, you need to install git and docker, and then be able to connect to a running container using the VSCode extension “Dev Containers”. How to do this up will depend on your specific Operaitng System. If you know how to do this on your own, just skip the steps below and go chapter 3. Note that VSCode replaces RStudio as a more modern general text editor, better suited to interact with modern software tools (such as docker) and languages other than R (such as Markdown, LaTeX, and HTML).\nFor any problem not covered here, please contact Luis Bordo at luis.bordo@philosophie.ch.\n\n27.1.1 Installing git, docker, VSCode\nThe following instructions need to be executed only once per machine. Here we will install and set up Docker, Git, and VSCode in your machine.\n\n27.1.1.1 Windows\n\nDownload and install git\nCheck that git is working in PowerShell. If you get no errors with the command below, then git is working correctly:\n\ngit --version\n\nDownload, install, and open Docker Desktop\n\nWhen installing Docker, choose the option to use WSL 2\n\nOpen PowerShell (you have it installed by default) and check that you have wsl version 2 or above with\n\nwsl --version\n\nIf you don’t, do wsl --install, wait, and do again wsl --version\nIf you still don’t have wsl version 2 or above, go to the Troubleshooting section below\n\n\nCheck that Docker is configured to run with WSL 2: open Docker Desktop, go to Settings, and mark the checkbox for using WSL 2 if it’s not marked already\nNow, in PowerShell, check that docker is working with:\n\ndocker run hello-world\n\nIf you don’t get any errors, then docker is working in your machine\n\nInstall VSCode\n\n\n\n27.1.1.2 Mac\n\nInstall brew\n\n\nFor this, usually it’s a single command to execute in a terminal; just follow the instructions in the page\n\n\nInstall git using brew. In a terminal, do:\n\nbrew install git\n\nCheck that git is working, in a terminal. If you get no errors with the command below, then git is working correctly:\n\ngit --version\n\nDownload and install Docker Desktop, make sure to pick your correct processor (Mac Intel Chip or Mac Apple Chip)\n\n\nTo check which processor you have, TODO\n\n\nInstall colima using brew. This will allow us to use the docker engine on its own without relying on Docker Desktop. In a terminal:\n\nbrew install colima\necho \"export DOCKER_HOST=unix:///$HOME/.colima/docker.sock\" &gt;&gt; $HOME/.zsh_profile\ncolima start\n\nInstall docker-compose using brew. In a terminal:\n\nbrew install docker-compose\n\nCheck that docker is working, in a terminal. If you get no errors with the command below, then docker is working correctly:\n\ndocker run hello-world\n\nInstall VSCode\n\n\n\n27.1.1.3 Linux\n\nInstall git\n\n\nYou most likely have it by default already. You can test this by doing git --version in a terminal\nIf you don’t have it, install it using your distribution’s package manager. For example, in Debian and Ubuntu (and Ubuntu-based distributions), do sudo apt install git in a terminal\n\n\nFollow the official Docker instructions to install Docker Engine in your Linux distribution\n\n\nFollow the post-installation steps to use docker in your terminal without needing to write sudo everytime\nIf you opt out from following these post-installation steps, you will need to adapt the docker comands in this document (i.e., append sudo to all of them, everytime)\n\n\nCheck that docker is working, in a terminal. If you get no errors with the command below, then docker is working correctly:\n\ndocker run hello-world\n\nInstall VSCode\n\n\n\n\n27.1.2 Setup: pulling the docker image, cloning the git repository\nNOTE: for the moment, the compilation environment will not work on Mac if you have an Apple Silicon chip. This will be fixed soon enough. For the moment, you can follow this guide to set up what you need (git, docker, VSCode, and the VSCode extensions).\nOnce you have installed up all of the necessary dependencies (git, docker, VSCode) and they work in your machine, we proceed as follows. The terminal commands below should work in any shell in any operating system (PowerShell in Windows, zsh in Mac, bash in Linux).\n\nUsing a terminal, first login to the dockerhub account of the association. For this, you will need the access token which you can find in the Institutional Setup in our Google Drive:\n\ndocker login -u philosophiech\n# Paste the access token as the password\n\nNOTE: terminals often hide the characters when you type in passwords. Just copy and paste the access token when asked for the password and it will work.\n\nFor Mac users: if this command fails, try the following quick fix and then try again:\n\nmv ~/.docker/config.json ~/.docker/config.json_bkp\n\n(cont.) Don’t do this if you were using Docker before outside of the association. There’s a cleaner (but a bit longer) fix, at the section “solution 3” of this article\n\n\nNow you need to pull the latest image that contains the Dialectica compilation environment:\n\ndocker pull philosophiech/dltc-env:latest\n\nNOTE: this may take a while, as the image is quite heavy (~15GB).\n\nWhile you wait for the pull to finish, using a terminal, go to somewhere in your file system and use git to clone the Dialectica compilation environment repository. It is recommended to create a ‘gitrepos’ folder in your home folder, so you don’t need to remember where you put the git repository everytime. The instructions that follow later will assume that you did so. In a terminal, do:\n\n# First, navigate to your home folder\ncd ~\n# Second, create a folder in which you'll put git repositories\nmkdir gitrepos\ncd gitrepos\n# Third, clone the git repository containing the source code of the compilation environment\ngit clone https://github.com/Philosophie-ch/dltc-compilation-env.git\n# This will creat a folder called 'dltc-compilation-env'. This folder is the *root* of the repository\ncd dltc-compilation-env\n\nAt the root of the repository, follow the instructions of the README.md file there to set up an .env file in your local machine. You can either open this README file from your file explorer, or from the terminal directly doing cat README.md. You will need to create a .env file by copying .env.template, and then modifying it with your preferred text editor:\n\ncp .env.template .env\ncat README.md\n# Do the necessary modifications explained in README.md and save the .env file\n\nOnce you have set up your .env file, you’re ready to use the docker compose file (also at the root of the repository) to start a container.\n\n# On Windows and Linux\ndocker compose up -d\n# On Mac\ndocker-compose up -d\n\nWe do this because we cannot directly use docker images on their own, first we need to start a container from them. After this step, you’re ready to start using the new container you created from the image you pulled from dockerhub.\nThere are many ways to use a running container, but for our puroses, the easiest is to use VSCode.\n\n\n27.1.3 Setup: VSCode\nWhile not strictly mandatory, it is highly recommended to replace RStudio with VSCode for the copyediting work. VSCode is a modern, general text editor suited for all tasks programming and writing. It has support for state-of-the-art software tools such as Docker, and through its vast market of extensions, provides better support for Markdown, LaTeX, and HTML than RStudio (which is designed to work with the R programming language).\nFor this subsection, it is recommended that you create a GitHub account, and then connect to it in VSCode. So, after creating your account, open VSCode.\n\nNow connect VSCode to your GitHub account. To do this, look on the vertical toolbar to the left and down for ‘Accounts’, and connect to your GitHub account. Then, clicking again on ‘Accounts’, enable both ‘Settings Sync’ and ‘Turn on Cloud Changes’. This will synchronize your VSCode settings in any device you connect it to your account.\n\n\nRecommended: click on the cogwheel icon at the bottom of the vertical toolbar on the left, and go to “Settings”. Look on the search bar for “telemetry”, and set the “Telemetry Level” to “off”. We don’t need Microsoft spying (more than it already does) on us.\n\n\nThen, it is recommended that you create a ‘profile’ to manage the extensions you need for copyediting.\n\n\nIn the vertical toolbar to the left, below ‘accounts’, click on Settings &gt;&gt; Profiles &gt;&gt; Create profile…\nGive a name to your profile e.g., “dltc-copyediting” and use the default options\n\n\nNow we will install some extensions needed for the copyediting workflow. In the toolbar to the left, look for the “Extensions” button. There, using the search bar, look for and install the following:\n\n\nRemote Explorer (by Microsoft)\nDev Containers (by Microsoft)\nLaTeX Workshop (by James Yu)\nMarkdown All in One (by Yu Zhang)\nQuarto (by Quarto)\nHTML Preview (by George Oliveira)\n\n\nOther recommended extensions are:\n\nError Lens (by Alexander)\nGitHub Copilot (by GitHub)\nGitHub Copilot Chat (by GitHub)\n\n\nTo use the last tool, you need a GitHub pro account. If you have a university student account and email, you can be granted a pro account for free. Copilot is an AI assistant that can help you code in general, including help you with Markdown and LaTeX, both directly in VSCode when you edit files and in a chat button provided by the Chat extension (that will appear in the left toolbar).\nNow, whenever you start VSCode, make sure that you’re connected to your GitHub account (in “Accounts”), and that you’re using the profile you created (in “Settings &gt;&gt; Profiles”). Also make sure that the extensions are installed inside the container (in “Extensions”).\n\nOnce everything is installed, back at the “Extensions” button of the left toolbar, clear any search in the searchbar. Now, you will see that some extensions ask to be installed in the container. To do this en masse, look for the separator that says “CONTAINER PHILOSOPHIECH/DLTC-ENV…” and click on the cloud icon with a downward pointing arrow. This will install all of your extensions in the container.\nNow go back to the left toolbar and look for “Remote Explorer” (looks like a computer screen). At the top, there will be a drop-down menu in which you can select “Dev Containers”.\nYou will now see the name “compilation-env dltc-env”. If you hover with the mouse, you’ll see an arrow whose name is “Attach in Current Window”. Click it, and VSCode will start running inside the container (you can check that by looking at the bottom left of the VSCode window).\nNow you can work as usual, but inside this container you have all of the necessary tools available, including a full LaTeX environment with all possible dependencies, pandoc, and quarto.\n\n\nIn general, be careful with what you do even inside the container. While the container is relatively isolated from your machine, it is connected to the dltc-workhouse Dropbox folder, so any changes or deletions you make will affect everyone, as usual when working using Dropbox.\nWe can install new tools or modify existing ones in the environment depending on the needs of the copyediting team. Please contact Luis Bordo at luis.bordo@philosophie.ch for any such request.\n\n\n27.1.4 New way of generating outputs: dltc-make\nWhenever you’re using the container for the Dialectica compilation environment, from a terminal (inside the container) you have at your disposition the command:\ndltc-make\n\nThis command essentially replaces the old make.sh and make.bat scripts, and it’s used in exactly the same way. The advantage is that you don’t need to copy the make files, just call the command. For example, you just navigate to the folder where your article for copyediting is, and then…\ndltc-make offpdf\n\n…will produce a PDF as usual.\n\n\n27.1.5 Advanced: using the container directly from a terminal\nAdditionally, if you know what you’re doing, you can start a shell within the container without using VSCode. With this, you can use the terminal directly to compile articles. Altough rather clumsy as an approach, this would allow you to, for example, keep using RStudio to work on copyediting tasks and then compiling the articles separatedly in a terminal using the container.\nFrom anywhere in your system, do:\ndocker exec -ti --volume=\"YOUR/PATH/TO/Dropbox/philosophie-ch/dltc-workhouse:/home/copyeditor/dltc-workhouse\" philosophiech/dltc-env:latest bash\n\nIf this worked properly, you should see your prompt change to copyeditor@dltc-env. Here, you can now navigate to ~/dltc-workhouse, where you will find the usual Dropbox files for copyediting. If there’s enough demand, we can install additional tools in the container. Please contact Luis Bordo at luis.bordo@philosophie.ch for any such request.\n\n\n27.1.6 Troubleshooting\n\n27.1.6.1 Common issues\n\nProblem: In VSCode, connected to the container, you don’t see any file in ‘dltc-workhouse’ when you open it\n\n\nSolution: this is most likely due to not properly setting your .env file. Go to the folder in which you cloned the GitHub repository for the compilation environment, copy the .env.template file to a new file called .env. Now open this file, and change the value of “DLTC_WORKHOUSE” to the full path of where the dltc-workhouse folder (inside Dropbox) is.\nNote that, for Windows, you need to change “\\” for “/” in the path name. That is, if your folder is in “C:\\Users\\…”, you must change it to “C:/Users/…”.\n\n\n27.1.6.2 Installing WSL version 2 on Windows\nNote: if you don’t feel comfortable modifying the options of your machine’s BIOS or UEFI, get in contact with Luis Bordo at luis.bordo@philosophie.ch to guide you through personally. Otherwise, follow the instructions below.\n\nEnable ‘virtualization’. To do this, we need to go to the computer’s BIOS or UEFI. If you know how to do this, do it as you know and ignore the instructions below. Otherwise, follow these steps. WARNING: this will restart your computer:\n\nGo to Settings\nGo to Update and Security (or a setting with a similar name)\nGo to “Recovery”\nClick on Restart now in the section “Advanced start-up”\n\nClick on “Troubleshoot”\nClick on “Advanced Options”\nClick on on the option that mentions either “UEFI” or “BIOS”\nClick on “Restart”. This will restart your computer and automatically send you to the BIOS or UEFI settings\n\nNow this depends on your specific machine, but under some field called “Security”, you should find a sub-field called “Virtualization”. Inside this sub-field you should Enable all options\nSave and exit the BIOS or UEFI. IMPORTANT: you need to SAVE before exiting, otherwise you will need to redo the steps above\nTo check that virtualization is enabled, go to the Task Manager, to the Tab TODO\n\nEnable ‘wsl version 2’. Open PowerShell as Administrator, and then:\n\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\nwsl --set-default-version 2\n\nIf something goes wrong, follow the instructions given in PowerShell\nTo check if all of this worked, do wsl --version in Powershell"
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#setting-up-your-system-1",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#setting-up-your-system-1",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "28.1 Setting up your system",
    "text": "28.1 Setting up your system\n\n28.1.1 Pre-requisites\nYou will need the following (2 to 8 Gb disk space):\n\nPandoc version 3+. ~240Mb\nA LaTeX distribution.1 ~200Mb (custom) to ~5Gb (full)\nFonts: STIX Two, Libertinus (incl. Libertinus Display) and VenusSBExtended available in dialectica-workhouse/resources/fonts. &lt;1Mb\nOn MacOS, Apple’s Command line tools for Xcode. ~2.5Gb\n(Optional but recommended) RStudio, a markdown editor with a visual mode, a built-in terminal, and the ability to run scripts that generate HTML / PDF versions of your manuscript. ~1Gb\n(Optional but recommended) on Windows, latexmk, a command-line program we use to generate PDFs. It is part of LaTeX but not always installed by default. ~100Mb, if you need to install Perl\n\n\n28.1.1.1 How to check what’s installed\nTo check whether Pandoc, LaTeX and latexmk are installed, you can run the following on a terminal (see Appendix -Appendix A on how to do this). For Pandoc:\npandoc -v\n\nFor LaTeX:\npdflatex -version\n\nFor latexmk:\nlatexmk -v\n\nIf you get error messages, they are not installed. If you get version numbers, they are installed. This works on all systems.\n\n\n\n28.1.2 MacOS only\nTo install Apple’s Command Line Tools. This is necessary even if you’re not going to use the command line your self: it installs the software needed to run the “scripts” (short instruction files) that render our outputs. Open the Terminal (in Applications &gt; Utilities), type the following and hit Enter:\nxcode-select --install\n\nIf you get the error message “command line tools already installed”, it’s already installed, you can close the terminal. Otherwise it will download and install for some time. When it’s finished, close the terminal.\n\n\n28.1.3 Optional: install tools with a package manager\nPackage managers are tools to install and update software. Typically terminal tools see A but Linux has graphical ones too.\n\nAt installation time, they spare you looking up the software’s website, downloading, running the installer. Instead you just run a simple command like choco install pandoc on the terminal and the manager installs Pandoc for you.\nLater, they allow you to update all the software you’ve installed with them at once. No need to go back to the websites, download again etc. You run a command like choco upgrade all.\nLess relevant for us: it handles ‘dependencies’, ie if the software you’re installing needs another, it’ll install the latter too.\n\n\nFor instance on MacOS you’d install LaTeX, Pandoc and RStudio by typing just one command on the terminal: brew install mactex pandoc rstudio.\n\nOn Linux, there’s a package manager pre-installed and you’ll probably know what it is. In “Debian” distributions, Ubuntu included, it’s APT (apt-get install pandoc). There are graphical user interfaces for it: Software center in Ubuntu, Synaptic in Linux Mint, and others.\nOn MacOS, install Homebrew. Note: sometimes you’ll see --cask in the command (compare brew install pandoc vs brew install –cask rstudio). The rule of thumb is that graphical programs are --cask, command line programs aren’t. But don’t worry, if you omit --cask the installation typically works anyway. You can formally check whether it’s needed by searching the software on homebrew’s depository.\nOn Windows, install Chocolatey. Important: don’t forget that it can’t be run in the basic CMD terminal but only in the “Windows Powershell” with administrator privileges. Search it in the start menu, right-click and chose “Run as administrator”.\n\n\nIf unsure what the package name of some software is you can search it online (e.g. “Ubuntu package texlive”). It’ll probably land you on the right page of their online package lists: debian, ubuntu, homebrew, chocolatey.\n\n\n28.1.4 Common to all platforms\n\n28.1.4.1 Pandoc\nDownload and install from Pandoc’s website.\nCommand line users: run brew install pandoc (MacOS, Homebrew), choco install pandoc (Win, Chocolatey) or apt-get install pandoc (APT, Linux) in a terminal.\n\n\n28.1.4.2 LaTeX\nUse either MikTeX or TexLive (whose Mac version is called MacTeX).\n\nFor MikTeX: download the installer, launch it. Select “install only for this user”, and for installing packages on the fly, select “Ask me first”.\nFor TexLive, non-Mac: download the network installer, launch it. When/if offered the choice, choose to install “all” or “everything”. This can take ~30 minutes depending on download speed.\nFor TexLive, Mac users: download the installer.\n\n\nMikTeX’s advantage is that it downloads any needed packages on the fly, so it’s quicker to install and will get whatever you need. So be aware that if you use MikTeX, you first PDFs generation will open a window asking you to confirm the download of packages and take a long time as MikTeX download missing pages. Don’t worry, subsequent PDF generations are much faster.\nTexLive’s full install is large (5Gb) and takes ~30 mins but you’re done once and for all—well, for one year, as it is updated yearly.\nCommand-line users:\n\nHomebrew: brew install --cask mactex. Cannot install MikTeX (as of Jan 2023). MikTeX doesn’t need brew anyway, it self-updates.\nChocolatey: choco install miktex or choco install texlive --params \"'/scheme:full'\".\nLinux: depends on package managers, e.g. sudo apt-get install miktex or sudo apt-get install texlive-full. However, you might need to add ‘Software sources’ to do this: see e.g. the MikTeX webpage.\n\n\n\n28.1.4.3 Fonts\nDialectica’s fonts are located in dialectica-workhouse\\resources\\fonts. Open a file browser and navigate to the folder of a desired font (for Stix Two, STIX Two fonts\\OTF). Select all the files and, depending on system:\nTo install fonts, open the Finder and navigate to the folder where the fonts are located (dialectica-workhouse/resources/fonts). Open the folder of the desired font (for Stix Two, STIX Two fonts/OTF). Double-click each file there (regular, italic, bold, …), and in the windows that appear, select “Install font”. You can check that the fonts are installed by opening the Font Book (in the Applications folder, or Cmd + Space and search for Font Book) and selecting the User tab.\n\n(Windows) right-click and select “Install fonts”,\n(Mac) Enter or right-click &gt; Open. Select “Install font” in the windows that open. You can check that they are installed by opening the Font Book app.\n(Linux) depends on distribution. On Ubuntu, for instance, double-click on the font files opens a font viewer with the option to install. If that doesn’t work on your distribution, try an online search.\n\n\n\n28.1.4.4 RStudio (optional)\nSee RStudio’s download page for installation instructions. Command line users also install it with package managers (e.g. brew install rstudio). RStudio needs R (a statistics programming language), so you might need to install it too (e.g. brew install r rstudio).\nWhen installed, note that RStudio includes:\n\na file browser on the left\na terminal at the bottom, under the ‘Terminal’ tab. (The ‘Console’ is something else).\nwhen editing markdown files, the Source and Visual tabs at the top left of the editor. These allows you to edit files in visual mode rather than markdown. Limitation: the visual mode can’t be used if the manuscript contains “numbered examples lists”.\nwhen editing markdown files, an ‘Outline’ panel on the right side of the editor. Useful to navigate a manuscript.\n\n\nRStudio might be intimidating at first: it’s not a word processor but a “development environment” for the statistics programming language R. It’s not just used to write programs, however, but also write documents that embed compuations: a webpage with a graph that is daily updated, or a scientific article that includes algorithms and data to reproduce its results. So don’t worry: you will mostly be using its markdown editor here, which is powerful but simple. Some of the development features are handy too, like the file browser and the ability to run scripts to generate our outputs."
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#prepare-an-article-or-issue-folder",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#prepare-an-article-or-issue-folder",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "28.2 Prepare an article or issue folder",
    "text": "28.2 Prepare an article or issue folder\nYou’ll need to add a few files to your article working folder to be able to generate outputs.\n\nA ‘maker script’, i.e. a mini program that tells the computer how to generate your outputs.\nThis is the file titled make.sh.\nA master file, which contains issue-level metadata needed to generate your article outputs.\n\n\n28.2.1 Ensure your folder contains the maker script\nCheck whether your working article folder contains a file title make.sh. If it does, you’re good.\nIf it doesn’t, you should make a copy of it in your work article folder. You can find it in template/X.X/copyeditors-scripts, where X.X stands for the most recent template version. (That is the highest you find, e.g. 1.2.) But this file is the same for each article and issue that uses the same version of the Dialectica template, so you can also copy it from other article folder in the same year.\nBeware of copying make.sh from an article folder, not the issue folder that contains it. (Article-folders make.sh tell the computer: go three folder up and find the template engine; issue-folders make.sh tell it: go two folders up and find the template engine; that’s why issue maker files don’t work in article folders and conversely.)\n\n\n28.2.2 Create a master file\nCopy a master.md file into your article folder. You can take one from another article in the same issue, or the template one at template/X.X/copyeditors-scripts. Beware: you can take the master file in the issue folder, but if you do so you’ll need to modify paths in the imports field (see below).\nOpen the file in text editor. It should already contain an imports metadata field that consists of a list of one or more files (each item on a single line starting with a dash), for instance:\nimports:\n- 01-author.md\n- 02-author.md\n\nYou should amend it to contain just one item referring to your file. If your markdown file is smith_j-2023.md you should make it:\nimports:\n- smith_j-2023.md\n\nNote on issue master files. Issues have master files too, where located in issue folders. Their imports field normally contain a list of all article files for that issue, including which subfolder they’re in, for instance:\nimports:\n- 01-jones/jones_s-2023.md\n- 02-smith/smith_j-2023.md\n- ...\n\nTherefore, if you copy an issue master file within an article folder, or the other way round, you should make sure you add (issue master file) or remove (article master file) the subfolders names as required."
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#generate-outputs",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#generate-outputs",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "28.3 Generate outputs",
    "text": "28.3 Generate outputs\n\n28.3.1 With RStudio on Windows\nOn Windows, you might be able to generate outputs from RStudio directly without running a command. If that fails, skip to the next sections and run a command instead.\nSetup. In RStudio, open your article’s project and go to the menu Build &gt; Configure Build Tools. Enter the following choices:\n\nProject build tools: “Makefile”\nMakefile directory: leave as default (Project Root).\nAdditional argument: empty to generate html, or any of the rendering commands detailed below Section 28.3.3.\n\n\nGenerate. Once that is done, go to Build &gt; Build all (or use Shift-Ctrl + B) to generate the desired output.\nGo back to Build &gt; Configure Build Tools if you want to change the format you’re generating, e.g. enter offpdf —proof in Additional argument to generate a proof PDF.\n\n\n28.3.2 Run a command in the terminal\nIn all systems, you can generate outputs by running the sh make.sh command in a terminal.\n\nIn RStudio, if you’ve created a project for your article, it’s best to use the Terminal within RStudio itself. See Tools &gt; Terminal. This terminal will be “located in” the project’s folder, so you can just take sh make.sh to generate a html output.\nIf you’re using a separate terminal application, you’ll need to “navigate” to the folder where your article is. See Appendix A for help.\n\n\n\n28.3.3 Short rendering commands\nRendering commands can be executed in a article’s folder or in an issue folder. All these commmands must be added to sh make.sh, e.g.:\nsh make.sh offprints\n\nor used in the “additional argument” of RStudio’s configure build tools in Windows, as explained above.\nSingle-article outputs will be named after the source file, e.g. smith_j-2020.pdf. Issue outputs will be named after the issue DOI, e.g. dial.v74.i1.pdf or dial.v75.i2-book.pdf.\n\nArticle folder rendering commands\n\n\n\n\n\n\nCommand\nOutput\n\n\n\n\n(empty)\narticle in HTML\n\n\noffpdf\noff1pdf\narticle in PDF\n\n\nofftex\noff1tex\narticle in LaTeX. Useful to debug when the PDF generation crashes: try lualatex smith_j-2020.tex to see error messages.\n\n\nrefs\ngenerate a list of references cited in the article. Saved as &lt;article_name&gt;.bib.txt. Only works when the references have been turned into citations and a bibtex file is provided.\n\n\n\n\nIssue folder rendering commands\n\n\n\n\n\n\nCommand\nOutput\n\n\n\n\n(empty)\nfirst article in HTML\n\n\nall\nissue pdf, all articles PDF + HTML\n\n\nallhtml\nall offprints (=articles) in HTML\n\n\noffprints\noff\nall offprints HTML and PDF\n\n\nvol\nvolpdf\nissue PDF\n\n\noff2\noff2html\nHTML of the second article (i.e. second item in the masterfile’s imports list).\n\n\noff2pdf\nPDF of the second article (i.e. second item in the masterfile’s imports list).\n\n\noff7tex\nLaTeX of seventh article\n\n\nvoltex\nLaTeX of the issue\n\n\nrefs\ngenerate list of references cited for each article. Saved as &lt;article_name&gt;.bib.txt. Only works when for articles where references have been turned into citations and given in bibtex files.\n\n\nbare\nbaretex\nIssue covers only, PDF (bare) or LaTeX (baretex). articles (also baretex). Useful for cover design.\n\n\n\n\n\n28.3.4 Rendering options\n\nProof mode\n\nAdd --proof or -p at the end of your command (separated by a space):\n\n\nsh make.sh off2 --proof\nsh make.sh off3pdf -p\n\n\nThis only affects PDF output.\n\nVerbose or quiet\n\nAdd --verbose or -v to get a detailed log of the rendering process. Useful for debug. You can save the output in a log file like so:\nsh make.sh off2pdf -v 2&gt; out.log \nThe 2&gt; tells the computer to “redirect” the error/information output to a file named out.log. This works in Windows and Linux / MacOS terminals.\nYou can make the output quieter with --quiet or -q. Though certain programs executed during the rendering process may still display error or output messages. If you don’t want to see anything just “redirect” the output to a file with sh make.sh … 2&gt; out.log.\n\n\n\nSingle letter options can be combined: -pv is short for --proof —verbose.\n\n\n28.3.5 Long rendering commands\nRendering commands can also be given in key-value form:\nsh make.sh mode=offprint chapter=3 format=pdf\n\nmode includes “offprint” aka “off”, “vol” aka “issue”, “bare” , “refs”\nformat includes pdf, html, tex aka latex (also epub, jats but we don’t generate these yet)\nchapter includes chapter numbers.\n\n\nThe advantage is that you can specify multiple modes and formats separated by commas:\nsh make.sh mode=off,refs chapter=3,4,5\n\nRendering options like --proof can be combined with long rendering commands."
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#advice-on-html-vs-pdf",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#advice-on-html-vs-pdf",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "28.4 Advice on HTML vs PDF",
    "text": "28.4 Advice on HTML vs PDF\nHTML is best when you start working on an article because it’s much faster and less error-prone than PDF. HTML only fails to produce an output if your document’s metadata is ill-formed or if there’s a bug in the “filters” we use to format outputs.\nPDF is best for the latter typesetting stages when you need to check that the fine-grained outputs look right, that advanced LaTeX formulas or images work correctly, that there is no awkward page break and so on."
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#sec-dltc-env-setup",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#sec-dltc-env-setup",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "28.5 ",
    "text": "28.5"
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#footnotes",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#footnotes",
    "title": "27  Dialectica new house style outputs DRAFT",
    "section": "",
    "text": "LaTeX is called a ‘distribution’ or ‘installation’ because it’s not a single program but a large collection of programs and ‘packages’ that work together to generate PDFs.↩︎"
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#cannot-run-pandoc-crossref-because-it-is-not-from-a-trusted-developer",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#cannot-run-pandoc-crossref-because-it-is-not-from-a-trusted-developer",
    "title": "28  Troubleshooting outputs",
    "section": "28.1 Cannot run pandoc-crossref because it is not from a trusted developer",
    "text": "28.1 Cannot run pandoc-crossref because it is not from a trusted developer\nMacOS-specific error. Solution: close the alert—don’t chose “Move to Bin”! In Finder, go to the template/X.X/filters folder, where X.X is the latest version of the template. ⌘-click the file pandoc-crossref (not pandoc-crossref.exe nor pandoc-crossref-nix). Chose “Open”. You will get the same alert but this time with the option to Open: select it. Nothing will happen but after that the system will trust the file and you’ll be able to generate outputs."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#html-empty-or-pdf-with-cover-only",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#html-empty-or-pdf-with-cover-only",
    "title": "28  Troubleshooting outputs",
    "section": "28.2 HTML empty or PDF with cover only",
    "text": "28.2 HTML empty or PDF with cover only\nThe maker hasn’t find your article source. You probably forgot to update the master file’s imports list with your source file name."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#warning-pandoc-crossref-was-compiled-with-pandoc-x.x.x-but-is-being-run-through-y.y.y-etc.",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#warning-pandoc-crossref-was-compiled-with-pandoc-x.x.x-but-is-being-run-through-y.y.y-etc.",
    "title": "28  Troubleshooting outputs",
    "section": "28.3 WARNING: pandoc-crossref was compiled with pandoc X.X.X but is being run through Y.Y.Y etc.",
    "text": "28.3 WARNING: pandoc-crossref was compiled with pandoc X.X.X but is being run through Y.Y.Y etc.\nIgnore this if the first two digits X.X and Y.Y are the same, e.g. “pandoc 3.1.2 but is being run through 3.1”. It’s small mismatch between the Pandoc version and the cross-references filter’s version, normally harmless. You may remind the workhouse administrator to update the cross-references filter, or check that your pandoc is up to date.\nIf the Y.Y number is 2 or more lower than the X.X, e.g. “pandoc 3.4 but being run through 3.1” then you need to update your Pandoc."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-message-about-stix-two",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-message-about-stix-two",
    "title": "28  Troubleshooting outputs",
    "section": "28.4 Error message about Stix TWO",
    "text": "28.4 Error message about Stix TWO\nPDF-specific. Means that you haven’t installed the Stix Two font."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-pdf-output-not-produced",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-pdf-output-not-produced",
    "title": "28  Troubleshooting outputs",
    "section": "28.5 Error: PDF output not produced",
    "text": "28.5 Error: PDF output not produced\nPandoc can’t generate a PDF. There are, unfortunately, many reasons why this can happen. Essential background first: PDF generation happens in two stages:\n\nPandoc converts Markdown to LaTeX.\nA LaTeX engine converts LaTeX to PDF.\n\n\nFirst we need to check that no crash occurs at stage 1.\n\nCheck first that you can generate a HTML of the article. If not, you have first to fix the error in HTML generation. See Section 28.6.\nThen generate a LaTeX file for the article. Section 28.3.3\n\n\nIf Pandoc generates HTML and LaTeX with no crash, then the error happens at the LaTeX stage.\nTypical causes for a LaTeX-stage error are:\n\nTypos in a math formulas.\nAn author’s LaTeX uses some packages or defined commands. These need to be provided to the article as header-includes. (Though sometimes you need to tell the author to simplify their LaTeX first!)\nRaw LaTeX code, either from the author or from you (e.g. added to handle fine-grained spacing) doesn’t work correctly\nAn author’s LaTeX code doesn’t interact well with our template.\nthere’s a bug in our filters or our template\n\n\nTo make progress you should look for the LaTeX error message. It’s displayed in the output when Pandoc fails to produce a PDF. It is on a line that starts with !, such as:\n! Undefined control sequence.\nl.512 \\llbracket\n          \n[1{/usr/local/texlive/2023/texmf-var/fonts/map/pdftex/updmap/pdftex.map}]\n(./smith_j.aux))\n(see the transcript file for additional information)\n... \n(more text)\n...\n\nOr:\n! LaTeX Error: File `image.png' not found.\n\nSee the LaTeX manual or LaTeX Companion for explanation.\nType  H &lt;return&gt;  for immediate help.\n ...                                              \n                                                  \nl.618 \\includegraphics{image.png}\n                        \n[1{/usr/local/texlive/2023/texmf-var/fonts/map/pdftex/updmap/pdftex.map}]\n(./test.aux))\n... \n(more text)\n...\n\nNote that you can get the log as a text file in two ways:\n\nRun the command to generate the pdf but add 2&gt; out.log at the end, e.g. make off1pdf 2&gt; out.log. This will save the log as out.log.\nRun the LaTeX engine on the LaTeX file itself. Make sure you’ve generated a LaTeX file (.tex) and that you have a terminal localed in that folder. Run:\nlualatex --interaction=nonstopmode smith_j-2020.tex 2&gt; out.log\nadapting to your LaTeX file name. If you omit --interaction=nonstopmode the engine will instead stop at any error encountered and ask you what to do; you can enter “x” for exiting. (You can also enter “i” for ignoring the error, but typically that generates further errors down the line, and anyway all LaTeX errors have to be fixed before final output.)\nIf you run the LaTeX engine you’ll get a few ‘artefact’ files: &lt;article-name&gt;.log , .synctex, .aux. You can later erase them; try the command latexmk -C &lt;article-name&gt; (assumes you have latexmk in your LaTeX installation), otherwise erase them but remember to keep your source file .md and any .bib files!\n\n\nThe file out.log is a plain text file, you can open it for inspection in any simple editor and you can send it by email for help.\nEven if you don’t know LaTeX, you can glean some pointers form the LaTeX error message.\n\nThe line number (e.g. l. 618) is the line number in the LaTeX file, not in your source markdown file. Generate the LaTeX output (if it’s not already done) and go to that line in it: you’ll probably be able to figure out which part of the article is generating the error. Note however that it’s not a sure shot: LaTeX error at a line are sometimes due to issues much earlier in the document.\nError messages are often followed by a line split in two, as in:\n! Undefined control sequence.\nl.618 $\\binom{n}{k} = \\fract\n                        {n!}{k!(n-k)!}$\nThis means LaTeX crashed just before the split. Here the split occurs between \\fract and {n!}, so LaTeX crashed at \\fract. Often that is where the error is: the correct command for fractions is \\frac not \\fract. Again, it’s not a sure shot: LaTeX error at a line are sometimes due to issues much earlier in the document.\n\n\nIf that doesn’t help solving the issue, you can still try the time-consuming method below. Otherwise get help from somebody who’s more familiar with LaTeX or the journal’s template coder. Tell them what article generated the error, and copy-paste or attach the error log (or at least the part where the error message is).\nA last resort. More time-consuming but guaranteed result. Isolate the error. Make a copy of your file and trim it down until you can generate a PDF, as follows:\n\nDisconnect the bibliography file. In the metadata block, put a # in front of the bibliography line:\n# bibliography = smith-paper-references.bib\nThis deactivates the line. Try producing a PDF; if you don’t get the error, you know that the source is something in your bibliography file. Otherwise continue.\nIsolate the error by halves. Remove the second half of the document. Try producing a PDF. If you get an error, you know the problem is in the first half; divide it in two, repeat. When you get to the point where you don’t get an error (at a given point), start re-adding parts of the text one by one, until you identify what addition generates the error.\nIn that process you may get “warnings” you didn’t get before, e.g. because you’ve cut out the footnotes associated with a paragraph. Don’t worry about them, they’ll disappear once the relevant bits are re-added."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#sec-house-outputs-html-errors",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#sec-house-outputs-html-errors",
    "title": "28  Troubleshooting outputs",
    "section": "28.6 Errors in HTML generation",
    "text": "28.6 Errors in HTML generation\nErrors in HTML generation should arise from three possible sources only:\n\nwrong formatting of the metadata block in your article source file. You will get a YAML Parse error or the like, possibly with a number indicating the line where Pandoc thinks the error is.\nError in the citation file. You will get a Citeproc error or the like, with possibly a number indicating the line in the .bib file where Pandoc thinks the error is.\nbug in Dialectica’s template. You get a Error running Lua filter or the like. The error message may give you some clue as to which filter is improved.\n\nEmail the template programmer. Include in your email: which source file generates the error, a copy/paste of the error.\nYou can experiment to find more about the error. If it comes from a particular filter and your article sets options for that filter, you may try changing those options.\n\n\n\nupdate the filename in master.md or master-win.md with your markdown source file’s name.\n\nIf you get a pdf file with a cover but no title or article content,\nIf it doesn’t create an html, your pandoc is not updated. Ask us for help if needed.\nIf you get an error message about Stix TWO, you haven’t installed the font in your computer. See above.\nIf you get an error message “Error: PDF output not produced”, Pandoc is probably able to generate html and LaTeX output (you can test with the options above), but the conversion from LaTeX to PDF (done by a LaTeX engine such as pdflatex, xelatex, lualatex) fails. In those cases it’s useful to use the debug option generated above. You will get a .log file that gives you more detail about the error. The file can be opened in RStudio and its structure is explained a bit in the\nTroubleshooting section below."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#a-brief-guide-on-pandocs-pdf-output-logs",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#a-brief-guide-on-pandocs-pdf-output-logs",
    "title": "28  Troubleshooting outputs",
    "section": "28.7 A brief guide on Pandoc’s PDF output logs",
    "text": "28.7 A brief guide on Pandoc’s PDF output logs\nWhen asking pandoc to produce a PDF you can produce an output log (see the sections on generating outputs to see how to do this with RStudio or the terminal).\nThe file begins with [INFO] messages about Pandoc’s source to LaTeX conversion. Typically this is just information about the `filters’ that Pandoc runs, e.g.:\n[INFO] Running filter ../../../resources/filters/abstract-to-meta.lua\n[INFO] Completed filter ../../../resources/filters/abstract-to-meta.lua in 70 ms\n\nThen, [makePDF] messages about the commands Pandoc executes to launch a LaTeX engine that converts the LaTeX to PDF. The “Command line” one tells you which LaTeX engine is used, here lualatex:\n[makePDF] Command line:\nlualatex \"-halt-on-error\" \"-interaction\" \"nonstopmode\" \"-output-directory\" \"&lt;TEMPDIR&gt;\" \"&lt;TEMPDIR&gt;/input.tex\"\n\nThe “Source” message copies the entire LaTeX file that Pandoc sends to the LaTeX engine. It can be useful for a quick look, but it’s more convenient to generate that LaTeX file separately (see how above). When you have LaTeX error messages that give a line number, that is the line number in the LaTeX file (hence it’s easier to find those when you open the separate LaTeX file in a text editor with numbered lines.)\n[makePDF] Source:\n% Options for packages loaded elsewhere\n\\PassOptionsToPackage{unicode}{hyperref}\n\\PassOptionsToPackage{hyphens}{url}\n\\PassOptionsToPackage{dvipsnames,svgnames*,x11names*}{xcolor}\n%\n... % more LaTeX code\n\nThe LaTeX source is usually very long (200-500 lines + at least the number of lines in your markdown source). To find the next section, you can search for [makePDF] Run in the file.\nThe “Run” messages ([makePDF] Run #1, [makePDF] Run #2…) give the LaTeX engine’s output messages. Generating PDFs from LaTeX typically requires several ‘runs’ of the LaTeX engine on the file: the first run generates various bits stored in an auxiliary file (e.g., which page a heading ends in, whether a citation is labelled Smith 2020 or Smith 2020a, …) and the second run uses them to finalize the PDF. Under each [makePDF] Run # you get the full LaTeX Log of the LaTeX engine. This is where you’ll find information, warnings and errors concerning PDF generation. For instance:\n[makePDF] Run #1\nThis is LuaHBTeX, Version 1.13.0 (TeX Live 2021) \n restricted system commands enabled.\n\n(/private/var/folders/j2/zp5ggjhx12xccgy5_wx32tfw0000gp/T/tex2pdf.-12ef5244637e\ndfd8/input.tex\nLaTeX2e &lt;2020-10-01&gt; patch level 4\n L3 programming layer &lt;2021-02-18&gt;\n(/usr/local/texlive/2021/texmf-dist/tex/latex/koma-script/scrbook.cls\nDocument Class: scrbook 2021/03/17 v3.33 KOMA-Script document class (book)\n(/usr/local/texlive/2021/texmf-dist/tex/latex/koma-script/scrkbase.sty\n...\n(/usr/local/texlive/2021/texmf-dist/tex/latex/amsfonts/amsfonts.sty))\n(/usr/local/texlive/2021/texmf-dist/tex/latex/stmaryrd/Ustmry.fd)\nLaTeX Font Warning: Font shape `U/stmry/m/n' in size &lt;5.5&gt; not available\n(Font)              size &lt;5&gt; substituted on input line 70.\n\n...\n...\n\nUnderfull \\hbox (badness 2469) in paragraph at lines 559--574\n[]\\TU/STIXTwoText(0)/m/n/10 I will also adopt the or-tho-dox ap-proach to meta-\nontology, \\TU/STIXTwoText(0)/m/it/10 neo-\n\nUnderfull \\hbox (badness 1158) in paragraph at lines 559--574\n\\TU/STIXTwoText(0)/m/it/10 Quineanism\\TU/STIXTwoText(0)/m/n/10 . Ac-cord-ing to\n neo-Quineanism, a the-ory’s on-to-log-i-cal\n[1]\n[2] [3] [4] [5] [6] [7]\n...\n\nLaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.\n\n)\n(see the transcript file for additional information)\n 780 words of node memory still in use:\n   6 hlist, 2 vlist, 2 rule, 18 glue, 4 kern, 1 glyph, 26 attribute, 72 glue_sp\nec, 26 attribute_list, 1 write, 1 user_defined nodes\n   avail lists: 2:495,3:199,4:152,5:788,6:105,7:7249,8:76,9:429,10:25,11:651\n\nOutput written on input.pdf (18 pages, 113569 bytes).\nTranscript written on input.log.\n\nThe above is a LaTeX log of a file that converts into PDF without error. The overal structure is:\n\nPDF engine: This is LuaHBTeX, Version 1.13.0 (TeX Live 2021)\nDocument class: Document Class: scrbook...\nLaTeX packages used and their own messages: (path/to/package.sty. Here the package Ustmaryrd (a font collection) issues a warning that it’s using a 5pt characters in the absence of 5.5pt characters. input line 70 refers to the line in the LaTeX file.\npages generated: [1] [2] [3] [4] ... indicate that the corresponding page is “shipped out” (generated and saved into the PDF). This means we have no error or warning at pages 1 to 4, yay!\nUnderfull and overfull \\hbox warnings, e.g. Underfull \\hbox (badness 2469). These indicate that LaTeX has generated a less-than-ideal horizontal line: an horizontal line with a bit too much, or not enough, text. Typically nothing to worry about: the text is just slightly more or less spaced than usual. However, very bad cases of overfull can be a table or long equation or image or some unbreakable large item that sticks out of your text block. The easiest is to check for them visually in the PDF output, but if you are after perfection you can check all the ones mentioned in the log. To know which pages they’re on, look for [n] page shipout indicators before and after the overfull message.\nIf compilation runs without error, the end messages. These includes the warning if a LaTeX rerun is needed (LaTeX Warning: Label(s) may   have changed. Rerun to get cross-references right.), which you don’t need to worry about because Pandoc takes care of this, and statistics about the output (Output written on input.pdf (18 pages, 113569 bytes).)\n\n\nIf the PDF building from LaTeX has failed, you will see LaTeX error messages. For instance:\n! Missing $ inserted.\n&lt;inserted text&gt; \n                $\nl.6 \n    \n!  ==&gt; Fatal error occurred, no output PDF file produced!\nTranscript written on dummy.log.\n\nThe error message starts with !, followed by a (more or less useful) description of the message, and an excerpt of the LaTeX code before and after the error occurred, and the line the engine was processing when the error occurred. Here the error was a missing $: in LaTeX $ is used to surround mathematical formulas, and each ‘opening’ dollar sign must be matched with a ‘closing’ one. The error was produced as the engine was processing line 6.\nImportant. The line at which the error occurred is not necessarily the line where the mistake is. For instance, with matching $ the error is at the point where the engine realizes that the number of $ isn’t matched. But typically the mistake was earlier on, where a $ sign should have been.\nTo diagnose and solve LaTeX error you need knwoledge and experience of LaTeX, which is beyond the scope of this guide. It often helps to make an internet search on the error message text."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-errorunknown-option-citeproc",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-errorunknown-option-citeproc",
    "title": "28  Troubleshooting outputs",
    "section": "28.8 pandoc says “Error”unknown option “citeproc””",
    "text": "28.8 pandoc says “Error”unknown option “citeproc””\nYour need to update pandoc to a newer version. “Citeproc” (the pandoc extension that prints bibliographies, and replaces BibTeX/BibLaTeX) is only in versions &gt;2.11 (september 2020). How to update depends on how you’ve installed it: download from pandoc page, or do brew –upgrade (if you’re using homebrew for MacOS), etc."
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-pandoc-filename-openbinaryfile-file-not-found",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-pandoc-filename-openbinaryfile-file-not-found",
    "title": "28  Troubleshooting outputs",
    "section": "28.9 pandoc says pandoc: FILENAME: OpenBinaryFile: file not found",
    "text": "28.9 pandoc says pandoc: FILENAME: OpenBinaryFile: file not found\npandoc doesn’t find one of the files needed.\nThe instructions above work only if:\n\nyour execute the pandoc command while located in the folder that contains your markdown file and its bibliography while. (Learn how to navigate folders in the command line, and go where your markdown file is.)\nthat folder is located three folders down from the workhouse’s base folder (the folder where the processing, resources folders are located). So your markdown file can be in:\nprocessing/2020-01-special-issue/01-michels\nfinished/2020-02-issue/01-elzein\n…\n\n\nThe file resources/defaults.yaml contains our default settings for pandoc, and they also assume that your file is three folder down from the base. This is why we preface resources/defaults with ../../../ in our pandoc command (to indicate that the file is three folder up from where you are when you run pandoc).\nIf you want to run pandoc with our settings on a file that’s located elsewhere, you can use the full command. You can figure it out from resource/defaults.yaml. At present this would be:\npandoc --standalone --pdf-engine=xelatex --citeproc --csl=PATH/TO/dialectica.csl  --template=PATH/TO/dltc-template.tex SOURCE.md -o OUTPUT.pdf\n\nbut the details might change as we update our defaults. You may add any additional option you wish. PATH/TO/ should be replaced with the path from your folder to the templates. For instance, if the templates and style files are respectively in in:\n\njournal-new/design/templates\njournal-new/biblio/\n\n\nand your manuscript is in:\n\njournal-new/articles/issue-01/\n\n\nYou could try:\npandoc --standalone --pdf-engine=xelatex --citeproc --csl=../../biblio/biblio-style,csl  --template=../../design/templates/dltc-template.tex SOURCE.md -o OUTPUT.pdf\n\nThat is, ../../ going two folders up (hence at journal/new) and from there down biblio in one case and design/templates in the other.\nYou can also create your own defaults file mydefaults.yaml in a text editor, with contents like:\nstandalone: true\npdf-engine: xelatex\nciteproc: true\ncsl: ../../biblio/biblio-style,csl\ntemplate: ./../design/templates/dltc-template.tex\n\nSave it next to your manuscript and run pandoc with:\npandoc -d mydefaults SOURCE.md -o OUTPUT.pdf"
  },
  {
    "objectID": "chapters/dialectica/70-dialectica-template.html#title-and-subtitle",
    "href": "chapters/dialectica/70-dialectica-template.html#title-and-subtitle",
    "title": "29  Dialectica template",
    "section": "29.1 Title and subtitle",
    "text": "29.1 Title and subtitle\nHere are the fields used to format titles and subtitles:\ntitle: Plain title here\nsubtitle: Plain subtitle here\nshorttitle: Shorter subtitle for page headers\ntitle-latex: |\n  Title for the first page title \\\n  with possibly some linebreaks\nsubtitle-latex: |\n  Title for the first page title \\\n  with possibly some linebreaks\ntitle-cover: |\n  Title for the offprint cover \\\n  with possibly some \\\n  linebreaks\nsubtitle-cover: |\n  Subtitle for the cover\ntitle-cover-size: \\huge\nsubtitle-cover-size: \\Large\n\nAll fields except title are optional. shorttitle is used for page headers and the table of contents. title-latex and subtitle-latex are used for the title on the first page and title-cover and subtitle-cover are used for the offprint cover; they may include linebreaks as shown above. If title-latex is provided but title-cover is not, the former is used for the cover too.\nThe offprint cover sizes are controlled bytitle-cover-sizeand subtitle-cover-size. Defaults is \\Huge for titles of 30 chars or less, \\huge for longer titles, and \\LARGE for subtitles.\nThere is no control of the first page title and subtitle font sizes."
  },
  {
    "objectID": "chapters/dialectica/80-dialectica-bibliography.html",
    "href": "chapters/dialectica/80-dialectica-bibliography.html",
    "title": "30  Interface with dialectica’s main bibliography",
    "section": "",
    "text": "Interface with dialectica’s main bibliography\nMore information on the bibliography is in the bibliography-section of the overleaf-document.\nJD some experiments:\n\nTried simply adding the main bib file (biblio-check.bib) as the &gt; bibliography file of an article in RStudio. Problems:\n\nIt takes circa 15-30sec to ’Read the bibliography” when opening &gt; the article, and 10-20sec again when opening the &gt; insert-citation window.\nBut the bibliographies entries don’t show up in the &gt; ‘Bibliography’ tab.\nIt looks as if either RStudio can’t read it (bug / unusual code &gt; somewhere?), or just gives up above a certain number of &gt; entries\n\n\n\nJD thought: We need either:\n\nsome way of either generating a sub-selection of the main &gt; bibliography for the article. Automated? Something like Sandro’s / &gt; crossref bibtex convertor, but for this bibliography? (Suggestion: &gt; linking via DOIs?)\nSome way of having the main biblio as one of the source in RStudio &gt; citation-insertion popup, the way Zotero appears. However: risk &gt; that it is slow because of the size.\nSome way of searching the main biblio as one of the sources in &gt; RStudio, the way CrossRef appears in the citation-insertion popup."
  },
  {
    "objectID": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-book",
    "href": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-book",
    "title": "31  The structure of a book and a journal",
    "section": "31.1 The structure of a book",
    "text": "31.1 The structure of a book\nThe cover is typically designed separately. It has five components: front cover, inside front cover, inside back cover, back cover, and spine.\n\nFront cover. Author and title, optionally publisher.\nSpine. Author and title, optionally publisher, series, volume, year….\nBack cover. Title, blurb, credits for the cover image, barcode or QR code, publisher.\nInside front and back cover. Could be empty.\n\n\nThe book is divided in three parts: front, main and back matter.\nFollowing Wddingham (2014, 3) and Chicago Press (2010, sec. 1.4) the frontmatter contains:\n\nhalf-title, recto\nverso of the half-title: empty, series title, frontispiece\ntitle page, recto\nverso of the title page: empty, copyright\ndedication\n\n\nThen (Hart):\n\nforeword\npreface\nacknowledgments\ntable of contents\nlists:\n\nillustrations,\nfigures,\nmaps,\ntables,\ntable of cases and legislation (law books)\nabbreviations\ncontributors\n\nnote to the reader\nepigraph\n\n\nOr (Chicago):\n\nepigraph\ncontents\nlists\n\nillustrations\ntables\n\nforeword\nPreface\nAcknowledgements (if not in preface)\nIntroduction (it not part of text)\nAbbreviations (if not in back matter)\nChronology (if not in back matter)\n\n\nBack matter\nFollowing Wddingham (2014, 17)\n\nappendix\nglossary\nendnotes\nbibliography\nnotes on contributors\nindexes\n\n\nFollowing Chicago Press (2010, sec. 1.4):\n\nacknowledgments (if not in front matter)\nappendices\nchronology (if not in front)\nabbreviations (if not in front)\nendnotes\nglossary\nbibliography\nnote on contributors\nillustration credits\nindexes"
  },
  {
    "objectID": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-journal",
    "href": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-journal",
    "title": "31  The structure of a book and a journal",
    "section": "31.2 The structure of a journal",
    "text": "31.2 The structure of a journal\nTypical order of pages.\n\nFront matter\n\neditorial board\ntitle\nimprint\n\nMain matter\n\narticle"
  },
  {
    "objectID": "chapters/design/52-pub-the-structure-of-volumes.html#non-english-conventions",
    "href": "chapters/design/52-pub-the-structure-of-volumes.html#non-english-conventions",
    "title": "31  The structure of a book and a journal",
    "section": "31.3 Non-English conventions",
    "text": "31.3 Non-English conventions\n\n31.3.0.1 Français\nCouverture: - première de couverture: - seconde de couverture: - troisième de couverture: - quatrième de couverture: - épine (dos): auteur, titre, maison d’édition (logo), …\nSuivant Collectif (2002):\nCouvertures intérieures ou rabats de la jaquette: autres ouvrages de la même maison, présentation de l’auteur.\nFacultatif: un feuillet blanc en début et fin de volume.\nEn tête de volume, pagination en chiffres romains:\n\nle faux titre, recto. Titre et sous-titre\nverso du faux titre: illustration de frontispice ou liste des oeuvres de l’auteur.\ntitre: recto. Titre, sous-titre auteur, copyright; eventuellement ISBN ou ISSN, édition, tirage, sommaire.\ndédicace: recto, après le titre.\navis ou avertissement: en verso de l’une des premières pages.\nchapitres en tête d’ouvrage, dans l’ordre:\n\navant-propos,\npréface,\nintroduction (cas exceptionnel, voir ci-dessous),\nnotice (par ex., notice sur les auteurs, ou sur l’utilisation de l’ouvrage, par exemple une liste d’abbréviations),\n(exceptionellement) bibliographie.\n\n\n\nEn corps de volume, les chapitres, pagination en chiffres arabes.\n\nl’introduction est normalement en corps de volume. Elle est placée en tête seulement si ne fait pas partie du corps: introduction du traducteur, de l’éditeur d’un texte historique, etc.\n\n\nEn fin de volume, pagination en chiffre arabe continuant celle du corps:\n\npostface,\nbibliographie (exceptionellement placée en tête),\nindex,\ntable des matières,\ncolophon: tirage, achevé d’imprimé, mention du dépôt légal, mention de l’imprimeur sur la dernière page.\n\n\n\n\n\nChicago Press, University of. 2010. The Chicago Manual of Style: The Essential Guide for Writers, Editors and Publishers. 16th edition. Chicago: University of Chicago Press.\n\n\nCollectif. 2002. Lexique des règles typographiques en usage à l’Imprimerie nationale. Paris: Imprimerie nationale.\n\n\nWddingham, Anne. 2014. New Hart’s Rules: The Oxford Style Guide. 2nd edition. New York, NY: OUP Oxford."
  },
  {
    "objectID": "chapters/publishing/42-ojs-advice.html",
    "href": "chapters/publishing/42-ojs-advice.html",
    "title": "(PART) Open Journal Systems",
    "section": "",
    "text": "Publishing with Open Journal Systems\nSome advice when using Open Journal Systems to publish. For more general questions about OJS see its support page."
  },
  {
    "objectID": "chapters/publishing/42-ojs-advice.html#uploading-reference-lists",
    "href": "chapters/publishing/42-ojs-advice.html#uploading-reference-lists",
    "title": "(PART) Open Journal Systems",
    "section": "Uploading reference lists",
    "text": "Uploading reference lists\nDialectica specific. When publishing an article on OJS we fill in the “References” metadata field with a text version of the articles’ references. Run the following in the issue folder:\nmake refs\n\nThis generates a article_name.bib.txt file for each article in an issue.\nNote: if you get an ’no target to make “refs”error, you need to renew the  Makefile. Runsh generatemakefile.shin the issue folder. If the scriptgeneratemakefile.shis missing, copy it again from the template folder'sEXTRAS/copyeditors-scripts-issue`.\nWindows user: these need to be run in a Linux terminal (using Windows Subsystem for Linux.)\nBackground: the text references are in American Psychological Association style. This ensures that multiple entries by the same author all start with the author’s name (rather than a long dash as in the Chicago style)."
  },
  {
    "objectID": "chapters/publishing/42-ojs-advice.html#uploading-html-article-with-images-or-imagified-latex",
    "href": "chapters/publishing/42-ojs-advice.html#uploading-html-article-with-images-or-imagified-latex",
    "title": "(PART) Open Journal Systems",
    "section": "Uploading HTML article with images or imagified LaTeX",
    "text": "Uploading HTML article with images or imagified LaTeX\nIf your article has images or imagified LaTeX as separate files, simply upload them as dependent files. OJS takes care of modifying the HTML to ensure they appear on the page.\nIllustration. Suppose that your galley file is author_2020.html with its images located in a media/ and its imagified LaTeX in imagify/:\n./\n- author_2020.html\n- media/\n    |- image1.svg\n- imagify/\n    |- 5e57052914c8be3062d7efe2237160c1e3c5bc11.svg\n    |- 834aba06fd119cd000555eac54ad1f6126400419.svg\n\nOn OJS, upload author_2020.html as article text and the svg files as dependent files (images). No need to worry about the directory structure."
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html",
    "href": "chapters/publishing/51-pub-why-markdown.html",
    "title": "(PART) Publishing",
    "section": "",
    "text": "Why publish a journal in markdown"
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#why-use-a-markdown-workflow",
    "href": "chapters/publishing/51-pub-why-markdown.html#why-use-a-markdown-workflow",
    "title": "(PART) Publishing",
    "section": "Why use a markdown workflow",
    "text": "Why use a markdown workflow\nA journal needs to produce outputs in different formats: html, PDF, possibly Epub. The aim is to generate all automatically from a single source. There are two ways to do this:\n\nXML.\nmarkdown.\n\n\nXML is the industry standard. But it is costly to work with (proprietary tools). markdown is a lighter-weight, popular authoring language.\npandoc is a powerful converter that turns a large number of formats into markdown and conversely. It can be harnessed to produce outputs in all formats, including XML."
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#ms-word---google-docs-workflow",
    "href": "chapters/publishing/51-pub-why-markdown.html#ms-word---google-docs-workflow",
    "title": "(PART) Publishing",
    "section": "MS Word - Google docs workflow",
    "text": "MS Word - Google docs workflow\n(to be elaborated on!)\n\n\nClean the MS word document using our tool: https://dialectica-philosophy.herokuapp.com/pandoc\n\n\n\nClean the MS word document\nImport it in Google Docs and edit it there, keeping all and only the meaningful elements (there’s a list in the document I’ll share). Don’t bother with fixing references at this stage.\nSave a snapshot of your document before you send it to the author.\nShare the edited document with the author, ask whether they’re happy with any modifications. You can activate the ‘track changes’ in google docs to make any major modifications visible to the author.\nReview the author changes, and once you and they are happy pass it on to the markdown team.\n\n\nTo check: what edits are preserved in markdown:\n\nCross References done with link & bookmark in google doc"
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#markdown-workflow",
    "href": "chapters/publishing/51-pub-why-markdown.html#markdown-workflow",
    "title": "(PART) Publishing",
    "section": "Markdown workflow",
    "text": "Markdown workflow\nThe accepted papers will be in either .doc, .docx (Word) or .tex (LaTeX) format.\n\nFirst we convert doc and tex files to markdown files (.md).\nThen we do all the editing using RStudio, a visual markdown editor (for steps on editing, see next paragraph).\nOnce the edits are done, the file is converted into a pdf which is sent back to the author for questions and / or for a final approval.\nIf there are more changes, they are done again in the markdown file, and the final version is again converted into a pdf, then sent to the author for final approval.\nOnce the final version is approved, we use Pandoc to convert the markdown file into a pdf (via LaTeX, which will have the determined style template) and html.\n\n\nEditing consists of:\n\nEditing the language (correct typos, bad English, strange sentences)\nPreserve and implement meaningful elements: headings, block quotations, formulas, … .\nCheck that the bibliography is correct: that every citation has a reference in the bibliography.\nReplace manually added citations by automatic ones (for Word files, the bibliography needs to be converted into a Bibtex file with a website that is yet to be developed. Latex papers will already have a Bibtex file).\nOnce all the changes are done, send the paper to the author for possible questions and to have their approval of the changes."
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#interaction-with-authors",
    "href": "chapters/publishing/51-pub-why-markdown.html#interaction-with-authors",
    "title": "(PART) Publishing",
    "section": "Interaction with authors",
    "text": "Interaction with authors\n\nTitle + abstract. Remind authors that most online searches will only &gt; return title and abstract. Most potential readers won’t get &gt; further. They are advised to choose their title and abstract well."
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#running-a-command",
    "href": "chapters/appendices/terminal-help.html#running-a-command",
    "title": "Appendix A — Terminal help",
    "section": "A.1 Running a command",
    "text": "A.1 Running a command\n“Entering” or “running” or “executing” a “command” on the terminal means typing some text and press the “Enter” key. For instance, type the following and press “Enter”:\npandoc --version\n\nIf you get an error message, this means that pandoc is not installed —not somewhere your system finds it, at any rate. If you get instead something like:\npandoc 3.1.2\nFeatures: +server +lua\nScripting engine: Lua 5.4\nUser data directory: /Users/julien/.local/share/pandoc\nCopyright (C) 2006-2023 John MacFarlane. Web:  https://pandoc.org\nThis is free software; see the source for copying conditions. There is no\nwarranty, not even for merchantability or fitness for a particular purpose.\n\nthen congratulations, you have just “run” or “executed” the command pandoc with the option --version. The program Pandoc has replied by printing out its version number."
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#copying-and-pasting-commands",
    "href": "chapters/appendices/terminal-help.html#copying-and-pasting-commands",
    "title": "Appendix A — Terminal help",
    "section": "A.2 Copying and pasting commands",
    "text": "A.2 Copying and pasting commands\nIn most terminals the usual copying-paste shortcuts (e.g. Ctrl + C, Ctrl + V) don’t work. But you should be able to copy/paste by using menus or right-clicking and chose “Paste”."
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#sec-terminal-help-navigation",
    "href": "chapters/appendices/terminal-help.html#sec-terminal-help-navigation",
    "title": "Appendix A — Terminal help",
    "section": "A.3 Navigation",
    "text": "A.3 Navigation\nYour terminal is always “at” or “in” some folder or other. We call it the “current folder” of the “present working directory”. On Windows’ CMD the folder you’re “in” is displayed at the beginning of the line:\nC:Users\\MyName&gt;\n\nOn Linux and MacOS you might only see the name of the folder you are in (myfolder), not the full path; and it might just be ~, which is a shorthand for your main user folder. You can run the pwd (“present working directory”) command to display its full name.\nWhere you are located matters to the execution of most commands. Suppose you run the command:\npandoc article.md -o article.pdf\n\nThis asks pandoc to convert the file article.md into article.pdf in the current folder. If you don’t run that command while being located in the folder where the file article.md is, you will get an error message telling you that there is no file of that name.\nSo basic terminal usage requires you to know which folder you are currently in, and how to change folder, and to refer to files in different folders. The commands you need are:\n\nList contents of current folder with ls (Linux/MacOS) or dir (Win).\ncd change directory. If your current folder contains a subfolder called MyFolder, you can get into it with cd MyFolder. You can use cd .. go “up” to the folder that contains yours. Several folders can be combined with the directory separator / (Linux MacOs) or \\ (Windows): cd MyFolder/article/example to go down three folders, cd ../.. to go up two.\n\n\nThat’s it! If you need more, you can learn in a few minutes using an online tutorial. Here are some, as of time of writing:\n\nLinux / MacOS: Command Line for Beginners. The Linux and MacOS terminals are essentially the same, so tutorials will work for both.\nMacOS: Navigating files and folders .\nWindows: How to use the Windows command line (cmd) Note that these instructions work with Powershell too.\n\n\nTry searching for “command line tutorial &lt;Win/Linux/MacOS” for more."
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#life-saving-tips",
    "href": "chapters/appendices/terminal-help.html#life-saving-tips",
    "title": "Appendix A — Terminal help",
    "section": "A.4 Life-saving tips",
    "text": "A.4 Life-saving tips\nIf you don’t use those tips you’ll find the command line frustrating. If you do use them you’ll probably get to like it.\n\nA.4.1 Don’t type file and folder names, use auto-completion\nIn the terminal you almost never need to type an entire file or folder name. Instead, type the first few letters and hit the “Tab” key one or two times.\n\nOn Linux/MacOS terminals, the first “Tab” hit will auto-complete if there’s only one way to complete. If there are several, nothing happens but a second “Tab” hit will list you the possible completions.\nOn Windows, the first “Tab” hit gives you one auto-complete possibility, hit again to see others.\n\n\nThis only applies to file and folder names. The terminal won’t guess which command you type (pand plus Tab won’t be completed to pandoc).\nAuto-completion is also a good way to avoid typos. If no completion shows up, you’ve probably mis-typed the beginning.\n\n\nA.4.2 File and folder names with spaces need quotation marks\nWhen you type file and folder names that contain spaces, you should enclose them in quotation marks (either single ' or double \"):\npandoc -s \"my article 2022.md\" -o \"output april 24th.pdf\"\n\nOn Linux and MacOS if you use auto-completion on Linux or MacOS, you’ll notice that the system places \\ before the spaces. This is called “escaping” the spaces and works too, but only in those systems:\npandoc -s my\\ article\\ 2022.md -o output\\ april\\ 24th.pdf \n\nOn Windows, \\ is used to separate folders, so you can’t use it. You have to use quotes.\nYou’re better off without spaces in your file and folder names, to be honest. Linux typically uses “kebab case”, skewering words with dashes: my-article-april-24th.pdf. “Snake case” with slithering underscores is good too: my_article_april_24th.pdf.\n\n\nA.4.3 Don’t retype commands, use up arrow\nExample: run the command ls (or dir on Win). Then, at the new prompt, type the Up arrow on your keyboard: you’ll see ls (or dir) displayed again, and you only need to type “Enter” to run it again.\nType the arrow several times to see the commands you’ve entered before last, before before last and so on.\n\n\nA.4.4 Move the cursor with quick arrows\nYou’ll find that in the terminal you can’t reposition the cursor with a mouse click. Instead, you have to move it with the left and right arrows. This can be frustratingly slow. The solution is to use quick arrows that move ‘word’ per ‘word’ (where a ‘word’ is any chunk of text separated by spaces):\n\nLinux: Alt + Left/Right arrow\nMacOS: option + Left/Right arrow\nWin: Ctrl + Left/Right arrow\n\n\nFor instance, if you typed a long command like this and got an error. You realize you need to replace “procesing” with “processing”:\npandoc -s procesing/new/articles/2020/issue-02/02-article.md --defaults mydefaultsfile.md -t outputs/recent/articles/2020/issue-02/02.article.pdf \n\n(See, you should have used auto-completion to avoid the typo!) So you hit the Up arrow, the command shows again. If you hit the Left arrow, you’ll need to press the key 137 times to get to the typo. You can keep it pressed instead, but that’s still very slow. If you use Alt/Option/Ctrl + Left arrow, you’re there in 5 times. Get used to it!\n\n\nA.4.5 Ctrl + C if a command hangs\nIf you run a command and it hangs, or takes too much time to run, you can (normally) interrupt it by hitting Ctrl + C (on all systems, MacOS included)."
  },
  {
    "objectID": "chapters/appendices/resources.html#style-and-copyediting-manuals",
    "href": "chapters/appendices/resources.html#style-and-copyediting-manuals",
    "title": "Appendix B — Further resources",
    "section": "B.1 Style and copyediting manuals",
    "text": "B.1 Style and copyediting manuals\n\nB.1.1 In English\n\nNew Hart’s Rules, the Oxford style guide. Short compared to the others, and it’s good on the British vs American options.\n\nFor copyeditors: see esp. chaps 2-12 and 17-18. In all those chapters there are of course many bits that are irrelevant for you but they are easy to skip.\n\n\nThe Chicago Manual of Style. The one we preferably refer to if needed, very thorough and good for humanities, but 1000 pages long.\nPublication Manual of the American Psychological Association. Like the Chicago manual, more geared towards science, and more prescriptive. The website gives free access to simplified version of the rules for authors. But these are not useful for copyeditors (they’ll tell you to your word processor’s automatic bullet points styles, for instance).\nButcher’s Copy-editing, the Cambridge Handbook for Editors, Copy-Editors and Proofreaders. A classic too, but different in scope from the others three. Unlike them doesn’t get into specific rules of punctuation, capitalization, spelling and the like. Rather, it maps out all the things a professional copyeditor has to do. A lot are things taken care of by our templates (how you can structure a book, how you can present various bits of it). Others are more general: which aspects of the author manuscripts should be changed or not, how to communicate these changes to the author, how to communicate instructions to typesetters, etc. Gives a good sense of how professional academic copyediting is like.\nMLA Handook. The style hanbook published by the Modern Languages Association of America.\n\n\n\nB.1.2 In French\n\n[Le Ramat de la typographie](http://www.ramat.ca/], par Aurel Ramat et Anne-Marie Benoit, franco-canadien. Voir aussi le Ramat européen de la typographie. Bien structuré, complet. Inclut des comparaisons entre styles français, canadien, Chicago.\nLe Guide du typographe, par le Groupe de Lausanne de l’Association suisse des typographes (AST) et publié par l’Association Suisse des Correcteurs d’Imprimerie. Difficile à se procurer (commander directement auprès de l’association).\n\n\nEn France, il y a une pluralité de livres écrits par des auteurs individuels. Nous ne savons pas lesquels sont les plus communément utilisés.\n\nDictionnaire orthotypographique moderne (Colignon 2019). Par Jean-Pierre Colignon, publié par l’une des principales écoles de journalisme en France (CFPJ).\nAbrégé du code typographique à l’usage de la presse, par Louis Guéry. (126 pages)\nDictionnaire des règles typographiques, par Louis Guéry. (287 pages)\nOrthotypo, par Jean-Pierre Lacroux, posthume, distribué en ligne sous licence Creative Commons (Lacroux 2010). Organisation alphabétique, ne couvre pas tous les sujets systématiquement.\nLes règles typographiques, Richard Herlin.\n\n\nOuvrages qui étaient largement utilisés par le passé:\n\nCode Typographique (France, 1928-1997). Inactif.\nLexique des règles typographiques en usage à l’Imprimerie nationale, par l’Imprimerie nationale de France. Inactif (dernière édition 2002). A usage limité: organisé par ordre alphabétique, avec un choix d’entrées qui semble arbitraire (ex, “Assemblée Nationale”, “Astérisque”), sommaire (une seule page sur la structure des ouvrages). Utile sur quelques points de détails (“particule patronymique”). 200 pages."
  },
  {
    "objectID": "chapters/appendices/resources.html#interface-with-dialecticas-main-bibliography",
    "href": "chapters/appendices/resources.html#interface-with-dialecticas-main-bibliography",
    "title": "Appendix B — Further resources",
    "section": "B.2 Interface with dialectica’s main bibliography",
    "text": "B.2 Interface with dialectica’s main bibliography\nMore information on the bibliography is in the bibliography-section of the overleaf-document.\nJD some experiments:\n\nTried simply adding the main bib file (biblio-check.bib) as the &gt; bibliography file of an article in RStudio. Problems:\n\nIt takes circa 15-30sec to ’Read the bibliography” when opening &gt; the article, and 10-20sec again when opening the &gt; insert-citation window.\nBut the bibliographies entries don’t show up in the &gt; ‘Bibliography’ tab.\nIt looks as if either RStudio can’t read it (bug / unusual code &gt; somewhere?), or just gives up above a certain number of &gt; entries\n\n\n\nJD thought: We need either:\n\nsome way of either generating a sub-selection of the main &gt; bibliography for the article. Automated? Something like Sandro’s / &gt; crossref bibtex convertor, but for this bibliography? (Suggestion: &gt; linking via DOIs?)\nSome way of having the main biblio as one of the source in RStudio &gt; citation-insertion popup, the way Zotero appears. However: risk &gt; that it is slow because of the size.\nSome way of searching the main biblio as one of the sources in &gt; RStudio, the way CrossRef appears in the citation-insertion popup."
  },
  {
    "objectID": "chapters/appendices/glossary.html",
    "href": "chapters/appendices/glossary.html",
    "title": "Appendix C — Glossary",
    "section": "",
    "text": "Block\n\nA block element of a document, such as a paragraph. Blocks include paragraphs, headings, block quotes, lists, code blocks.\nBlock elements are distinguished from inline elements (arranged horizontally in lines within a block, like words) and float elements (that don’t have a fixed position in the text flow, like figures and tables).\nSome elements have both block and inline versions (images, formulas). Some have both block and float versions (images, tables).\nSome blocks may contain other blocks: block quotes can consist of several paragraphs.\nDivs are arbitrary ‘container’ blocks. They are used to group blocks into units to which special typesetting rules can be applied.\n\nDiv\n\nAn arbitrary container blocks. Divs can have a unique identifier, classes and attributes. Classes are types of Divs, attributes are features that can take various values.\nDivs are used to group blocks into a unit to which special typesetting rules can be applied. How Divs are typeset is determined by your house template and the extensions it uses.\nFor instance, this bit of markdown places a paragraph in a Div uniquely identified as firstpostulate, of type (class) statement, with a style attribute of value theorem:\n::: {#firstpostulate .statement style=\"theorem\"}\n\nA line can be drawn from a point to any other point.\n\n:::\n\nInline\n\nAn inline element, such as a word. Inlines include words, emphasized text, citations, inline formulas, inline code.\nInlines elements are distinguished from block elements (arranged vertically one after another, like paragraphs) and float elements (that don’t have a fixed position in the text flow, like figures and tables).\nSome elements have both inline and block versions (e.g. formulas, images, quotations, code).\nSpans are arbitrary ‘container’ inlines. They are used to group inlines into units to which special typesetting rules can be applied.\n\nTerminal\n\nA tool to interact with your computer via text commands. Also called “command line interface”, “shell”."
  },
  {
    "objectID": "chapters/appendices/references.html",
    "href": "chapters/appendices/references.html",
    "title": "Appendix D — References",
    "section": "",
    "text": "Chicago Press, University of. 2010. The Chicago Manual\nof Style: The Essential Guide for\nWriters, Editors and\nPublishers. 16th edition. Chicago:\nUniversity of Chicago Press.\n\n\nColignon, Jean-Pierre. 2019. Dictionnaire orthotypographique\nmoderne. 1er édition. EFE - CFPJ Editions.\n\n\nCollectif. 2002. Lexique des règles typographiques en usage à\nl’Imprimerie nationale. Paris: Imprimerie\nnationale.\n\n\nDoe, Jane. 2019. “Another Imaginary Article.” Review of\nIdeas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\n———. 2020. “An Imaginary Article.” Review of Ideas\n10: 13–27. https://doi.org/10.0000/123456789.\n\n\nDoe, John. 2018. “Introduction.” In An Imaginary\nBook, by John Smith. Mainville: Ideas Press.\n\n\nJones, Jane. 2019. “Yet Another Imaginary Article.”\nReview of Ideas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\nLacroux, Jean-Pierre. 2010. ORTHOTYPO - Dictionnaire raisonné\northographe et typographie Française. 2e édition.\nParis: La Maison du Dictionnaire.\n\n\nSmith, John. 2018. An Imaginary Book. Mainville: Ideas Press.\n\n\nWddingham, Anne. 2014. New Hart’s Rules:\nThe Oxford Style Guide. 2nd edition. New York,\nNY: OUP Oxford."
  }
]