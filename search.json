[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open Manual of Markdown Style",
    "section": "",
    "text": "Preface\nThis book is an open manual of style for scholarly publishing using markdown. Open because it focuses on open-source software tools and is targeted at open-access publishers. Of markdown style because it combines style and technical advice for producing professional-quality publications using markdown. The manual itself is open-source, open-access and written in markdown.\n\nPresentation\nThe OMMS aims to make markdown-based professional-quality publishing available to academic teams with no advanced technical knowledge. It explains how to convert manuscripts into, or author them as, markdown documents, and turn them into beautifully typeset outputs in multiple print and digital formats.\nNo prior knowledge of markdown is required; authoring and copyediting can largely be done using visual tools. Production, however, realistically requires some technical knowledge (CSS for web output, LaTeX for print output).\n\n\nRelation with Quarto\nThe OMMS overlaps with, and complements, the excellent Quarto documentation.\n\nThe OMMS focuses on copyediting and production. It is aimed at small publishing outfits rather than authors - though you can use it to write a thesis.\nThe OMMS gives prescriptive style and typesetting advice. It’s a manual of style rather than technical documentation.\n\n\n\nStatus\nThe manual is a work in progress. It is used to produce the open-access philosophy journal Dialectica and compiles the solutions we’ve adopted to deal with a range of typesetting problems. It is fairly extensive but far from complete.\n\n\nEdit the guide\nYou’re welcome to edit the guide. To do so:\n\nInstall Quarto. Some package managers have it (brew install quarto on MacOs, choco install quarto on Windows, but not on Linux.) See 30  Dialectica new house style outputs on package managers.\nOpen the guide folder in RStudio (or Visual Code, if you use Quarto with that).\nChapters are listed in _quarto.yaml . If you create a new chapter you need to add it here.\nChapter files are in the chapters folder - obviously. Numbers in their names are for convenience: they ensure that chapters in the folder appear in the same order as they appear in the book.\nChapters can be edited in visual or source mode. They’re “Quarto markdown” (.qmd) files but that’s just like Pandoc markdown.\nTo render a chapter open and it and use Render &gt; Render HTML. You’ll see the output in RStudio’s preview pane.\nTo render the whole book Build &gt; Render Book or open the index.qmd file and do Render &gt; Render HTML.\n\n\n\nCredits and license\nDeveloped by the Dialoa team and philosophie.ch.\nCopyright 2021-23 Julien Dutant\n This work licensed under a Creative Commons Attribution 4.0 International license.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/authoring/00-aut-intro.html",
    "href": "chapters/authoring/00-aut-intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This part gives instructions for authors.",
    "crumbs": [
      "Authoring",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/authoring/10-aut-instructions.html",
    "href": "chapters/authoring/10-aut-instructions.html",
    "title": "2  Instructions for authors",
    "section": "",
    "text": "2.1 Generic\nAuthors can prepare manuscripts in markdown, docx, LaTeX, html formats. Below are some recommendations for authoring manuscripts in formats other than markdown. For markdown format, they can use the copyeditor recommendations of this guide.\nProvide an informative abstract, 50 to 200 words.\nFormulate it carefully: it is indexed in databases and search engines, and plays in crucial role in the long-term visibility of your article.",
    "crumbs": [
      "Authoring",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instructions for authors</span>"
    ]
  },
  {
    "objectID": "chapters/authoring/10-aut-instructions.html#ms-word",
    "href": "chapters/authoring/10-aut-instructions.html#ms-word",
    "title": "2  Instructions for authors",
    "section": "2.2 MS Word",
    "text": "2.2 MS Word\nAuthors should use Word’s styles:\n\nHeading 1, Heading 2 etc for headings\nTitle for the title\nBlock citations\n(optional) Author for author (requires creating a style called “Author)\n\n\nFormulas should be entered in Word’s equation mode. This helps our document converter to turn them into reusable LaTeX formulas.\nReferences should be provided in a separate BibTeX (.bib) or CSL-Json file (e.g. using Zotero).\n[Requires extension: sections-to-meta] Abstract and acknowledgements should be provided below “Abstract” and “Acknowledgements” headings at the beginning of the paper. If the paper itself doesn’t start with a heading, separate those from the main text by a horizontal line (three dashes and return).\nIf the document contains complex mathematical symbols or formulas, make sure that these are put in “equation mode”. This ensures that pandoc converts them to LaTeX code and spares you the need to re-encode them.\nThere are various ways in which authors can make the editing process easier and quicker:\n\nChecking their bibliography for mistakes\nSending their bibliography as a .bib file, which can easily be created if they use software such as Zotero.\n(If they use Word) Preparing their Word document: writing their formulas in “equation mode”, using the definite styles for article title, abstract, author name, section titles, block citations.\nRemind them of the importance of a good title and abstract.",
    "crumbs": [
      "Authoring",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instructions for authors</span>"
    ]
  },
  {
    "objectID": "chapters/authoring/10-aut-instructions.html#latex",
    "href": "chapters/authoring/10-aut-instructions.html#latex",
    "title": "2  Instructions for authors",
    "section": "2.3 LaTeX",
    "text": "2.3 LaTeX\nAuthors should provide a LaTeX source file, with references in a a separate BibTeX file and any included file (images, preamble) or package not available in standard distributions.\nTikZ figures and other advanced packages (ie those that aren’t handled by MathJax) should be compilable as standalone documents.",
    "crumbs": [
      "Authoring",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Instructions for authors</span>"
    ]
  },
  {
    "objectID": "chapters/authoring/11-aut-grammar-usage.html",
    "href": "chapters/authoring/11-aut-grammar-usage.html",
    "title": "3  Grammar and usage",
    "section": "",
    "text": "3.1 Possessives\nPossessives and plural. Distinguish shared vs separate ownership:",
    "crumbs": [
      "Authoring",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grammar and usage</span>"
    ]
  },
  {
    "objectID": "chapters/authoring/11-aut-grammar-usage.html#possessives",
    "href": "chapters/authoring/11-aut-grammar-usage.html#possessives",
    "title": "3  Grammar and usage",
    "section": "",
    "text": "Ali and Ben’s book(s). The book(s) jointly authored by Ali and Ben.\nAli’s and Ben’s book(s). The book(s) authored by Ali and the book(s) authored by Ben.",
    "crumbs": [
      "Authoring",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grammar and usage</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/12-cop-preliminaries.html",
    "href": "chapters/copyediting/12-cop-preliminaries.html",
    "title": "4  Preliminaries",
    "section": "",
    "text": "4.1 What you need\nThis chapter explains what you need to set up a markdown production chain.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Preliminaries</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/12-cop-preliminaries.html#what-you-need",
    "href": "chapters/copyediting/12-cop-preliminaries.html#what-you-need",
    "title": "4  Preliminaries",
    "section": "",
    "text": "4.1.1 Skills\n\nUse a text editor (VSCode or RStudio will do).\nOptionally, use RStudio’s visual editor. This provides a MS Word-like way of editing a markdown document: no need to view the source code. An easy entry into markdown and a nicer way to edit. See Section 6.5.\nOptionally, how to use the command line interface. The very basics are enough: navigate to a directory, run a command. See Appendix A.\n\n\n\n4.1.2 Software\nAll the software needed is free: Pandoc, LaTeX and optionally RStudio.\nSee the Dialectica chapter on generating outputs to set yourself up Chapter 30.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Preliminaries</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/12-cop-preliminaries.html#working-folder",
    "href": "chapters/copyediting/12-cop-preliminaries.html#working-folder",
    "title": "4  Preliminaries",
    "section": "4.2 Working folder",
    "text": "4.2 Working folder\nCreate a working folder for your journal. This may be shared between copyeditors if you’re a team. We suggest a structure such as this:\ntree/copyediting\n└── 2023-v51\n    ├── 01-i01\n    │   ├── 01-ehrenfest-afanassjewa\n    │   │   └── history\n    │   └── 02-estrin\n    └── 03-i02\n        ├── 01-ehrenfest-afanassjewa\n        │   └── history\n        └── 02-estrin\n            └── history\ntree/published\n└── 2023-v50\n    ├── 01-i01\n    │   ├── 01-ayrton\n    │   │   └── history\n    │   └── 02-berdichevsky\n    │       └── history\n    └── 03-i02\n        ├── 01-borg\n        │   └── history\n        └── 02-daubechies\n            └── history\ntree/guide\ntree/resources\n└── fonts\ntree/template\n├── 1.0\n│   ├── defaults\n│   ├── filters\n│   ├── metadata\n│   └── scripts\n└── 1.1\n    ├── defaults\n    ├── filters\n    ├── metadata\n    └── scripts\n\n\nWe’re dividing the articles in two stages, copyediting and published. We could further divide copyediting into copyediting proper (language, style) and production (typesetting) but these tend to be intertwined in markdown production.\n‘Copyediting’ and ‘published’ folders are organized by year-volume and month-issue.\nEach article has its own folder, with a history subfolder to keep track of the author’s original submissions and revisions.\nTo these we add a few other folders for resources shared among copyeditors:\n\ntemplate: template engine to produce the journal. This might change over the years, so it is organized by versions. Each issue includes metadata that indicate which version of the template was used. It includes scripts that copyeditors may need to copy or use.\nguide: this guide\nresources: resources such as fonts, logos, documentation.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Preliminaries</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/12-cop-preliminaries.html#new-workflow-start-draft",
    "href": "chapters/copyediting/12-cop-preliminaries.html#new-workflow-start-draft",
    "title": "4  Preliminaries",
    "section": "4.3 New Workflow Start [Draft]",
    "text": "4.3 New Workflow Start [Draft]\nNote: below, when saying “in a terminal”, we mean either PowerShell on Windows, or your default terminal in Mac or Linux. All of the commands provided should work in all PowerShell (Windows), zsh (Mac) and bash (Linux).\nThe association is setting up a standardized compilation environment for Dialectica. The environment is encapsulated in a docker container and includes all of the tools needed for the copyediting work, including pandoc, LaTeX, Quarto, and the fonts. The idea is that you will only need to interact with the container in your local machine, as if it was a “box” containing the Dialectica copyediting tools, without needing to install each tool separatedly.\nIn this way, all of the copyeditors can share a single complete environment (i.e., the versions of all of the tools used by the team will be the same), minimizing compiling problems and compatibility issues. This also allows for issues to be fixed in a centralized manner, as new versions of the environment (with fixed issues) will affect everyone.\nFollow the steps here everytime you want to start working using the Dialectica compilation environment. This section assumes you have already set up your machine as explained in Chapter 30.\n\nFirst make sure that docker is running. In a terminal, do:\ndocker ps\nIf there are no errors, then docker is running. If not, try the following to start docker:\n\nOn Windows and Mac, open Docker Desktop, and make sure that the “whale” icon appears in your tray\nOn Linux, in a terminal, do sudo service docker start\n\n\n\nWait until docker starts, and do docker ps again.\n\nIn the output of docker ps you should see a container with the name dltc-env running.\nIf you opted to stop the container last time you were working, then you won’t see it in the output and you need to start it up again:\ndocker start dltc-env\nStart VSCode, select “Remote Explorer” on the vertical toolbar to the left, select “Dev Containers” on the dropdown menu above, then hover above “compilation-env” and click on the arrow next to it. You can now “Open Folder” and choose “dltc-workhouse”, which is the same folder you have in\nDropbox.\n\n\nAll set, you’re ready to work. Remember that you can open a terminal inside VSCode (in the menu above: Terminal &gt;&gt; New Terminal), which will give you a terminal inside the container. Here you’ll find all of the tools you need (pandoc, LaTeX, Lua, quarto, dltc-make, and the fonts).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Preliminaries</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/13-cop-preparing-a-manuscript.html",
    "href": "chapters/copyediting/13-cop-preparing-a-manuscript.html",
    "title": "5  Preparing a manuscript",
    "section": "",
    "text": "5.1 Create a working folder for your article\nSteps to prepare a manuscript for copyediting.\nIf you don’t have a dedicated working folder for your article, create one.\nIf you’re going to use RStudio, create a project for the article with File &gt; New Project…. Use ‘Existing directory’ if your project already has a folder, otherwise “Create project in a new directory” to create one.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Preparing a manuscript</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/13-cop-preparing-a-manuscript.html#place-original-materials-in-a-preserved-folder",
    "href": "chapters/copyediting/13-cop-preparing-a-manuscript.html#place-original-materials-in-a-preserved-folder",
    "title": "5  Preparing a manuscript",
    "section": "5.2 Place original materials in a preserved folder",
    "text": "5.2 Place original materials in a preserved folder\nA submission comes with a manuscript file and possibly others: bibliography, PDF version, figures, etc. It’s handy to have those in your working folder for the article, but you want to keep them safe. Place them either in a subfolder called original or history. (The history folder will then be used to keep track of your exchanges with the author.)",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Preparing a manuscript</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/13-cop-preparing-a-manuscript.html#convert-to-markdown",
    "href": "chapters/copyediting/13-cop-preparing-a-manuscript.html#convert-to-markdown",
    "title": "5  Preparing a manuscript",
    "section": "5.3 Convert to markdown",
    "text": "5.3 Convert to markdown\nTwo options: conversion box (RStudio) or with Pandoc. The first is easy if you’re not familiar with the terminal and allows you to do a bunch of manuscripts at once. The second is faster for a single manuscript once you’ve learnt how to do it.\n\n5.3.1 With the conversion box and RStudio\nRequires RStudio and a conversion-box folder at the root of journal’s working folder.\n\nDelete any manuscript already present in the conversion-box folder: Word files (.docx, .doc), LaTeX files (.tex), markdown or quarto files (.md, .qmd). This is a temporary folder, whomever left it there has made copies.\nCopy your original manuscript (MS Word, LaTeX) in the conversion-box folder. You can copy several if you want to convert multiple manuscripts in one go.\nRename the manuscript file(s) if necessary: manuscript filenames must not contain spaces, colons, question or exclamation marks.\nOpen conversion-box.Rproj in the conversion-box folder. This opens RStudio in the ‘conversion box’ project.\nIn RStudio, do Build &gt; Build All, or equivalently hit Shift-Ctrl-B (Win. Linux) or Shift-Cmd-B (Mac). This converts any MS Word or LaTeX file in the folder to markdown.\nCopy the resulting markdown file from the conversion-box to your article’s working folder.\n\n\n\n5.3.2 With Pandoc only\nOpen a terminal. If using RStudio or VSCode, there is a Terminal tab. This opens a terminal already located in your article’s working folder. If you’re opening a terminal from your system, you need to navigate (using cd, change directory commands) to your article working folder.\nIf you need help with using the terminal see section Appendix A.\nRun the following command:\npandoc -s original/manuscript.docx -o manuscript.md\n\noriginal/manuscript.docx is the path and filename of the original manuscript. Here I’m assuming that the submission is called manuscript.docx and placed in a folder original. On Windows we use backlash to mark folders so that would be original\\mansucript.docx instead.\n-o manuscript.md tells pandoc to convert to markdown (.md) and save the result as manuscript.md in your cuurent folder.\n-s, short for --standalone, tells Pandoc to produce a “standalone” document, i.e. include a header with any metadata it is able to extract from the source.\n\n\nFor instance, if your terminal was not located in your article working folder but in its original subfolder, and you wanted to write the result in the main sufolder (i.e. one folder up), you’d use instead:\npandoc -s mansucript.docx -o ../manuscript.md\n\nWhere ../ (..\\ on Windows) means “one folder up”.\n\n5.3.2.1 LaTeX manuscripts: check the bibliography field\nConverting from LaTeX is the same, but pay attention to the bibliography file location. The resulting markdown file may have a bibliography key:\nbibliography: original/references.bib\n\nbibliography: C:/Windows/Users/Zotero/references.bib\n\nUpdate these if needed. Here original is the subfolder for preserving the original: I should instead copy the .bib file to the main article folder and replace this key with bibliography: references.bib. The second one, C:/Windows... is a location in the author’s computer as it was cited in their LaTeX file, it should be removed.\n\n\n5.3.2.2 More options for Pandoc conversion\nSee Pandoc’s Manual: reader options for more options.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Preparing a manuscript</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html",
    "href": "chapters/copyediting/15-cop-markdown-intro.html",
    "title": "6  About Markdown copyediting",
    "section": "",
    "text": "6.1 Aims\nIn an automated copyediting workflow, the job of the copyeditor isn’t to fine-tune the appearance of the output (fonts, spacing, etc.) Rather, the copyeditor’s job is to encode all, and only, the manuscript’s features that the automatic converter needs to know about.\nTypical manuscripts (MS Word documents, LaTeX file) contain both too much and too little information for a publisher’s purposes. A MS Word file contains information about font use and margin size, which the publisher must get rid of since they’re applying their own font and margins. It also typically fails to encode crucial information in in a machine-readable way. For instance, an author may:\nOur copyediting task is to remove unnecessary formatting, and turn important features into codes that the automatic processor can pick up and deal with.\nMarkdown is a light-weight, intuitive way of encoding meaningful features. For instance:",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#aims",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#aims",
    "title": "6  About Markdown copyediting",
    "section": "",
    "text": "use mere boldface to indicate their section titles: 1. Methods. A human reader understands that they mean a section heading. But an automatic converter needs to know that this is section title, and not a simple bold text, to typeset it correctly.\nmanually write ‘(Dupuis 2020, pp. 29-42)’ for their citations. If an automatic converter knows that this is a citation of a given paper, at a given page range, it can turn it into a link, format it consistently throughout the journal (instead of ‘2020: 29–42’ in some papers and ‘2019, pp.12-15’ in others), and check that all and only references cited appear in the bibliography.\nmanually write internal cross-references (“see fn. 6”, “see page 8”). If an automatic converter knows that these are meant to refer to other parts of the text, they can turn them into links and adjust them if the numbering changes.\n\n\n\n\n\na *simple* solution encodes a word that needs to be emphasized (typically, italics, but it’s for the automatic converter to decide).\n# Methodology encodes a heading titled “Methodology”.\n[@Doe2019, 22-29] encodes a citation of the pages 22 to 29 of an article that the converter will find under the name Doe2019 in the article’s associated bibliography file.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#style",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#style",
    "title": "6  About Markdown copyediting",
    "section": "6.2 Style",
    "text": "6.2 Style\nWe will rely on the Chicago Manual of Style in most cases, except where we state otherwise.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#what-to-encode",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#what-to-encode",
    "title": "6  About Markdown copyediting",
    "section": "6.3 What to encode",
    "text": "6.3 What to encode\nWhen copyediting we need to decide which features of the original manuscript we want to keep, or encode, in our document. For instance, we don’t want to keep the author’s specific choice of fonts, or whether they italicize headings. But we do want to keep italics used for emphasis, or hyphens used to cut a word at the end of a line.\nThe goal is to encode non-stylistic features of the article, and those features only. The stylistic or merely presentational ones are handled automatically by your journal style.\nThe features we keep are encoded in markdown syntax. For instance, emphasis (italics) is encoded by enclosing words within asterisks:\nIn this sentence the last world is *emphasized*.\n\nWhen a feature is encoded, the journal’s template ‘understands’ it. This means that it’ll be able to typeset it correctly, according to the journal style, in all the outputs formats we need—PDF, webpage, ebook.\nHere’s a list of features we want to encode. The list is in progress: not everything we want to encode is handled by our template yet. An X under “syntax” means that there is markdown code (aka syntax) to encode the feature in question. An X under “implemented” means that our template is able to typeset the feature in question.\n\n\n\n\n\n\n\n\n\nFeature\nSyntax?\nImple mented?\nNote\n\n\n\n\nHeadings\nYes\nYes\n\n\n\nParagraphs\nYes\nYes\n\n\n\nFootnotes\nYes\nYes\n\n\n\nEmphasis (italics, bold)\nYes\nYes\n\n\n\nSuperscripts and subscripts\nYes\nYes\n\n\n\nCitations\nYes\nYes\n\n\n\nCross-reference: heading\nYes\nYes\n\n\n\nCross-reference: footnote\nYes\nNo\n\n\n\nCross-reference: specific location\nYes\nNo\nMust be handled separately in PDF vs HTML.\n\n\nCross-reference: image, figure, table\nYes\nYes\n\n\n\nCross-reference: theorem, statement\nYes\nYes.\n\n\n\nQuotations: block quotations\nYes\nYes\nEncoding the source too?\n\n\nQuotations: inline\nYes\nYes\nUnnecessary. Ordinary ’ or ” is enough.\n\n\nLists: numbered, unnumbered\nYes\nYes\n\n\n\nLists: continuously numbered throughout the text\nYes\nYes\n\n\n\nLists: ad-hoc numbers ((9’), (a*)…)\nYes\nYes\n\n\n\nStatements: simple indented blocks\nYes\nYes\n\n\n\nTables\nYes\nYes\n\n\n\nTables: column alignment\nYes\nYes\n\n\n\nTables: cells spanning several rows or cols\nNo\nYes\nhandled by pandoc but not documented yet\n\n\nTables: custom borders\nNo\nNo\n\n\n\nFormulas\nYes\nYes\n\n\n\nImages\nYes\nYes\n\n\n\nLinks\nYes\nYes\nas bib entries or footnotes\n\n\nColumns (incl. formulas side by side)\nYes\nYes\n\n\n\n\nHere are some features not to be preserved:\n\n\n\n\n\n\n\nFeature\nNote\n\n\n\n\nLinks in the text\nPreferably as bibliography entries, otherwise in footnotes\n\n\nCurly quotes\nhandled by pandoc\n\n\nSpecial positioning of formulas, tables, …\nTo be avoided as much as possible\n\n\n\nNote on special symbols:\n\nSpecial symbols must typically be preserved. For instance, the double square brackets should not be entered as [[ and ]] but with their LaTeX codes \\\\llbracket and \\rrbracket.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#about-markdown",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#about-markdown",
    "title": "6  About Markdown copyediting",
    "section": "6.4 About Markdown",
    "text": "6.4 About Markdown\nMarkdown is a syntax - a way of writing or encoding document. A markdown document is a plain text file that can be viewed in any text editor REWRITE THIS\nis a syntax enhanced plain text with machine-readable information, a.k.a. ‘markup’. More specifically, we’ll use pandoc’s Markdown - the variant of that syntax that is most suited to academic texts and that is fully understood by our automatic converter, pandoc.\nThe copyediting files we work on are thus in pandoc’s Markdown format (extension .md). These are just plain text documents, which can be edited with any text editor (Notepad, TextEdit, …), but where we use a certain codes to encode information needed by our automatic document converter (pandoc). For instance, a document may contain the line:\n\n\nIn this article, I will prove that the *metaphysical* question is not nonsense.\n\n\nwhere the * encode the fact that the word “metaphysical” is emphasised. The automatic converter can pick up on that information and typeset the word accordingly in the PDF and HTML outputs. Typically, emphasized words are typeset in italics, but we could decide to typeset them with small caps or letter spacings as well. So we only encode the fact that the word is to be emphasized, using the * notation, and leave the rest to the converter.\nThe official documentation of pandoc’s Markdown can be used to supplement the instructions below.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#sec-rstudio-visual-source-modes",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#sec-rstudio-visual-source-modes",
    "title": "6  About Markdown copyediting",
    "section": "6.5 RStudio visual markdown editor",
    "text": "6.5 RStudio visual markdown editor\nFor background see also Quarto’s page on RStudio visual mode.\nWhen you open a markdown file in RStudio, you’ll see Source and Visual tabs in the upper left corner. These are two different ways of visualizing the same document. The Source mode shows the document as it is, namely a plain text markdown file. The Visual mode shows the document as a webpage would display HTML code, or as a word processor like MS Word displays documents: text encoded with emphasis is shown in italics, text encoded as headings is shown in a larger font, etc.\nHere’s the Source mode:\n\n\n\nRStudio’s source mode (2023)\n\n\nHere’s the Visual mode:\n\n\n\nRStudio’s visual mode (2023)\n\n\nYou can switch between modes by clicking the ‘Source’ and ‘Visual’ tab. Exception: RStudio may refuse to switch to Visual if doing so would break down some elements in your document. (This is notably the case with numbered examples.)\nThe Visual mode allows you to edit without using markdown code. You can insert headings, italics, formulas, tables and so on by clicking in the menus. You can also insert more complicated structural elements, e.g. a Div with its id and attributes.\nThe Source editor shows you the markdown file as it is. There’s some syntax highlighting to help you visualize markdown codes.\nThere’s a useful “outline” button at the top left to see the headings of the document.\nYou can still type markdown in the visual editor—it’s usually faster to do so. Try it out: type ## Test at the beginning of a line and the line will be converted to a level 2 heading. You can type formulas, enter Divs and so on.1\nThe visual editor is good for initial copyediting (if your document allows using it): you’ll see the text and typos better. The source editor is good final copyediting and typesetting: you see the exact code used to generate your output and you fix special characters, line breaks, explicit LaTeX code and the like.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#heads-up-on-special-characters-in-markdown",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#heads-up-on-special-characters-in-markdown",
    "title": "6  About Markdown copyediting",
    "section": "6.6 Heads up on special characters in markdown",
    "text": "6.6 Heads up on special characters in markdown\nIn Markdown the characters below are sometimes have a special meaning:\n\\ & * $ [ ] _ @\nNormally, you shouldn’t have to worry about them. But if they aren’t visible or your markdown file generates error when turned into PDF, they may be the culprit. Typically the error can be avoided by ‘escaping’ the character, i.e. preceding it with a backslash. Hence:\n\\& means & (nb, mandatory in BibTeX files!)\n\\* means *\n\\\\ means \\\n\\$ means $\nEtc.\nThe one exception is the square brackets. Markdown syntax allows two ways of encoding math formulas: wrapping them in $ or wrapping them in parentheses or brackets:\n\n$...$ and \\(...\\) can be used to enter an inline formula\n$$...$$ and \\[...\\] can be used to enter a display (i.e. block) formula\n\n\nSo if you try to espace both an opening and a closing bracket, your markdown will be read as a math formula.\nHere are problem cases you might encounter:\n\nA reference cited is titled Fear & Loathing in Las Vegas. You have the title with & in your BibTeX file, and it generates an error.\nThe problem is that in LaTeX/BibTeX & is a special character (to indicate tabs).\nSolution: ‘escape’ the ampersand in your BibTeX file:\n  title = {Fear \\& Loathing in Las Vegas}\nYour text has a pair of asterisks:\nPrinciple (*) is strong. Principle (*) is stronger than Principle (**). \nThe text between the asterisks is wrongly interpreted as emphasized:\n\nPrinciple () is strong. Principle () is stronger than Principle (**).\n\nSolution: escape the asterisks:\nPrinciple (\\*) is strong. Principle (\\*) is stronger than Principle (\\*\\*). \n\nPrinciple (*) is strong. Principle (*) is stronger than Principle (**).\n\nSquare brackets for elided texts in citations. In practically all cases they’ll be fine. The following markdown code will display as intended, for instance:\nThe [simple] models [...] are useful\nThere’s only trouble in a rare case: the elided text matches a section header. For instance, suppose you have:\nThe simple [models] are useful.\n\n## Models\nThis is wrongly interpreted as a link:\n\nThe simple models are useful.\n\nWhy? Pandoc automatically assign the header “Models” a link identifier: models (see the chapter on cross-referencing). And if this identifier is present, [models] becomes a link to it. And one of the section headings is “Models”.\nSolutions:\n\nIf you’re working in markdown code, leave it as is. We run pandoc with an option that disables these links.\nIf you’re working in the RStudio visual mode, add an identifier to the header, ## Models {#sec:models} (Pandoc) or ## Models {#sec-models} (Quarto)",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/15-cop-markdown-intro.html#footnotes",
    "href": "chapters/copyediting/15-cop-markdown-intro.html#footnotes",
    "title": "6  About Markdown copyediting",
    "section": "",
    "text": "Limitations: if many LaTeX formulas are inline in one paragraph the visual editor struggles to parse them and may mangle them, turning some text into formulas and the other way round; if so you’d better off using the source mode.↩︎",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>About Markdown copyediting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/155-cop-checklist.html",
    "href": "chapters/copyediting/155-cop-checklist.html",
    "title": "7  Copyeditor workflow",
    "section": "",
    "text": "7.1 Copyediting workflow\nYour article folder should contain a copyediting checklist and a revision tracker. Use the checklist on your first round of copyediting the article. Use the revision tracker to keep track of unfinished tasks and communications with the author (changes that you need to notify the author of, questions you need to ask them, record of their answers).\nFor instance, use a subfolder history and put in it files checklist.md for the checklist and r1.md, r2.md for revision rounds.\nBelow are examples of checklist and revision document for you to copy/paste.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Copyeditor workflow</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/155-cop-checklist.html#copyediting-workflow",
    "href": "chapters/copyediting/155-cop-checklist.html#copyediting-workflow",
    "title": "7  Copyeditor workflow",
    "section": "",
    "text": "Pre-conversion changes (optional). Fix the author’s MS Word or LaTeX document for better conversion results. In MS Word: use headings styles, metadata sections, and optionally use equations for formulas and special symbols. In LaTeX: usually nothing is needed, but sometimes unnecessary LaTeX commands and packages need to be removed (e.g., framed boxes).\nConvert to markdown.\nMetadata. Fill in the metadata.\nSection headings. Check that section headings are encoded, given them identifiers for crossreferences (optional).\nFormat elements. Apply markdown formatting to blockquotes, lists, statements, formulas, etc.\nCross-references. Encode cross-references within the document (to section headings, footnotes, statements etc.).\nCitations. Encode citations in Markdown. If using Zotero: create a (sub)collection for the paper, look up the citations online and add them to the collection using Zotero’s browser plugin. Export the collection as a BibTeX file (.bib) in your article folder. Insert the citations in the document, ideally using a Zotero-markdown plugin for your editor (e.g. Citation Picker for Zotero in VS code).\nAdd a # References heading at the end of the document.\nRender the output and proofread.\nGo through the checklist.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Copyeditor workflow</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/155-cop-checklist.html#the-checklist",
    "href": "chapters/copyediting/155-cop-checklist.html#the-checklist",
    "title": "7  Copyeditor workflow",
    "section": "7.2 The checklist",
    "text": "7.2 The checklist\n## Importing and Preparing the Original Document, Setting up Workspace\n\n- [ ] Create working folder. If using Rstudio, create a project.\n- [ ] Copy original manuscript in the folder (`original` subfolder).\n- [ ] Prepare manuscript for conversion (headings styles, footnotes, formulas), so that pandoc recognizes most of the things. \n- [ ] Convert to markdown with `pandoc -s &lt;originalfile&gt; -o &lt;outputfile.md&gt;`. \n- [ ] Create revison tracker files: create `history` folder, create a file `r1.md` in it and copy this checklist into it.\n\n## Formatting\n\n- [ ] Complete metadata block: title, author, affiliation, abstract, thanks, bibliography, nocite (if needed).\n- [ ] Sections: are they formatted correctly at all levels?\n- [ ] Footnotes: are they formatted correctly?\n- [ ] Quotations: are they formatted correctly? (as blocks when needed, etc.)\n- [ ] Quotation marks: check that quotation marks are coherently used: single or double; punctuation inside/outside.\n- [ ] Quotes vs. italics: is their usage for emphasis/highlights as per Chicago Manual (scare-quotes vs. so-called vs. key terms, etc.)?\n- [ ] Dashes: is the usage as hyphens, en-, em-dashes correct?\n- [ ] Bold: avoid bold unless absolutely needed.\n- [ ] Statements: check that claims, examples, theorems etc. are formatted\n    as statements. Arguments with labelled premises are custom-labelled\n    lists. Block equations are display maths. Use identifiers if statements or list items are crossreferenced.\n- [ ] Math content: check that math content (incl. schematic letters like $A$) is coded as inline or display formulas.\n- [ ] Special symbols: are they special symbols? Encode them as such (HTMLentities, copy/paste) rather than LaTeX unless absolutely necessary.\n\n## Proofreading\n\n- [ ] Fix minor typos and grammatical mistakes. No need to notify the author.\n- [ ] Ungrammatical, poor English, otherwise flawed sentences (e.g. we can't tell what a pronoun refers to): correct or ask the author to correct. If you correct, include in a list of changes notified to the author.\n- [x] No need to advise on the content (poor structure or presentation, redudant point, obscure ideas, etc.). This was the referee's job.\n- [ ] One final pass with spell & grammar checker\n\n## Crossreferences and Citations\n\n- [ ] Crossreferences: check that you have identified the crossreferences in the text and added labels wherever needed (references to sections, footnotes, claims, premises, arguments, etc.)\n- [ ] Create a `.bib` file from the author’s bibliography\n- [ ] Identify all the references in the text and replace them with keys from your .bib file. \n- [ ] Use normal vs inline citations where appropriate? Use year-only sparingly. Use multiple inline citations (`@doe [@smith;@jones]`) and normal citations with long prefixes and suffixes (`[this is also discussed in @doe and other places]`) where appropriate. Treat borderline cases consistently across the paper (e.g., whether to use year-only or normal when the author is already named in the sentence).  \n- [ ] Is the author’s bibliography correct? (wrong title, wrong year of publication, etc.)\n- [ ] Add \"References\" heading at the end of the document.\n\n## Rendering in output formats\n\n- [ ] Special symbols: do they render correctly in all outputs?\n- [ ] First-line indentation: paragraphs that *continue* after a block\n    quote, table or list should not have an indentation. Add `\\noident`\n    codes where needed.\n- [ ] Math and LaTeX: check that it renders correctly in HTML output. Use *Imagify* if needed.\n- [ ] Tables: are the tables a faithful rendering of the original tables by the author?\n- [ ] Figures: do they render correctly in all outputs?\n- [ ] Bibliography: does it looks good? do the citation links work?\n\n## Send to the author\n\n- [ ] Compile list of questions and notifications for the author.\n- [ ] Have a last look at the paper.\n- [ ] Send to the author for revisions and/or approval.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Copyeditor workflow</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/155-cop-checklist.html#the-revision-tracker",
    "href": "chapters/copyediting/155-cop-checklist.html#the-revision-tracker",
    "title": "7  Copyeditor workflow",
    "section": "7.3 The Revision Tracker",
    "text": "7.3 The Revision Tracker\nHere’s an example of revision-tracking file. We use a new one for each back-and-forth with the author.\n## TO DO \n\n- things you still have to do\n- item \n\n## TO ASK\n\n- things to ask about or notify the author\n\n## IGNORE\n\n- things you've considered but decided against\n- including author requests\n\n## GET HELP\n\n- things you need to ask editors \n- or the template editor about",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Copyeditor workflow</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html",
    "href": "chapters/copyediting/16-cop-metadata.html",
    "title": "8  Metadata",
    "section": "",
    "text": "8.1 The metadata block\nYour markdown document should start with a ‘metadata’ block. This contains information about the document that isn’t part of the article’s body. Some of it is information about the article itself: title, author name and affiliation, DOI, etc. The rest is information needed to turn the manuscript into published output: name of a .bib file containing its references, special LaTeX packages to be used for its PDF output, parameters used by your template engine (e.g. ‘imagify’ parameters).\nIn this chapter, we explain how metadata entries are formatted in general. Subsequent chapters deal with particular aspects of the metadata such as the title or author’s information.\nThe metadata block is at the beginning of your markdown file, and it starts and ends with lines consisting of three hyphens ---. Here is a template - you can add this at the beginning of the markdown file:\nIn RStudio, the metadata block is displayed both in Source and Visual modes.\nThe metadata block consists of a series of fields and their values. In the above example:\nThe metadata block follows what’s called the YAML syntax. This dictates, for instance, that field names should be immediately followed by a colon without space (title: and not title :). All you need to know about this syntax is explained in this section.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#the-metadata-block",
    "href": "chapters/copyediting/16-cop-metadata.html#the-metadata-block",
    "title": "8  Metadata",
    "section": "",
    "text": "---\ntitle: The Solution to the Problem that has Plagued Many People in the Past\nshorttitle: The Solution to the Problem\nauthor: Max Mustermann\naffiliation: University of Wisemen\nbibliography: references.bib\n---\n\n\n\n\nthe fields are title, shorttitle, author, affiliation.\nthe title field’s value is a line of text, namely “The Solution to the Problem that has Plagued Many People in the Past”.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#sec-one-line-field-values",
    "href": "chapters/copyediting/16-cop-metadata.html#sec-one-line-field-values",
    "title": "8  Metadata",
    "section": "8.2 One-line field-value",
    "text": "8.2 One-line field-value\nIn most cases you enter a field and its value in one line:\ntitle: The Solution to the Problem that has Plagued Many People in the Past\n\nThe field’s name must be immediately followed by a colon without space:\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\ntitle:An interesting fact\ntitle: An interesting fact\n\n\n\n\n8.2.1 One-line text values\nThe value is usually a bit of text (including a filename like references.bib). In most cases, they can be entered with or without quotes. The following are equivalent:\n\n\n\n\n\n\nGOOD\n\n\n\n\ntitle: An interesting fact\ntitle: 'An interesting fact'\ntitle: \"An interesting fact\"\n\n\n\nThe text is assumed to be in markdown: you can surround words with *...* for emphasis (italics), use codes for special characters, etc.\nYou must use quotes if the text value contains a colon, an apostrophe or quotation marks:\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\ntitle: Pleasure: friend or foe?\ntitle: Lars' revenge\ntitle: A \"good\" friend\ntitle: A 'good' friend\ntitle: My Life: a Long Story\ntitle: 'Pleasure: friend or foe?'\ntitle: \"Lars's revenge\"\ntitle: 'A \"good\" friend'\ntitle: \"A 'good' friend\"\ntitle: \"My Life: A Long Story\"\n\n\n\nAs you can see, if a text value contains single quotation marks, it must be put within double quotation marks and conversely. The apostrophe is entered using a single quotation marks, so a title containing one should be wrapped in double quotation marks.\nIf your value happens to contain both kinds of quotation marks, you can enter as a text block value or wrap it within one kind of quotation marks but ‘escape’ marks of that kind with a backslash whenever they appear in the title:\ntitle: 'A \\'quote\\' and \"another\" in this title'\n\n\n8.2.2 Number and boolean values\nIn some cases a value may be a number (12) or a Boolean value (true or false). Enter they without quotation marks.\nvolume: 75",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#sec-metadata-text-block-values",
    "href": "chapters/copyediting/16-cop-metadata.html#sec-metadata-text-block-values",
    "title": "8  Metadata",
    "section": "8.3 Text block values",
    "text": "8.3 Text block values\nAnother way of entering text values is to use the text block syntax. This is useful when the value is a longer text, e.g. an abstract, or when the value contains special characters. The basic syntax is:\ntitle: |\n  The Solution to the Problem that Plagued Many People in the Past\n\nOne line contains the field name followed by a colon, space and the pipe symbol |.\nOne or more subsequent lines contain the text. Each line must be indented by 2 to 4 spaces relative to the field’s name.\nNo quotation marks are used. Any added quotation marks will be treated as part of the text itself.\n\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\ntitle: | A longish\n    phrase\ntitle: Another longish\n    phrase\ntitle: |\n    Value spread on several lines\nbut I forgot indentation\ntitle: |\n    \"This wasn't mean to have\n    quotation marks!\"\ntitle: |\n  A longish phrase\ntitle: |\n  Another longish phrase\ntitle: |\n  Value spread on several lines\n  indented properly\ntitle: |\n  With \"quotation\" marks and colons:\n  no problem!\n\n\n\nEven though text block values can occupy multiple lines, they are not a way to specify line breaks. For instance, the following:\ntitle: |\n  A long title that would without a doubt\n  end up occupying more than one line\n\nis equivalent to:\ntitle: A long title that would without a doubt end up occupying more than one line\n\nUsing the former is not a way to force the template engine to break the title at that line.\nIn general, you shouldn’t enter forced line breaks in titles or abstracts anyway. Your journal template’s may allow you to enter manual linebreaks for a better look on the cover page or chapter page. These are not entered in the title field but in some separate title fields. (For instance, Dialectica uses title-cover.) See the instructions specific to your journal.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#how-to-spot-syntax-errors-in-your-yaml-metadata-block",
    "href": "chapters/copyediting/16-cop-metadata.html#how-to-spot-syntax-errors-in-your-yaml-metadata-block",
    "title": "8  Metadata",
    "section": "8.4 How to spot syntax errors in your YAML metadata block",
    "text": "8.4 How to spot syntax errors in your YAML metadata block\n\nsmart editors like VSCode or RStudio color the metadata block to distinguish keys and values, and sometimes underline in red places where the editor thinks you committed a mistake.\nyou get a “YAML Parse error” when creating outputs. This states a line where an error was encountered (the mistake will be on that line or the previous ones).\nthe metadata block is printed out in your output formats instead of being processed. This means it’s not even recognized as a metadata block at all: check that it begins and ends with --- lines.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#sec-linebreaks-genuine-visual-explicit",
    "href": "chapters/copyediting/16-cop-metadata.html#sec-linebreaks-genuine-visual-explicit",
    "title": "8  Metadata",
    "section": "8.5 Linebreaks: genuine, merely visual and explicit",
    "text": "8.5 Linebreaks: genuine, merely visual and explicit\nCan you spot the error in this metadata block?\ntitle: The Formalization of arguments with various\napplications\nauthor: Robert Michels\n\nThe problem is that the title is spread over two lines: it should either be all on one line or use the text block syntax (|).\nTo avoid such errors it’s important to distinguish:\n\nGenuine line breaks in your markdown file,\nMerely visual line wrapping, and\nExplicit line breaks to be printed out in your output\n\n\nAnd, to distinguish these, you need a text editor that displays line numbers—smart editors like VSCode, RStudio, Sublime etc. all do.\nA markdown file, like any text file, is simply a long string of characters. Most of them are letters, numbers and symbols. But some are linebreak characters: they denote the end of a line rather than a letter, number or symbol. Using ‘↩︎’ to represent this special character, a simple text file could be:\nnow then, let's go out↩to enjoy the snow... until↩I slip and fall!\n\nThis is how the computer ‘sees’ it. For us, though, it’s hard to read. So, your text editor displays these line breaks characters by starting a new line instead, which it indicates with a new line number:\n 1 now then, let's go out\n 2 to enjoy the snow... until\n 3 I slip and fall!\n\nThese are genuine line breaks, in the sense that they reflect what’s actually in the file.\nThere is no limit to the length of (genuine) lines in a file. For instance, a two-line file may be:\nthis file starts with a very very very very very very very very very very very very long line followed by↩a short one\n\nThe first line of this file is likely to be longer than the width of your text editor. If so, your editor faces a dilemma: should it show it to you as one line, in which case you’ll need to scroll to the right to read it? Or should it “wrap” the line, i.e. split it when it reaches the right end of the editor’s window, in which case what you see won’t exactly correspond to what’s in the file? Editors normally offer both options—usually in a menu called “View”: Wrapping, or No Wrapping.\nBut editors with line numbers give you the best comprise: they only have line numbers where there are genuine linebreaks. Without wrapping, they show you the file above like this:\n1 this file starts with a very very very very very very very very very very very very long line followed by\n2 a short one\n\nSo you see that there are only two lines; the first is long and probably overflows your editor’s window to the right. In Wrapping mode, depending on window size they might show the file as follows:\n1 this file starts with a very very very very very very very very \n  very very very very long line followed by\n2 a short one\n\nYou can see that the second line isn’t a genuine line break in the file because it doesn’t have a line number. It’s really the rest of the first line, merely displayed below it so you don’t have to scroll right to see it. By contrast, “a short one” is a genuine new line.\nBack to metadata blocks. In an editor with line numbers, you can see the difference between:\n1 ---\n2 title: The Formalization of arguments with various\n  applications\n3 author: Robert Michels\n4 ---\n\nand:\n1 ---\n2 title: The Formalization of arguments with various\n3 applications\n4 author: Robert Michels\n5 ---\n\nBoth try to provide the title: value in one line (they don’t use the | of text blocks). The first one is correct. As line numbers show, our title is indeed given in one line (line 2). The editor merely displays “applications” on a subsequent line, for our convenience. What’s really in the file, what the computer ‘sees’, is just one line. So, there’s no error there. In the second, however, we have mistakenly entered a genuine linebreak between “various” and “application”, as shown by the new line number 3. So, what the computer reads is:\n\nthe title is “The Formalization of arguments with various”\nthen there’s a line “applications”. It’s not a field name, because it’s not followed by a colon (it’s not: applications: ...). So, what is it?\n\n\nAnd you get a “YAML Parse error” message, which is to say that the computer doesn’t understand the structure of your metadata block.\nGenuine line breaks in your markdown files are not explicit line breaks, however. Recall the file containing Bashō’s haiku:\nnow then, let's go out↩to enjoy the snow... until↩I slip and fall!\n\nIt has three genuine line breaks, which your text editor will show thus:\n 1 now then, let's go out\n 2 to enjoy the snow... until\n 3 I slip and fall!\n\nIn markdown, however, linebreaks are just treated as spaces. So, if you create an output from this file, you’ll get a single paragraph:\n\n\nnow then, let’s go out to enjoy the snow… until I slip and fall!\n\n\nWhen turning markdown into PDF or HTML output, there’s no attempt to match the lines in your markdown file. That’s good because you normally don’t want to manually decide where to break the lines. The only thing you want to manually enter are the paragraph divisions, and these are just entered by two successive linebreaks, i.e. an empty line:\n1 This is a paragraph containing one or more\n2 sentences. Line breaks in the markdown file are\n3 treated as spaces, so the final output may\n4 break lines elsewhere than shown here.\n5\n6 However, it will treat this as a second paragraph\n7 because it is separated from the previous\n8 by a (genuine) empty line, i.e. two successive\n9 linebreaks. \n\nIn some cases though, like poetry verses, you want to specify explicit line breaks that aren’t paragraphs. These are entered by ‘escaping’ the linebreak character, i.e. having a backslash followed by the linebreak character. In the text editor:\n 1 now then, let's go out\\\n 2 to enjoy the snow... until\\\n 3 I slip and fall!\n\nWhich corresponds to the following file:\nnow then, let's go out\\↩to enjoy the snow... until\\↩I slip and fall!\n\nIn markdown, escaped characters are reproduced as they are. Thus an escaped linebreak is reproduced as an explicit linebreak in your output. Beware that the \\ should be immediately followed by the end of the line, not a space: otherwise it’s just an explicit space and all you’ll see in your output is an extra space.\nIn summary:\n\nMerely apparent linebreaks are lines starting with no numbers in your editors. They correspond to nothing real in the file; they’re just a convenient way of displaying a long line.\nGenuine linebreaks are linebreaks characters in the file, corresponding to new numbered lines in your editor. They are important in metadata block. In the main text, they are treated as spaces, so you can cut your lines whenever your lines. The exception is two linebreaks in a row, i.e. an empty line, which mean a new paragraph.\nExplicit linebreaks are backslash \\ at the very end of a line. They represent forced linebreaks that must be reproduced in the output.\n\n\nTerminological note: hard vs soft line wrapping. You may encounter the terms of “hard” and “soft” line wrapping. Here’s what they mean.\n\nHard line wrapping is entering genuine linebreaks. For instance, your editor may offer the option of reflowing your text with linebreaks at a certain fixed length. This will normally be in the “Edit” menu, as it changes the file itself.\nSoft line wrapping is merely displaying long lines on multiple lines. Text editors offer a soft wrapping option, which allows you to view long lines without having to scroll horizontally. This will normally be in the “View” menu, as it doesn’t modify the file itself but only how you view it.\n\n\nGeneral comment. The beauty of working with text files such as markdown files is that there is nothing hidden: what you see in the editor is exactly what there is on file. The only thing that’s not immediately obvious is genuine linebreak characters. Now that you know how to use an editor’s line numbers to identify them, markdown files have no secret for you.\nTo see what we mean by ‘hidden’, compare with Word files. When you see an italicized word fortiori in a MS Word document, what there actually is in your .docx file is a complicated bit of code such as this:\n&lt;w:r&gt;&lt;w:rPr&gt;&lt;w:i/&gt;&lt;w:iCs/&gt;&lt;w:lang w:val=\"en-US\"/&gt;&lt;/w:rPr&gt;&lt;w:t&gt;fortiori&lt;/w:t&gt;&lt;/w:r&gt;\n\nBecause you can’t see what’s going on ‘under the hood’ when you modify a file in MS Word, it’s virtually impossible to do proper typesetting. For that you’d need to see the file as it is; but as the example above shows, they’re virtually impossible to read when seen that way. Markdown gives us the benefit of working with a humanly readable file and at the same time working with the file exactly as the computer ‘sees’ it.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/16-cop-metadata.html#sec-cop-metadata-lists-maps",
    "href": "chapters/copyediting/16-cop-metadata.html#sec-cop-metadata-lists-maps",
    "title": "8  Metadata",
    "section": "8.6 List and map values",
    "text": "8.6 List and map values\nIn addition to simple values like a piece of text or a number, a metadata field’s value can be a list or a map.\n\n8.6.1 Lists\nA list is a sequence of values. For instance, the keywords field is a list of text values:\nkeywords:\n- pleasure\n- pain\n- life\n- death\n\nEach item in the list is on a separate line, starting with a dash (-). The dashes are aligned with the field’s name (keyword here). Quotation marks can be used, as with one-line text values Section 8.2.1.\nAn alternative, shorter way to enter a list of one-line values is to use square brackets and commas, as in:\nkeywords: [pleasure, pain, life, death]\n\nThat is equivalent to the above; again quotation marks can be used. It cannot be used for more complex list values such as text blocks or maps.\nList items can be text blocks too, and you can mix text blocks and one-line values:\nkeywords:\n- |\n  A we\"ird key'word with:symbols\n- |\n  A keyword that I would like\n  to enter on multiple lines\n- this item is just a line\n\nA list item can also be a map. Let’s explain what these are first.\n\n\n8.6.2 Maps\nA map or dictionary is a set of field-value pairs. The metadata block itself is a map:\ntitle: The Meaning of Life\nauthor: Jane E. Doe\nbibliography: references.bib\n\nBut a field’s value can itself be a map. We indicate this by indenting the map under the field’s name. This is typically used to specify options for a template extension like Imagify (used to turned LaTeX into images):\ntitle: Yet Another Mistaken Theory\nauthor: Jane E. Doe\nimagify:\n  scope: all\n  output_folder: _imagify_outputs\nbibliography: references.bib\n\nHere imagify’s value is a map with two fields: scope and output_folder. Note how these entries are indented and below imagify. By contrast, bibliography is aligned completely to the left, with title, author and imagify, so it’s a main field, not a sub-field of imagify.\nSub maps can contains sub-sub maps and so on:\nfield1:\n  subfield1:\n    subsubfield1: value\n    subsubfield2: value\n  subfield2: value\nfield2: value\n\nAny of the values can be a list. If it is, align the list’s dashes with the field’s name. For instance, we can make the value of subsubfield1 a list of two values as follows:\nfield1:\n  subfield1:\n    subsubfield1:\n    - first value\n    - second value\n    subsubfield2: value\n  subfield2: value\nfield2: value\n\nA map cannot have two fields with the same name:\nBAD\n\nauthor: Jane Smith\nauthor: John Doe\n\nHowever, the same field name may appear in distinct maps, including a submap and the main map, or distinct maps in a list of maps.\n\n\n8.6.3 Maps in lists\nA list item can be a map. The author field is a case in point:\nauthor: \n- name: Vincent Conitzer\n  email: conitzer@cs.duke.edu\n  correspondence: true  \n  institute: Duke University\n- name: Nadine Elzein\n  email: nadine.elzein@warwick.ac.uk\n  institute: University of Warwick\n\nLet’s break this down. Our author field is a list of two values:\nauthor:\n- first value\n- second value\n\nEach of these values is itself a map. The second value is the following map, for instance:\nname: Nadine Elzein\nemail: nadine.elzein@warwick.ac.uk\ninstitute: University of Warwick\n\nWhen we insert it in the list, we make sure we indent the map so that each of its fields is aligned to the right of the -:\nauthor:\n- first value\n- name: Nadine Elzein\n  email: nadine.elzein@warwick.ac.uk\n  institute: University of Warwick\n\nNote how name, email and institute are all aligned, and to the right of the second dash. Doing the same with the map corresponding to the first value we obtain the desired result:\nauthor: \n- name: Vincent Conitzer\n  email: conitzer@cs.duke.edu\n  correspondence: true  \n  institute: Duke University\n- name: Nadine Elzein\n  email: nadine.elzein@warwick.ac.uk\n  institute: University of Warwick\n\nNote how each of the fields name, email, institute appear twice but in distinct maps.\nValues in maps can be lists too, as we said. The institute field is a case in point:\nauthor:\n- name: Susan Stebbing\n  institute: \n  - \"King's College London\"\n  - Bedford College, London\n- name: Someone Else\n  institute: Some University\n- name: Third Person\n  institute: Some College\n\nHere author is a list with three values, corresponding to the left-most dashes. Each is a map with two fields, name and institute. Note how the dashes in front of “King’s College” and “Bedford College” are aligned with the institute field name.\n\n\n8.6.4 List in lists\nThough we haven’t found a use for them in copyediting metadata, lists whose values are lists are also possible:\nmylistoflists:\n- - item1\n  - item2\n- - item3\n  - item4\n\nHere mylistoflists is a list with two values; the first value is itself a list with two values (item1, item2), and the second is another list with two values (item3, item4).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/161-cop-title-and-subtitle.html",
    "href": "chapters/copyediting/161-cop-title-and-subtitle.html",
    "title": "9  Title and subtitle",
    "section": "",
    "text": "The title and, optionally, the subtitle of an article are entered in the metadata title and subtitle fields:\ntitle: The Solution to the Problem that Plagued Everyone\nsubtitle: A Brand New Discovery\n\nTitles of the form “Time Travel: a Quantum Relativity Puzzle” should be split into title and subtitle. Exceptions are cases where splitting wouldn’t make sense, e.g. “Pleasure: friend or foe?”.\nIf a title or subtitle contains colons or quotation marks, it should be either wrapped within quotation marks or entered as a text block. See Section 8.2.1.\nThe title and subtitle fields should not contain explicit linebreaks. (See Section 8.5 on what explicit linebreaks are.) Not only it’s best to let the reader’s device set the linebreaks in ‘fluid’ outputs (HTML, EPUB), but these fields are also used for the table of contents and to send information to a bibliographic database. They should thus be free of unnecessary formatting.\nSometimes, however, you need alternative forms of the title:\n\na short title to be used in page headers and/or the table of contents.\na title with explicit line breaks, when the title is long and default line breaks don’t look good in PDF output.\n\n\nFor these, your journal’s template should provide extra title fields. Dialectica, for instance, uses shorttitle if a shorter version is needed for page headers and the table of contents, title-latex if we need specific linebreaks on the article’s first page in PDF output, and title-cover if we need different linebreaks on the offprint cover than on the article’s first page.\nYour journal’s template may also have extra fields to handle how titles and subtitles appear in the table of contents. For instance, Dialectica shows both title and subtitle in the table of contents, separated by a colon. As the colon isn’t appropriate when the title ends with a question mark or other punctuation, the template provides a subtitleseparator field that can be used to replace the colon with a space.\nFor details see your journal template’s guidelines.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Title and subtitle</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/162-cop-author-information.html",
    "href": "chapters/copyediting/162-cop-author-information.html",
    "title": "10  Author metadata",
    "section": "",
    "text": "10.1 Corresponding author\nRequires extension: The scholarly-metadata.lua filter.\nThe author field is a list, each item corresponding to one author. Each item has name, email, institute fields, and one author (the corresponding author) has a field correspondence set to true:\nNote that there is a dash (-) before the first line (name field) of each author, and that all the other lines for that author are indented to align with that field see 8.6.\nThere must be one and only one author for which correspondence: true is included. This will print out their email as the correspondence address for that article.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Author metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/162-cop-author-information.html#institutions",
    "href": "chapters/copyediting/162-cop-author-information.html#institutions",
    "title": "10  Author metadata",
    "section": "10.2 Institutions",
    "text": "10.2 Institutions\nInstitutions can be entered on one line, separated by commas, or as a list. The two following declarations are equivalent:\n  institute: Princeton, Yale\n  institute:\n  - Princeton\n  - Yale\n\nFor this reason, institutes with a comma in their name must be entered as a list, even if there is only one:\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\n  institute: Bedford College, London\n  institute:\n  - Bedford College, London\n\n\n\nThe left would be interpreted as two institutes, “Bedford College” and “London”.\nYou can also specify a list of affiliations separately, and associate each author to their institute(s), which is most useful when several authors share the same affiliation:\ninstitute:\n- kcl: \"King's College London\"\n- bedford: Bedford College, London\nauthor:\n- name: Susan Stebbing\n  institute: [kcl, beford]\n- name: \"Jane Q. Doe\"\n  institute: bedford\n\nHere kcl and bedford are used as internal identifiers to associate authors with their affiliations—they won’t be printed. Note that when an author has several, the institution identifiers should be listed in brackets, separated by commas: [kcl, bedford]. When they have only one, the brackets are optional: for Jane Q. Doe above we could have written institute: bedford instead.\nYou can do without identifiers, by listing affiliations in some order and using numbers to refer to them. The metadata below is equivalent to the above:\ninstitute:\n- \"King's College London\"\n- Bedford College, London\nauthor:\n- name: Susan Stebbing\n  institute: [1, 2]\n- name: Jane Doe\n  institute: [2]\n\nSee the scholarly-metadata filter page for more options and information.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Author metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/162-cop-author-information.html#multiple-short-institute-names",
    "href": "chapters/copyediting/162-cop-author-information.html#multiple-short-institute-names",
    "title": "10  Author metadata",
    "section": "10.3 Multiple short institute names",
    "text": "10.3 Multiple short institute names\nIf an author’s institute includes multiple short acronyms, e.g. “ENS, CNRS, EHESS” they may look awkward in the article signature, depending on how your journal template formats it. See your journal template’s guidelines on whether to handle these cases specially.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Author metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/162-cop-author-information.html#author-in-page-headers-and-table-of-contents",
    "href": "chapters/copyediting/162-cop-author-information.html#author-in-page-headers-and-table-of-contents",
    "title": "10  Author metadata",
    "section": "10.4 Author in page headers and table of contents",
    "text": "10.4 Author in page headers and table of contents\nYou sometimes need to provide a shorter alternative for the author names, e.g. “Smith et al.”, for page headers and the table of contents.\nYour journal template should provide extra fields for this. Dialectica uses author-toc and author-header, for instance. See your journal template’s guidelines.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Author metadata</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html",
    "href": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html",
    "title": "11  Abstract, keywords, acknowledgments",
    "section": "",
    "text": "11.1 As special sections\nAbstract, keywords and acknowledgments should be entered in either of two ways:\nThis ensures they are handled by the journal template. Do not try to format them yourself (e.g. to place the acknowledgements in a footnote).\nWhichever way you choose is up to you, they are equivalent. The first requires the sec-to-meta extension.\nRequires extension: Sections-to-Meta.\nYou can enter abstract, acknowledgments and keywords as special sections with level 1 (#) headings Abstract (or Summary), Acknowledgements (or Thanks or Acknowledgments) and Keywords. The keywords section must be a bullet-point list. If the article’s body text does not itself start with a heading, separate these special sections from the body text with a horizontal rule (* * * or ---). For example:",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Abstract, keywords, acknowledgments</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html#as-special-sections",
    "href": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html#as-special-sections",
    "title": "11  Abstract, keywords, acknowledgments",
    "section": "",
    "text": "---\ntitle: \"If You Squint You'll See an Effect\"\nauthor: Patricia I. Smith\n---\n\n# Abstract\n\nIn this paper, I explain that the *problem* is more difficult to\nsolve than the equation $4x^2 = 8$ and more complicated than the\nformula $(P \\land \\lnot P) \\rightarrow Q$. Thankfully, I have\nfound the solution.\n\n# Thanks\n\nThe author would like to thank Jane Doe and Erika Mustermann\nas well as audiences at the Universities of Shallow Objections.\n\n# Keywords\n-   problem\n-   solution\n-   symbols\n\n* * *\n\nSince the dawn of humanity, people have been wondering about\nmy PhD research topic...",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Abstract, keywords, acknowledgments</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html#as-metadata",
    "href": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html#as-metadata",
    "title": "11  Abstract, keywords, acknowledgments",
    "section": "11.2 As metadata",
    "text": "11.2 As metadata\nAlternatively, you can enter abstract, acknowledgments, and keywords as metadata fields abstract, thanks and keywords, respectively. The keywords fields must be a list. As the other two are typically multiple lines long, they are better entered as text blocks see 8.3. Make sure you indent each line of text blocks properly, without getting confused by genuine vs merely apparent linebreaks see 8.5. To illustrate, the example could be entered instead as:\n---\ntitle: \"If You Squint You'll See an Effect\"\nauthor: Patricia I. Smith\nabstract: |\n  In this paper I explain that the *problem* is more difficult to\n  solve that the equation $4x^2 = 8$ and more complicated than the\n  formula $(P \\land \\lnot P) \\rightarrow Q$. Thankfully, I have\n  found the solution.\nthanks: |\n  The author would like to thank Jane Doe and Erika Mustermann\n  as well as audiences at the Universities of Shallow Objections.\nkeywords:\n-   problem\n-   solution\n-   symbols\n---\n\nSince the dawn of humanity, people have been wondering about\nmy PhD research topic...\n\nDialectica guidelines.\nAbstracts are strongly recommended. Most people who bump on the article will only read that. They must be at most 200 words or so, to fit in the first article page.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Abstract, keywords, acknowledgments</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html#citations-and-formulas-in-abstract-and-acknowledgements",
    "href": "chapters/copyediting/163-cop-abstract-keywords-acknowledgments.html#citations-and-formulas-in-abstract-and-acknowledgements",
    "title": "11  Abstract, keywords, acknowledgments",
    "section": "11.3 Citations and formulas in abstract and acknowledgements",
    "text": "11.3 Citations and formulas in abstract and acknowledgements\n(TO BE CONFIRMED). Abstract and acknowledgments cannot contain markdown citations like @Smith. Write them in plain text instead, Smith (1980).\n(TO BE CONFIRMED). Formulas in the abstract should be kept simple, or better, entered directly in unicode. This is because they are exported to public databases that may not handle LaTeX.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Abstract, keywords, acknowledgments</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html",
    "href": "chapters/copyediting/17-cop-inline-elements.html",
    "title": "12  Inline elements",
    "section": "",
    "text": "12.1 Punctuation\nA traditional document consists of lines of text organized into blocks. A markdown document is likewise organized into inline elements that are put together into blocks.\nThis chapter and the following ones deal with inline elements.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#punctuation",
    "href": "chapters/copyediting/17-cop-inline-elements.html#punctuation",
    "title": "12  Inline elements",
    "section": "",
    "text": "12.1.1 Punctuation and brackets\nIf only part of the sentence is in parentheses, put the final punctuation outside of the parenthesis:\n\n\nI enjoy breakfast (sometimes).\n\n\nIf the entire sentence is in parenthesis, put the punctuation inside the parenthesis.\n\n\nI enjoyed breakfast. (I always do.)\n\n\n\n12.1.2 Punctuation and quotation marks\nSee Chapter 15.\n\n\n12.1.3 Suspension points (three periods)\nThree periods used for ellipsis, aka suspension points, are entered as three consecutive dots:\n\n\nHe will come back… sooner or later.\n\nHe will come back... sooner or later.\n\nDo not space them (. . .).\nPandoc recognizes ... as suspension points, and uses the appropriate code for them in various output formats (e.g. a special unicode character in html, the \\ldots{} command in LaTeX). This ensures they are typeset appropriately, with less space between them than normal dots.\nIf you need a plain sequence of three dots, with normal spacing rather than suspension dots spacing, backslash-escape the dots: \\.\\.\\.:\n\n\nThree plain dots: ... are not three suspension dots: …\n\nThree plain dots: \\.\\.\\. are not three suspension dots: ...\n\nIn proper typesetting, suspension points are less spaced than ordinary dots. Pandoc treats ... as suspension points and converts them to an appr\nPandoc recognizes the three consecutive dots and typesets them appropriately.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#emphasis-and-bold",
    "href": "chapters/copyediting/17-cop-inline-elements.html#emphasis-and-bold",
    "title": "12  Inline elements",
    "section": "12.2 Emphasis and bold",
    "text": "12.2 Emphasis and bold\nEmphasized text is marked with surrounding asterisks or underscores. Bold is marked with double asterisks or underscores, emphasized bold with three:\nThis *word* and _that word_ are emphasized. \n\nThis **word** and __that word__ are strongly emphasized.\n\n***This sentence is extra strongly emphasized.*** \n\nEmphasis is printed in italics when surrounded with normal text. But when the surrounding text is itself in italics, this is the opposite.\n\nDialectica guidelines\nUse simple emphasis only. Avoid strong emphasis (bold), which stands out too much on the page.\nSimple emphasis (italics, one asterisk or underscore) is used: - for emphasis, - for labels of principles in statements:\nPrinciple of Compositionality.\n\nfor mentioned words (e.g. in philosophy of language papers):\nThe verb know has two meanings\nfor simple symbols (when the paper doesn’t use formulas otherwise):\nS knows that p.\n\n\nBold should be only used in limited cases:\n\nsome acronyms for a principle (PC), a system of logic (S4). Though we prefer small caps for e.g. name of principles (cf. statements).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#small-caps",
    "href": "chapters/copyediting/17-cop-inline-elements.html#small-caps",
    "title": "12  Inline elements",
    "section": "12.3 Small caps",
    "text": "12.3 Small caps\nSmall caps are coded by creating a Span with the .smallcaps class:\nThe [Circularity]{.smallcaps} claim...\n\nResult:\nThe Circularity claim…",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#subscripts-and-superscripts",
    "href": "chapters/copyediting/17-cop-inline-elements.html#subscripts-and-superscripts",
    "title": "12  Inline elements",
    "section": "12.4 Subscripts and superscripts",
    "text": "12.4 Subscripts and superscripts\nSubscripts and superscripts in markdown text are coded as follows:\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nA sub1 script and a sup1 script (when attached to plain text words).\nA sub~1~ script and a sup^1^ script.\n\n\nWater is H2O.\nWater is H~2~O.\n\n\nThe no 1 activity\nThe n^o^\\ 1 activity\n\n\n\nMost often, though, superscripts and subscripts are part of LaTeX formulas. The code is then entered as follows.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nWith \\(p_1\\) and \\(p^2\\) the sub(/super)scripts are in formulas.\nWith $p_1$ and $p^2$ the...\n\n\nWith \\(p_{12}\\) and \\(p^{**}\\) the sub(/super)scripts are several characters long.\nWith $p_{12}$ and $p^{xy}$ the...\n\n\n\nNote that in LaTeX, when your sub(/super)script is more than one character long, it needs to be enclosed in curly braces.\nDo not use LaTeX’s \\sb and \\sp commands: MathJaX, our tool for displaying LaTeX formulas in HTML output, doesn’t recognize them.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#sec-hyphens-dashes",
    "href": "chapters/copyediting/17-cop-inline-elements.html#sec-hyphens-dashes",
    "title": "12  Inline elements",
    "section": "12.5 Hyphens and dashes",
    "text": "12.5 Hyphens and dashes\nThe hyphen - is used between words:\n\n\nAn eye-popping headline.\n\n\nEn-dashes -- between numbers:\n\n\nPages 17–19.\n\n\nEm-dashes --- for insertions:\n\n\nHe bailed out—and never came back. The mayor—a notorious narcissist—went to the press.\n\n\n12.5.1 Compound words: when to hyphenate\nThe general rule is that compound adjectives are hyphenated but compount nouns aren-t:\n\n\nAn Egyptian-inspired drawing. A day-to-day schedule. A theory-laden observation.\n\n\n\nA trailer park. A car shed. The equality view.\n\n\n\n12.5.2 Insertion dashes\nIn standard English typesetting, insert dashes should not be surrounded by spaces.\n\n\n\n\n\n\n\nGOOD\noutput\n\n\n\n\nThe y---or their friends---weren't having it.\nThey—or their friends—weren’t having it.\n\n\n\n\n\n\n\n\n\n\nBAD\noutput\n\n\n\n\nThey - -- or their friends ---weren't having it.\nThey — or their friends — weren’t having it.\n\n\n\nNote that end of lines in markdown are treated as spaces by Pandoc, so to avoid surrounding spaces the em dash should not be at the beginning or end of a line.\nFor a non-breaking hyphen, use the HTML code &#8209;:\n\n... $\\supset$&#8209;analysis... prints out as ‘\\(\\supset\\)‑analysis’ and the hyphen cannot be at a linebreak.\n\n\nDialectica guidelines\nEm-dashes are not surrounded by spaces.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#acronyms",
    "href": "chapters/copyediting/17-cop-inline-elements.html#acronyms",
    "title": "12  Inline elements",
    "section": "12.6 Acronyms",
    "text": "12.6 Acronyms\nCf “Abbreviations” chapter in the Chicago manual.\nAcronyms are in caps, not bold. Exception: logic contexts, where axiom schemas, systems of logic, etc. may be labelled in bold.\nAcronyms of more than three letters are in small caps.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#foreign-words",
    "href": "chapters/copyediting/17-cop-inline-elements.html#foreign-words",
    "title": "12  Inline elements",
    "section": "12.7 Foreign words",
    "text": "12.7 Foreign words\nCf “Italics, Capitals, and Quotation Marks” of the Chicago manual. In summary:\n\nNot italics if they are “familiar”, i.e. appear in the Webster’s dictionary. Italics otherwise.\nException: if you have two nearby each other and one is unfamiliar, make both italics for consistency (e.g. mise en scène and mise en bouteille).\n\n\nSome common cases:\n\nFamiliar. A priori, a posteriori, ceteris paribus, inter alia, ad hominem, modus ponens\nUnfamiliar. Salva veritate, ex falso quodlibet, …",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#sec-linebreak",
    "href": "chapters/copyediting/17-cop-inline-elements.html#sec-linebreak",
    "title": "12  Inline elements",
    "section": "12.8 Line break",
    "text": "12.8 Line break\nExceptionally you may need a line break that does not start a new paragraph. This is encoded by finishing a line with a backlash. Thus the following:\n\n\nThis line ends here\nand a new one starts.\n\n\nis encoded as follows:\nThis line ends here \\\nand a new one starts.\n\nBeware: make sure that there’s no space after the backslash. A backslash followed by a space merely means a mandatory space, so you’ll just get an extra space. To get a linebreak you need a backslash immediately followed the end of a line.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/17-cop-inline-elements.html#prevent-line-breaks",
    "href": "chapters/copyediting/17-cop-inline-elements.html#prevent-line-breaks",
    "title": "12  Inline elements",
    "section": "12.9 Prevent line breaks",
    "text": "12.9 Prevent line breaks\nSometimes you need to prevent line breaks. If you use suppressed-author references, they are awkard at the beginning of lines as in:\n\n\n… Smith’s great theory (1972). On the other …\n\n\nThe code for this would be:\n... Smith's great theory [-@Smith1972]. On the other hand\n\nTo prevent this use non-breakable spaces, which can be introduced with a backclashed-escaped space \\ or with the HTML code &nbsp;, as follows:\n... Smith's great theory\\ [-@Smith1972]. On the other hand\n\n... Smith's great theory&nbsp;[-@Smith1972]. On the other hand\n\nDon’t use this to fine-tune how the long the lines are or the like; only when it makes sense in terms of the content: when it’s a matter of sticking say a citation year to what’s going with it, “i.e.” to what follows, and the like.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Inline elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/171-cop-inline-special-chars.html",
    "href": "chapters/copyediting/171-cop-inline-special-chars.html",
    "title": "13  Special characters",
    "section": "",
    "text": "13.1 Schematic letters\nThis chapter deals with special characters and symbols.\nA guiding principle: try to use LaTeX formulas for maths, but only for maths.\nFor non-math symbols, “HTML entities” are useful: these are codes of the form &..; for special characters, e.g. &nbsp; for a non-breakable space or &rarr; and &larr; for right and left arrows. Various websites allow you to search for HTML entities; try this one for instance.\nUsing HTML entities requires a font with fairly good unicode support. If your font miss a particular HTML entity, you will get a warning. If that’s the case you can try using a LaTeX formula instead (e.g. $\\rightarrow$). But for non-math content HTML entities are preferable. because they make your content more machine-readable.\nSchematic letters in the text, as in:\nshould normally be typset as math formulas. See Chapter 26.\nIf there are very few schematic letters in an article, it’s acceptable to typeset them as caps and/or emphasis:",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Special characters</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/171-cop-inline-special-chars.html#schematic-letters",
    "href": "chapters/copyediting/171-cop-inline-special-chars.html#schematic-letters",
    "title": "13  Special characters",
    "section": "",
    "text": "\\(S\\) knows that \\(p\\)\n\n\n\n\n\n\nS knows that p.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Special characters</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/171-cop-inline-special-chars.html#hyphens-and-dashes",
    "href": "chapters/copyediting/171-cop-inline-special-chars.html#hyphens-and-dashes",
    "title": "13  Special characters",
    "section": "13.2 Hyphens and dashes",
    "text": "13.2 Hyphens and dashes\nSee Section 12.5.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Special characters</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/171-cop-inline-special-chars.html#split-fractions",
    "href": "chapters/copyediting/171-cop-inline-special-chars.html#split-fractions",
    "title": "13  Special characters",
    "section": "13.3 Split fractions",
    "text": "13.3 Split fractions\nInline fractions look better when split as in ½ than straight as in \\(\\frac{1}{2}\\). For ½, ¼ and ¾ you can use the HTML entites &frac12;, &frac14; and &frac34; respectively.\nFor more see Section 26.4.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Special characters</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html",
    "href": "chapters/copyediting/19-cop-block-elements.html",
    "title": "14  Simple block elements",
    "section": "",
    "text": "14.1 What is a block?\nA traditional document consists of lines of text organized into blocks, e.g. paragraphs or headings. A markdown document is likewise organized into inline elements that are put together into block elements.\nSome blocks (‘Div’ blocks, tables, footnotes) contain other blocks.\nSome mathematical formulas are blocks, others are inline. We deal with them separately in Chapter 26.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Simple block elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#what-is-a-block",
    "href": "chapters/copyediting/19-cop-block-elements.html#what-is-a-block",
    "title": "14  Simple block elements",
    "section": "",
    "text": "Inline elements\n\nwords and spaces,\na few words in italics,\na formula in the flow of the text, such as \\(x+y=c\\).\n\nBlock elements\n\nparagraphs\nsection headings\nimages, figures, tables\nfootnotes\n‘Divs’, i.e. arbitrary divisions\n…",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Simple block elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#paragraphs",
    "href": "chapters/copyediting/19-cop-block-elements.html#paragraphs",
    "title": "14  Simple block elements",
    "section": "14.2 Paragraphs",
    "text": "14.2 Paragraphs\nNew paragraphs are encoded by leaving an empty line. That is, an empty line separates two paragraphs.\nIn typography paragraphs are distinguished from each other in two ways: first-line indentation (common in books) or a vertical space (common on the web). Your journal template will automatically typeset those.\nIf your journal template uses the first-line indent way of separating paragraphs, it will mostly handle typographic conventions correctly. For instance, it will be set not to indent the first line of paragraphs right below a heading (English convention) or to indent it (common in French). However, there are a few cases where you will need to manually specify that a first-line indent is or is not desired. See below.\nSometimes (rarely) you need a line break that does not start a new paragraph. See Section 12.8.\nProblem. Text that directly follows a list, quote, figure, table or other indented material (statement) may either be a continuation of the previous paragraph or the beginning of a new one. That is a matter of meaning (is the text finishing the previous idea, or beginning a new idea?) and may not be clear-cut in all cases. If your journal uses first-line indentation to separate paragraphs, continuations should not be typesetted with an indented first line, but new paragraphs should.\nThe engine makes default assumptions: normally text below a list, quotation or statement continues the paragraph above and text below a table is a new paragraph. When the default assumption is wrong, we need to manually specify that a paragraph’s indent is to be treated otherwise.\nThere are two ways to solve this.\n\nDialectica guidelines. Our template uses the first-line indentation style of separating paragraphs, and we use the first solution below. Sometimes it is unclear whether a paragraph continues the previous one or is a new one: the best is to ask the author, but you can also use your best judgment.\n\n\n14.2.1 With the first-line-indent filter\nRequires: the first-indent-line filter.\n\nAdd \\indent at the beginning of a paragraph to force a first-line indentation.\nAdd \\noindent at the beginning of a paragraph to prevent first-line indentation.\n\n\nExample. In the text below, the quotation ends the paragraph: the text below the quotation isn’t a continuation of the previous paragraph but a new paragraph. This goes against the default assumption, so we need to add \\indent. On the other hand, the paragraph under the table is a continuation of the previous one, which also goes against the default assumption. So we add a \\indent.\nIn the final words of the wise man:\n\n&gt; It's unclear what is going on here.\n\n\\indent Now on another note, we can see from the table below:\n\n\nTest group   Control group\n----------- ----------------\n.9            .9\n\n\\noindent That we don't observe any difference between the two groups.\n\nNote: \\indent and \\noindent are LaTeX code, but the first-line-indent filter ensures they are formatted correctly in other output formats.\nNote: you can follow this section’s advice even if your journal doesn’t currently use first-line indentation to separate paragraphs but vertical spaces instead. With the first-line-indent filter the added code won’t make a difference to the output, but it will allow you to switch to first-line indent later if needed.\nSee the first-line-indent filter’s page for more options and information.\n\n\n14.2.2 Without the filter\nIf your journal does not use the first-line-indent filter, you can only control first-line indentation for the LaTeX/PDF output, not HTML.\nWithout the filter, text after any block element is treated as a new paragraph.\n\nAdd \\noident at the beginning of paragraphs following quotations, statements, lists unless they are genuinely new paragraphs.\n\n\nYou may add \\indent on paragraphs that need to be indented, but that’ll be the default.\nNote: if your journal currently uses vertical spacing rather than first-line indentation to separate paragraphs, adding \\noindent codes does no harm. But if you don’t use the first-line-indent filter, adding \\indent codes will indent paragraphs even if the journal style uses vertical spacing. So either use the filter or don’t use indent codes unless your journal is set to use first-line indentation.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Simple block elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#headings",
    "href": "chapters/copyediting/19-cop-block-elements.html#headings",
    "title": "14  Simple block elements",
    "section": "14.3 Headings",
    "text": "14.3 Headings\nHeadings of different levels (section, subsection, subsubsection) are encoded as a line starting with #, ##, ### followed by the title.\n\n\n\n\n\n\n\nI want\nI type\n\n\n1. Section heading\n# Section title\n\n\n1.2 Subsection heading\n## Subsection title\n\n\n1.2.1 Subsubsection title\n\n### Subsection title\n\n\nlower titles\n####, #####, ######\n\n\n\n\nIn Dialectica headings are numbered up to the subsection (#, ##, ###). Headings of level four (####) are used for un-numbered smaller units.\nWe have also two “inline” headings styles, where the heading title is displayed at the beginning of the following paragraph rather than on its separate line. They are level 5 (#####) and level 6 (#######).\nWe discourage authors from using headings below the subsection (##) in articles though, though we can use them if they improve readability.\n\nDo not manually add numbers to section headings. They are automatically added by the house template.\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\n# 1 Methods\n# Methods\n\n\n# 1\n#\n\n\n\nIf the heading has no title, you should simply enter # (or the relevant level) with no title.\n\n\nIf an article starts with an introduction section, that section should not have a heading. So do not start articles with:\n\n# Introduction",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Simple block elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#footnotes-and-endnotes",
    "href": "chapters/copyediting/19-cop-block-elements.html#footnotes-and-endnotes",
    "title": "14  Simple block elements",
    "section": "14.4 Footnotes and endnotes",
    "text": "14.4 Footnotes and endnotes\nYou can encode notes. Markdown doesn’t distinguish footnotes and endnotes: there’s only one kind of note, and your journal template decides where they’re printed out.\nThere are two ways to enter notes called inline and by reference link. In the inline method, the note is weaved within the text itself, as follows:\nThis is the main text.^[In the footnote, I distract you with an irrelevant point.]\n  This continues the main text.\n\nIn the reference link method, we only put a reference to the note in the text, and the note text is given separately—typically below the paragraph in question or at the end of the manuscript:\nThis is the main text.[^fn1] This continues the main text.\n\n[^fn1]: In the footnote, I distract you with an irrelevant point.\n\nBoth methods produce the very same output:\n\n\nThis is the main text.1 This continues the main text.\n\n\nThe inline method is best suited for short notes. The reference-link method is better suited for longer notes and is required when a footnote spans multiple paragraphs.\nWarning for international keyboard users. If you’re using the International US Keyboard (and perhaps other), entering ^[ will probably result in a small circumflex accent instead of a big one: compare ˆ and ^. To get the big one, press Shift+6 (the key for ^) then the space key.\n\n14.4.1 Inline method\nIn the inline method, you place ^[...] where you want the note number to appear, and you place the text of the footnote between the brackets. Note that the ^ character is outside the brackets.\nThis is the main text.^[In the footnote, I distract you with an irrelevant point.]\n  This continues the main text.\n\nThe note text may contain markdown codes, except blocks. It’ll be a single block (paragraph) in the output.\n\n\n14.4.2 Reference link method\nIn the reference link method, you place [^id] where you want the note number to appear. Note that the ^ character is inside the bracket. id is an arbitrary identifier: it can be a number like 2, or something like fn1 or footnote_about_dogs. It can’t contain spaces, linebreaks, tabs or the characters ^, [, ].\nThe identifier must be unique to that footnote in your markdown file. It does not affect which number the footnote has in the output, even if it’s a number. Thus if you enter the article’s first footnote as:\nThis is the main text.[^15] This continues the main text.\n\nIt will still be numbered 1.\nThe footnote text is then placed elsewhere in the document, in a paragraph starting with [^id]. Where you place it doesn’t affect the output: it’ll be printed out as a footnote if your journal footnotes, as an endnote if it uses endnotes.\nThis is the main text.[^fn1] This continues the main text.\n\n[ˆfn1]: In the footnote, I distract you with an irrelevant point.\n\nThe note can contain any markdown codes, including blocks other than notes.\n\n\n14.4.3 Multi-paragraph notes\nUsing the reference-link method, you can enter long notes consisting of multiple paragraphs. You simply need to indent the paragraphs:\nThis is the paragraph where the note appears.[^fn2] The paragraph\ncontinues for a bit and then ends.\n\n[^fn2]: This is the footnote text. I've placed it below the paragraph\n    where the footnote appears, though I could have placed it at\n    the very end of the document, or anywhere else for that matter.\n\n    This is still part of the footnote---it's a second paragraph of\n    the footnote. Note how it's indented two spaces like the first\n    paragraph. If it wasn't, it would be considered part of the\n    main text.\n\nThis is the following paragraph of the main text. It's not indented,\nso it's not part of the footnote.\n\nResult:\n\n\nThis is the paragraph where the note appears.2 The paragraph continues for a bit and then ends.\nThis is the following paragraph of the main text. It’s not indented, therefore it’s not part of the footnote.\n\n\nFour spaces indentation on each paragraph should work.3 If you encounter trouble, see “Troubleshooting” at the end of this section.\nNotes can contain other kind of blocks other than notes themselves: quotations, images, Divs (see below), etc.\nThis is the main text.[^3] This continues the main text.\n\n[^3]: This note takes more space.\n\n    It contains several paragraphs.\n                 \n    &gt; It even includes a quotation.\n                 \n    And it ends here.\n\nResult:\n\n\nThis is the main text.4 This continues the main text.\n\n\nTroubleshooting. Too much or not enough indentation on the paragraphs may ‘break’ the note; in output, the broken text appears where you’ve placed the footnote text—below the original paragraph or at the end of the document. If it appears as normal text, check the paragraphs are aligned first, and if they are, try more indentation. If it appears as code text (monospace font), you have too much indentation (more than 4 spaces), reduce it.\n\n\n14.4.4 Fusing multiple markdown documents\nUnless your journal template’s guidelines specify otherwise, it’s fine to use the same identifier, e.g. 1, in different articles.\n\n\n14.4.5 Cross-referencing footnotes\nCross-reference to footnotes has to be done manually. Don’t enter them before you know that the footnote numbers in the output are final. See Section 23.3.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Simple block elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#sec-divs",
    "href": "chapters/copyediting/19-cop-block-elements.html#sec-divs",
    "title": "14  Simple block elements",
    "section": "14.5 Divs",
    "text": "14.5 Divs\nDivs are general-purpose blocks that we use to typeset advanced elements like statements or to mark out sections of a document for special treatment, e.g. ‘imagifying’ all the LaTeX formulas it contains. This section explains how to encode them.\nA Div is an arbitrary document division, usually invisible to the reader. It contains one or more blocks—which can be paragraphs, quotations, etc. or even other Divs. It also has attributes, and that is what makes it useful: for we use the attributes to tell our typesetting engine that the Div’s content is to receive special treatment. In the case of statements, we use a Div with the special statement attribute to tell the engine that its contents are a statement—hence, that they must be indented.\nIn markdown, Divs are created using a pair of “fences”, which are single lines consisting of one or more colons:\n\nThis paragraph is in the document's main flow.\n\n:::\n\nThis paragraph is inside a Div.\n\nThis paragraph is also inside the same Div\n\n:::\n\nThe first ::: fence opens the Div, the second one closes it. We can include a Div within a Div by using a greater number of colons for the enclosed one:\n\nThis paragraph is in the document's main flow.\n\n:::\n\nThis paragraph is inside a Div.\n\n:::::\n\nThis paragraph is inside a new Div that's inside the first Div.\n\n:::::\n\nThis paragraph is inside the first Div.\n\n:::\n\nIt’s good practice, though not technically necessary, to use the same number of colons for the opening fence and the closing fence of the same Div.\nThe Divs in the examples above are completely invisible in PDF or HTML outputs. Divs become interesting when you give them attributes. Attributes are added to the opening fence of a Div, between curly braces, separated by spaces:\n\n::: {.statement #myprinciple color=red}\n\nEverything comes in due time.\n\n:::\n\nThis illustrates the three kinds of attributes a Div may have:\n\none or more classes indicated with a dot, e.g. .statement. A class indicates that the Div is of a certain kind. Several Div can be of the same class (kind), and a single Div can have several kinds.\nan unique identifier aka ID: indicated with a hash, e.g. #myprinciple. This uniquely identifies a Div, to cross-reference it for instance. A Div can only have one ID, and a Div’s ID should not be assigned to any other Div nor even to any other element (such as a heading, figure, etc.).\nKey-value pairs, indicated by the equal sign, e.g. color=red. These are used to state that a certain aspect of the Div (e.g., the text color) has a certain value. If the value contains space or special symbols it’s enclosed in quotation marks.\n\n\nFor statements only classes and IDs are relevant.\nWhen a Div’s attributes consist of a single class, and nothing else, it can be encoded without curly braces and dots. Thus the following:\n\n::: {.statement}\n\nEverything comes in due time.\n\n:::\n\ncan be abbreviated:\n\n::: statement\n\nEverything comes in due time.\n\n:::\n\nSome prefer more visible fences. You can use full lines of colons. If there are attributes, you may add colons after the attributes too. For instance, the earlier attributes example can just as well be encoded as:\n\n::: { .statement #myprinciple color=red } :::::::::::::::::::::::::\n\nEverything comes in due time.\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\nThat is wholly up to you: using full-width fences or shorter ones makes no difference to the result.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Simple block elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/19-cop-block-elements.html#footnotes",
    "href": "chapters/copyediting/19-cop-block-elements.html#footnotes",
    "title": "14  Simple block elements",
    "section": "",
    "text": "In footnote, I distract you with an irrelevant point.↩︎\nThis is the footnote text. I’ve placed it below the paragraph where the footnote appears, though I could have placed it at the very end of the document, or anywhere else for that matter.\nThis is still part of the footnote—it’s a second paragraph of the footnote. Note how it’s indented to align with the first paragraph. If it wasn’t, it would be considered part of the main text.↩︎\nThe markdown manuals for Pandoc and Quarto don’t give a precise indentation size.↩︎\nThis note takes more space.\nIt contains several paragraphs.\n\nIt even includes a quotation.\n\nAnd it ends here.↩︎",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Simple block elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html",
    "href": "chapters/copyediting/191-cop-block-quotations.html",
    "title": "15  Quotations",
    "section": "",
    "text": "15.1 Inline vs block quotations\nQuotations should only be used for quoted material: text coming from another source. For other indented block of materials, cf Statements.\nSome quotations are inline and other are blocks.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Quotations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#inline-vs-block-quotations",
    "href": "chapters/copyediting/191-cop-block-quotations.html#inline-vs-block-quotations",
    "title": "15  Quotations",
    "section": "",
    "text": "Dialectica guidelines. Short quotations (up to about 2 lines) are inline, unless authors specifically want to set them out. Longer quotations (from about 3 lines) are normally block. But they can be inline, especially if they’re basically used as a substitute for the authors’ own words rather than something to be examined or discussed.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Quotations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#inline-quotations",
    "href": "chapters/copyediting/191-cop-block-quotations.html#inline-quotations",
    "title": "15  Quotations",
    "section": "15.2 Inline quotations",
    "text": "15.2 Inline quotations\nInline quotations are encoded with quotation marks ' or \". Don’t use special opening and closing quotation mark characters:\nFor inline quotations use single or double quotation marks:\n\n\n\nGOOD\noutput\n\n\n\n\nThis \"best practice\" is a hack.\nThis “best practice” is a hack.\n\n\nThis 'best practice' is a hack.\nThis ‘best practice’ is a hack.\n\n\n\nAs you can see, Pandoc automatically converts straight marks into opening or closing ones as needed.\nThere are two traditions:\n\nUS/modern British. Double quotation marks. Closing quotation mark placed after punctuation marks, even if those aren’t in the quote:\n\nShe never said the word “traitor.”\n\ntraditional British. Single quotation marks. Closing quotation mark before punctuation marks unless these are parts of the quote:\n\nShe never said the word ‘traitor’&zmj;.\n\n\n\nPandoc applies the US convention by default. This can be avoided globally by setting the document’s language to en-GB. It can be avoided on a case-by-case basis by using a “zero-width joiner” characters, markdown code &zmj;:\nShe never said the word 'traitor'&zmj;.\n\n\nShe never said the word ‘traitor’&zmj;.\n\n\nDialectica guidelines\nDialectica prefers the US/Chicago convention for quoted material, that is double quote. Exception: you can use single quotes for special uses other than quoting material (see ‘mention’ below).\n\n\n15.2.1 Quoting words (mention)\nWhen a word or expression is used not with its usual meaning but to denote that word or expression itself, we use quotation marks or italics.\n\n\nI can’t stand the word ‘scrumptious’.\n\n\n\nI can’t stand the word scrumptious.\n\n\nDon’t use italics if the word is scare-quoted, put a distance, quoted from some other person’s use, etc. Italics are only appropriate if we’re talking of the word or expression italicized.\n\nDialectica guidelines. If references to a word or words are common throughout the paper, as in e.g. linguistics papers, italics are recommended. It’s often best to distinguish mention from quoted material:\n\nuse italics or single quotation marks for mentions. Example:\n\nThe predicate ‘gave \\(x\\) to \\(y\\)’ has three argument places.\n\nif using single quotation marks, do not bring punctuation marks inside.\n\nThe verbs ‘know’, ‘believe’ are cognitive verbs. We need another notion than ‘justice’.\n\n\n\nScare quotes are like quoted material, not mention.\nMake sure the paper is consistent in its choices.\n\n\n\n15.2.2 Quotations within quotations\nIf you must use quotation marks within quotation marks, use different ones:\n\n\n\nGOOD\noutput\n\n\n\n\n\"This 'word' is quoted.\"\n“This ‘word’ is quoted.”\n\n\n'This \"word\" is quoted.'\n‘This “word” is quoted.’\n\n\n\nIf you try to put double quotes with double quotes, Pandoc doesn’t output them correctly.\n\n\n\nBAD\noutput\n\n\n\n\n\"This \"word\" is quoted.\"\n“This”word” is quoted.”\n\n\n\nIt is best to impose the rule unless it is imperative to use the same quotes.\nIf you do need to embed the same quotation marks within themselves, use HTML entitles:\n\n\n\nGOOD\noutput\n\n\n\n\n\"This &ldquo;word&rdquo; is quoted\"\n“This”word” is quoted”\n\n\n'This &lsquo;word&rsquo; is quoted'\n‘This ’word’ is quoted’",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Quotations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#block-quotations",
    "href": "chapters/copyediting/191-cop-block-quotations.html#block-quotations",
    "title": "15  Quotations",
    "section": "15.3 Block quotations",
    "text": "15.3 Block quotations\nQuotations are marked by either starting a paragraph with &gt; and indenting it, or by starting each line of the paragraph with &gt;, or simply having the first line starting with &gt;\n\n\nThis is a quotation. The second sentence is on an indented line.\n\n\n\nThis is another quotation. The second sentence is on a line starting with &gt;.\n\n\n\nThis is quotation in the lazy style. The second line isn’t even indented or starting with &gt;.\n\n&gt; This is a quotation.\n  The second sentence is on an indented line.\n  \n&gt; This is another quotation.\n&gt; The second sentence is on a line starting with `&gt;`.\n\n&gt; This is quotation in the lazy style.\nThe second line isn't even indented or starting with `&gt;`.\n\nFor readability avoid the lazy style.\nThe quotation citation can be included at the end or in a footnote. If indicated at the end, it should come after the dot of the quotation’s last sentence.\n\n\nGOOD I am happy. (Doe 2020)\n\n\n\nBAD I am happy (Doe 2020).\n\n\n\nGOOD I am sad.1\n\n&gt; GOOD I am happy. [@doe_j:2020]\n\n&gt; BAD I am happy [@doe_j:2020].\n\n&gt; GOOD I am sad.[^doe-quotation]\n\n[^doe-quotation]: @doe_j:2020\n\nDistinguish clearly one quotation with several paragraphs from several consecutive quotations. If, for instance, your template sets out quotations in boxes, you want a single two-paragraphs quotation to come out in one box, not two. Continuing paragraphs are marked by an indentation of 2 spaces or by prefixing intervening empty lines with &gt;:\n\n\nSuppose this is a quotation’s first paragraph.\n\n\nThis second paragraph (indented) is part of the same quotation.\n\n\nSuppose this is a new quotation’s first paragraph.\nThis second paragraph (marked with &gt; prefixes) is part of the same quotation.\n\n&gt; Suppose this is a quotation's first paragraph.\n\n  This second paragraph (indented) is part of the same quotation.\n\n&gt; Suppose this is a new quotation's first paragraph.\n&gt;\n&gt; This second paragraph (marked with `&gt;` prefixes) \n&gt; is part of the same quotation.\n\nBeware: if you use indentation, make it two spaces only. Four spaces indentation is used for code blocks (blocks of computer language).\nSeveral but consecutive quotations are instead separated by an empty line:\n\n\nThis is a first quotation.\n\n\n\nThis is a second quotation that directly follows the first.\n\n&gt; This is a first quotation.\n\n&gt; This is a second quotation that directly follows the first.\n\nNote that the second quotation starts with &gt; and isn’t indented.\nYou can have quotations within quotations.\n\n\nAs someone said once:\n\n\nThe life unexamined isn’t worth living.\n\n\n&gt; As someone said once:\n&gt; \n&gt; &gt; The life unexamined \n&gt; &gt; isn't worth living.\n\nDialectica guidelines\nIf the quote is longer than 4 lines, use block quotation.\n\nno double marks\nperiod goes before reference\n\n&gt; [block quotation]. [@doe_j:2020, 20]\n\nResult:\n\n\n[block quotation]. (Doe 2020, 20)\n\n\n\n15.3.1 Troubleshooting\nProblem. The quotation or parts of it comes out in computer-language font.\nSolution. You’ve indented a block of your quotation by four spaces. Use two instead.\n\n\n\n\nDoe, Jane. 2020. “An Imaginary Article.” Review of Ideas 10: 13–27. https://doi.org/10.0000/123456789.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Quotations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/191-cop-block-quotations.html#footnotes",
    "href": "chapters/copyediting/191-cop-block-quotations.html#footnotes",
    "title": "15  Quotations",
    "section": "",
    "text": "Doe (2020)↩︎",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Quotations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html",
    "href": "chapters/copyediting/192-cop-block-lists.html",
    "title": "16  Lists",
    "section": "",
    "text": "16.1 Simple lists\nLists are a special kind of block elements. We have three types of lists:\nCustom labelled lists are sometimes used to typset things that aren’t really lists: arguments with labelled premises, statements within footnotes.\nCustom-labelled lists must also be used if you need to crossreference specific items within a list.\nSimple lists are either bullet lists or ordered lists. Here are examples of each:\nResult:\nSeparating items by a blank line makes no difference: they will be gathered in a single list.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#simple-lists",
    "href": "chapters/copyediting/192-cop-block-lists.html#simple-lists",
    "title": "16  Lists",
    "section": "",
    "text": "* an item\n  * a sub-item\n  * another sub-item\n* an item\n\n1. item\n2. item\n  a. sub item\n  b. sub item\n1. another item\n\n\n\nan item\n\na sub-item\nanother sub-item\n\nan item\n\n\nitem\nitem\n\n\nsub item\nsub item\n\n\nanother item\n\n\n\n\n16.1.0.1 Multiple paragraphs or blocks in a list item\nList items can consist of several blocks. The blocks should be indented to be aligned with the first non-space character of the list item:\n* This list item contains three blocks.\n\n  The second block is a paragraph---a two-space indentation aligns it wth \"This\" above.\n\n  &gt; The third block is a blockquote.\n\n* This is the second list item\n\nResult:\n\nThis list item contains three blocks.\nThe second block is a paragraph—a two-space indentation aligns it wth “This” above.\n\nThe third block is a blockquote.\n\nThis is the second list item\n\n\n\n16.1.0.2 Choosing bullets and types\n\nWith bullet lists, you have no control on the type of bullet used—this is decided by your template.\nWith ordered lists, you normally have control over numbering type (1, I, A, i, a) and starting number (3, III, C, iii, c), though your template may override this. You don’t control punctuation, i.e whether the number is followed by a point, single parenthesis or double parenthesis—that is up to your template.\n\n\nIf you need finer control of bullets or numbers, consider custom-labelled lists.\n\n\n16.1.0.3 First-line indentation after lists\nRequires: first-line indent filter.\nIf you use first-line indents rather than vertical space to separate paragraph, you may want to control whether the paragraph below a list is indented or not. There is no mechanical rule for this: it depends on whether the material following the list should be considered as one paragraph with the material before and the list, or whether we should instead consider that the list ends a paragraph.\nIn most cases, the list does not end a paragraph and the material below forms a unity with the material before. The paragraph below should then not be indented. That is the default setting of the first-line indent filter, so you do not need to do anything.\nIf the list does end a paragraph, you can ensure the next paragraph starts with an indentation by adding \\indent at its beginning.\n\n\n16.1.1 What to do if a list has non-standard labels?\nProblem: a text has a list with regularly numbered items (1, 2, 3, or a, b, c, …) but uses * or ' labels in some cases.\nThere are two solutions to this:\n\nIf it’s not too important to single out some items with * or ', then you can re-number the author’s list, using a simple numbered list instead.\nIf it is important to preserve the author’s labels, e.g. if it helps comprehension to see item ’2**’ as a revision of item ‘2’, then use custom labelled lists.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#numbered-examples-lists",
    "href": "chapters/copyediting/192-cop-block-lists.html#numbered-examples-lists",
    "title": "16  Lists",
    "section": "16.2 Numbered examples lists",
    "text": "16.2 Numbered examples lists\nSome papers have examples (or other items) that are scattered throughout the paper but numbered continuously. For example:\n\n\nSentence (1) below illustrates the Liar paradox:\n\n\nSentence (1) is false.\n\n\n\nNot all self-referential sentences are paradoxical, however:\n\n\nThis sentence contains several words.\nSentence (3) is written in English.\n\n\n\n\nYou enter those as follows using (@) or (@identifier):\nSentence @liar below illustrates the Liar paradox: \n\n(@liar) Sentence (@liar) is false.\n\nNot all self-referential sentences are paradoxical, however:\n\n(@) This sentence contains several words.\n\n(@three) Sentence @three contains several words.\n\n(@) is enough to create a numbered example item. You add an identifier as in (@item3) if you need to refer to it later. To refer to it, simply use @identifier, as above, which you can wrap between parentheses if desired.\nWarning. References to numbered examples do not generate hyperlinks and cannot be placed within links.\nProblem. If a paragraph starts by a reference to a number example that you want to wrap between parentheses, markdown will wrongly think that it’s a new numbered example:\nThe sentence below illustrates the Liar paradox: \n\n(@liar) Sentence (@liar) is false.\n\n(@liar) cannot be true, because...\n\nSolution. “Escape” (i.e., put a backslash in front of) the first parenthesis\nThe sentence below illustrates the Liar paradox: \n\n(@liar) Sentence (@liar) is false.\n\n\\(@liar) cannot be true, because...",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#sec-custom-labelled-lists",
    "href": "chapters/copyediting/192-cop-block-lists.html#sec-custom-labelled-lists",
    "title": "16  Lists",
    "section": "16.3 Custom labelled lists",
    "text": "16.3 Custom labelled lists\nRequires: the labelled-lists filter.\nA simple illustration of the custom label syntax:\n* [Premise 1]{} This is the first claim.\n* [Premise 2]{} This is the second claim.\n* [Conclusion]{} This is the conclusion.\n\nThis generates the following list (process this file with the filter to see the result):\n\nPremise 1 This is the first claim.\nPremise 2 This is the second claim.\nConclusion This is the conclusion.\n\n\nIn general, the filter will turn a bullet list into a custom label list provided that every item starts with a Span element.\n\nA Span element is inline text (i.e., not block like a paragraph) that optinally has some attributes. The default syntax is [inline text]{attributes}. Inline text will be used as label, placed within round bracket.\nThere is no need to specify attributes on the Span. But curly brackets must be present: [label] won’t work, [label]{} will.\nThe label can include formatting. [**T1**]{} will generate a label with strong emphasis (bold by default).\nSpan elements can also be entered using HTML syntax: &lt;span&gt;inline     text   &lt;/span&gt;. See [Pandoc manual] (https://pandoc.org/MANUAL.html#divs-and-spans) for details.\n\n\nIf an article has many custom labelled lists with empty labels (see Arguments), you may set the delimiters to be empty rather than parentheses by default. See the labelled-lists.lua filter manual.\n\n16.3.1 Commonly used custom labels\nSee also the section on symbols.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nA*, A**, …\nA*, A**, …\n\n\nA′, A″, A‴, A⁗\nA&prime;, A&Prime;, A&tprime;, A&qprime;\n\n\nA1, A2, …\nA^1^, A^2^, …\n\n\nA1, A2, …\nA~1~, A~2~, …\n\n\n\n\n\n16.3.2 Cross-referencing custom-label items\nCustom labels can be given internal identifiers. The syntax is [label]{#identifier}. In the list below, A1ref, A2ref and Cref identify the item:\n* [**A1**]{#A1ref} This is the first claim.\n* [A2]{#A2ref} This is the second claim.\n* [*C*]{#Cref} This is the conclusion.\n\nNote that # is not part of the identifier. Identifiers should start with a letter and contain only letters, digits, colons :, dots ., dashes - and underscores _.\nLabels with identifiers can be crossreferenced using Pandoc’s citations or internal links.\n\n\n16.3.3 Cross-referencing with citations\nThe basic syntax is:\n\nReference in text: @A1ref. Outputs the label with its formatting: A1.\nNormal reference: [@A1ref]. Outputs the label with its formatting, in parentheses: (A1). A prefix and suffix can be specified too: [remember @A1ref and the like] will output (remember A1 and the like).\nThe suppressed author style, [-@A1ref], will be processed as normal reference\n\n\nYou can crossrefer to several custom labels at a time: [@A1ref; @A2ref]. But mixing references to a custom label with bibliographic ones in a same citation won’t work: if Smith2003 is a key in your bibliography [@A1ref; Smith2003] will only output “((A1ref?); Smith, 2003)”.\nBecause this syntax overlaps with Pandoc’s citation syntax, conflicts should be avoided:\n\nAvoid giving the same identifier (e.g. Smith2005) to a custom label item and a bibliographic entry. If that happens, the citation will be interpreted as crossreference to the custom label item. To make sure you you may use identifiers starting with item:: item:A1ref, item:A2ref, or some other prefix.\nThe filter should preferably be run before citeproc, and before other filters that use citations (like pandoc-crossref). It may work properly even if it is run after, though citeproc will issue “citations not found” warnings. To ensure that the filter is run before, just place it before in the command line or in your YAML options file’s filters field.\n\n\nAlternatively, the citation syntax for crossreferencing custom label items can be deactivated. See [Customization] below.\n\n\n16.3.4 Cross-referencing with internal links\nIn Pandoc markdown internal links are created with the syntax [link  text](#target_identifier). (Note the rounded brackets instead of curly ones for Span element identifiers.) You can use internal links to cross-refer to custom label items that have a identifier. If your link has no text, the label with its formatting will be printed out; otherwise whichever text you give for the link. For instance, given the custom labelled list above, the following:\nThe claim [](#A1ref) together with [the next claim](#A2ref) \nentail ([](#Cref)).\n\nwill output:\n\n\nThe claim A1 together with the next claim entail (C).\n\n\nwhere the links point to the corresponding items in the list.\n\n\n16.3.5 Custom labelled lists within a numbered example list\nRequires: labelled-lists.lua, statement.lua.\nIn some cases we wanted to put a custom labelled list within a numbered example list. This is particularly difficult when we don’t want any content in the numbered example item other than the embedded list itself.\nSolution: place the embedded list within a statement. Note that the embedded content must be indented exactly twice (4 spaces). This works:\n(@example-Batu) \n\n    ::: statement\n\n    * []{delimiter=none} Every head of a horse is a head \n     of an animal.\n    * [&there4;]{} Batu is a head of an animal.\n  \n    ::::\n\nYou should reduce the right margin for the LaTeX output. (LaTeX experts: the statement is placed in a minipage whose with is that of the text minus the default list label width; this is typically too large for an embedded list.)\n(@Allskunksaremammals) \n\n    ::: statement\n\n    * []{} All skunks are mammals. `\\addtolength{\\rightskip}{1em} % fix needed`{=latex}\n\n    * [&there4;]{} All who fear all who respect all skunks fear all who respect all mammals.\n    :::",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/192-cop-block-lists.html#sec-arguments",
    "href": "chapters/copyediting/192-cop-block-lists.html#sec-arguments",
    "title": "16  Lists",
    "section": "16.4 Arguments",
    "text": "16.4 Arguments\nRequires: the labelled-lists.lua filter.\nWe format arguments as custom labelled lists. To indicate the the conclusion, the last label is &there4;, i.e. the symbol ∴.\n* [1]{} No man is wise.\n* [2]{} Socrates is a man.\n* [C]{} Socrates is not wise.\n\nHere 1, 2, C are custom labels. We can also write an argument without labels, but we should then add the option deliminter=none to the first item in order to avoid empty parentheses:\n* []{delimiter=none} No man is wise.\n* []{} Socrates is a man.\n* [there4;]{} Socrates is not wise.\n\n&there4 is the standard ‘therefore’ sign (three dots).\nThe delimiter=none option can be set in the document metadata. It will then apply to all custom labelled lists in the document unless specified otherwise in the lists themselves. See custom labelled lists.\nAs explained in custom labelled lists, crossreference links to premises can be done by giving them identifiers and using the citation syntax:\n* [1]{#prem1} No man is wise.\n* [2]{#prem2} Socrates is a man.\n* [C]{#conc} Socrates is not wise.\n\nPremises @prem1 and @prem2 entail @conc.\n\nRequires: the statement.lua filter.\nArguments can be placed within statements, especially if they have a name.\n::: statement\n__The ontological argument__\n\n* []{delimiter=none}\n* []{}\n:::\n\nTo place an argument within a numbered example list, see custom-labelled lists within numbered example lists.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html",
    "href": "chapters/copyediting/193-cop-block-tables.html",
    "title": "17  Tables",
    "section": "",
    "text": "17.1 Basic table syntax\nThere are three formats to encode tables in pandoc’s markdown (‘simple’, ‘grid’ and ‘pipe’). Some are easier to type, some easier to read, some give more functionality (i.e. having several lines in a cell).\nThe easiest way to create a table is to use RStudio’s visual editor. The editor allows you to create multiline cells, resize the columns a bit and so on. Alternatively, you can write tables in the markdown code. An online markdown table generator can help.\nFor tables with large cells (a lot of text in the cell), you might need to expand the “wrap line size” for the RStudio editor. The visual editor ensures that your markdown files has lines of a certain length. These don’t matter to the final PDF / html output, but they make your markdown source more readable. Now when you have a large table, you might need a bit more horizontal space in the markdown. For that you increase the wrap line size for the editor. In your file metadata block:\nReplace 72 with e.g. 80 or more if needed. You’ll see the difference if you go to the visual editor and expand your table’s columns a bit.\nIn the markdown, words in tables should not be cut. If your markdown table is like this:\nThen “knowledge” and “valuation” will print as “know ledge” and “valua- tion” respectively. You need to ensure that no word is cut by enlarging your table:\nTables found in your document will be turned into that format if their cells require multiple lines. Otherwise they will be turned into the simpler format:\nYou can create tables from scratch (a) in the RStudio visual editor or (b) in markdown code. For the latter you can use a online markdown table generator.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#basic-table-syntax",
    "href": "chapters/copyediting/193-cop-block-tables.html#basic-table-syntax",
    "title": "17  Tables",
    "section": "",
    "text": "editor_options:\n  markdown:\n    wrap: 72\n\n\n\n+-----+-------+\n|know |valua- |\n|ledge|tion   |\n+=====+=======+\n|...  |...    |\n+-----+-------+\n\n\n+----------+-----------+\n|knowledge | valuation |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n\n\nCorner    Header 1    Header 2    Header 3\n-------- ----------- ----------- -------------\nRow 1     Hello       My          Friend\nRow 2     1asdoi      23          234",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#cells-that-span-several-rows-or-several-columns",
    "href": "chapters/copyediting/193-cop-block-tables.html#cells-that-span-several-rows-or-several-columns",
    "title": "17  Tables",
    "section": "17.2 Cells that span several rows or several columns",
    "text": "17.2 Cells that span several rows or several columns\nUnfortunately this is not feasible in pandoc’s markdown, though that should change in the near future.1\nSolution. Enter your table with all cells, and put the content of any merged area in the top left cell of the merged area. For example, the table below:\n\n\nExample missing, to be entered in raw HTML\n\n| Cells merged across a row | Head 1                       | Head 2 |\n|:--------------------------|:-----------------------------|:-------|\n|                           | more                         | less   |\n| Row head                  | Cells merged across a column |        |\n\nShould be entered as if it was the table below:\n\n\nExample flawed, to be fixed\n\n| Cells merged across a row | Head 1                       | Head 2 |\n|:--------------------------|:-----------------------------|:-------|\n|                           | more                         | less   |\n| Row head                  | Cells merged across a column |        |\n\nA note should be made of the change. Next to the table code you should enter the following:\n&lt;!-- cells to merge: C1R1 and C1R2; C2R3 and C3R3 --\\&gt;\n\nThis will be invisible in the output, but visible to those who edit the file. ‘C2R3’ abbreviates ’second column from the left, third row the top.\nWe will then have to insert LaTeX and HTML output code directly. See [if-markdown-cant-handle-a-table] below.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#if-markdown-cant-handle-a-table",
    "href": "chapters/copyediting/193-cop-block-tables.html#if-markdown-cant-handle-a-table",
    "title": "17  Tables",
    "section": "17.3 If markdown can’t handle a table",
    "text": "17.3 If markdown can’t handle a table\nRequires: the not-in-format filter. The instructions using Divs with not-in-format class below require the not-in-format filter.\nIn case the usual markdown code for a table doesn’t work, we can insert a set of LaTeX code to the markdown file. The goal is then to have a set of latex code that can be inserted into the articles markdown file and then be run the usual way. For that, there are three steps needed:\n\nget the latex code for the desired table\nmake the table look as desired\nget the code into the markdown file.\n\n\nGenerate a separate markdown file (in the following called “separate .md”, whereas the initial markdown file of the article is called “articles .md”). Here we want to put only the latex code that will be inserted into the articles .md.\n\nFor the first step (get the latex code for the desired table), there are two options:\n\n\nBuild the latex code from scratch or via the table generator for latex, put the code to the separate .md.\nBuild the markdown code from scratch or via the table generator for markdown, put it to the separate .md, let it produce a latex output, copy/paste the latex code to the separate .md (it probably begins with something like \\begin{longtable} or \\begin{table} and ends with something like \\end{longtable} or \\end{table}).\n\n\nOnce you have the latex code in the separate .md, you can embed it in the following code:\n\n\n\n\n\n```{=latex}\n\\begin{center}\n\n[latex code for tables]\n\n\\end{center}\n```\n\n\n\n\nThe \\begin{center} and \\end{center} lines are optional, their effet is to center your table in the page.\nThe LaTeX code will only produce a result in LaTeX/PDF output. If the markdown code works with HTML output, you should leave it and embed it in a ::: {.not-in-format .latex} ... ::: Div, which ensures that the markdown table code is used only in formats other than LaTeX.\n\n\n\n\n\n```{=latex}\n\\begin{center}\n\n[latex code for your table]\n\n\\end{center}\n```\n\n\n\n\n\n::: {.not-in-format .latex}\n\n[markdown code for your table]\n\n:::\n\nCheck how the tables look by producing pdfs from the separate .md (much faster than always producing the whole article).\n\nFrom here, you might have or want to change several things:\n\n\n“longtable” -&gt; “tabular” (so that it doesn’t rely on longtable package, which doesn’t work within multicolumn environments).\n\\toprule, \\midrule and \\bottomrule -&gt; \\hline for simple horizontal lines\nIf a vertical line is desired at some point in the table change latex code \\begin{tabular}[]{@{}lcccc@{}} to \\begin{tabular}[]{@{}c|cccc@{}}. See that the number of letters determines the number of columns in the table. The letter “l” in the former code is to change into a “c” in the latter. To have a vertical line after the first column from the left, insert the sign (not letter!) “|” after the first c from the left.\n\n\nOnce that frame is set, we can insert the code from the separate .md into the articles .md and see how it produces the tables from here.\n\n\nYou may need to do the same to insert HTML code. In that case you should still leave the original markdown for other formats (JATS-XML), using not-in-format again:\n  ```{=latex}\n  [latex code for your table]\n  ```\n  ```{=html}\n  [html code for your table]\n  ```\n  ::: {.not-in-format .latex .html}\n  [markdown code for your table]\n  :::",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#table-captions",
    "href": "chapters/copyediting/193-cop-block-tables.html#table-captions",
    "title": "17  Tables",
    "section": "17.4 Table captions",
    "text": "17.4 Table captions\nRequires: pandoc-crossref.\nIf your table is in markdown only, add a caption thus:\n+----------+-----------+\n|knowledge | valuation |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n: An analysis of knowledge and valuation {#tbl:K-and-V}\n\nThe optional {#tbl:...} provides an identifier for crossreferences:\nAs you can see in @tbl:K-and-V, the analysis...\n\nFor further details on how to cite see the pandoc-crossref manual.\nIf your table is in raw LaTeX and markdown, the solution is this:\n::: {.not-in-format .latex }\n+----------+-----------+\n|knowledge | valuation |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n: An analysis of knowledge and valuation {#tbl:K-and-V}\n:::\n\n::: {only-in-format .latex}\n\n(latex code)\n\n:::\n\nOr you use the Imagify to convert the table into an image in non-PDF outputs.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#latex-tables-tips",
    "href": "chapters/copyediting/193-cop-block-tables.html#latex-tables-tips",
    "title": "17  Tables",
    "section": "17.5 LaTeX tables tips",
    "text": "17.5 LaTeX tables tips\nStart with the Pandoc-generated table code: write your table in markdown, generate the LaTeX output and extract the LaTeX code for the table.\nTest your table in a simple LaTeX document. Pandoc uses longtable, booktabs, array, multicol, calc:\n\\documentclass{article}\n\\usepackage{longtable,booktabs,array}\n\\usepackage{multicol}\n\\usepackage{calc}\n\\begin{document}\n\n[TABLE CODE HERE]\n\n\\end{document}\n\n(Dialectica-specific: add the font, \\usepackage{stix2}, and preferably compile using LuaLaTeX.)\nReduce the space between column. Add:\n{\\setlength{\\tabcolsep}{2pt}\n\n[TABLE CODE HERE]\n\n}\n\nImportant: don’t forget to wrap this between { and }, otherwise it will affect subsequent tables—in the whole journal issue.\nMake the table font smaller. Add:\n{\\small\n\n[TABLE CODE HERE]\n\n}\n\nDon’t forget the {, } or subsequent text is small.\nAdd a space between rows. Use \\addlinespace:\n cell content & cell content & cell content \\\\\n \\addlinespace\n cell content & cell content & cell content \\\\\n\nAdd/remove a line between rows. Add/remove midrule():\n cell content & cell content & cell content \\\\\n \\midrule()\n cell content & cell content & cell content \\\\\n\nVertically center rows. Use m rather than p for the first column (details here). This table has three p type columns and aligns cell contents on top:\n\\begin{longtable}[]{@{}\n  &gt;{\\raggedright\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.5}}@{}}\n\\toprule\\noalign{}\n[TABLE ROWS]\n\\end{longtable}\n\nThis one centers cell content vertically:\n\\begin{longtable}[]{@{}\n  &gt;{\\raggedright\\arraybackslash}m{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.25}}\n  &gt;{\\centering\\arraybackslash}p{(\\columnwidth - 10\\tabcolsep) * \\real{0.5}}@{}}\n\\toprule\\noalign{}\n[TABLE ROWS]\n\\end{longtable}",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/193-cop-block-tables.html#footnotes",
    "href": "chapters/copyediting/193-cop-block-tables.html#footnotes",
    "title": "17  Tables",
    "section": "",
    "text": "It is now implemented in pandoc’s inner data representation, but pandoc can’t yet read that from your markdown file.↩︎",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tables</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html",
    "href": "chapters/copyediting/194-cop-block-figures.html",
    "title": "18  Figures (images, diagrams, graphs)",
    "section": "",
    "text": "18.1 TikZ figures\nFigures are images, diagrams, graphs and the like. They can be inline or floated or annexed.\nAuthors tend to overuse inline figures. They are appropriate for small figures that do not deserve a title. Bigger figures should be inserted as floats.\nWhen using floated figures, rephrase the text if needed to cross-reference them instead of assuming they appear where you insert them. That is, replace sentences like “For illustration, see the following:” with “For illustration, see Figure @fig:figure1”.\nThere are two ways to provide figures: as separate files or within the markdown manuscript itself.\nFor figures provided as files, the preferred formats are:\nDepending on your template, PDF image files may not work well with output formats other than PDF.\nThe difference between vector and bitmap images is explained in section Section 18.3. In short, vector formats are preferred for diagrams, plots, and the like. Bitmap images for photos, fine-grained instrument outputs (e.g. brain scan), artistic drawings, and the like.\nPrefer vector formats for diagrams, schemas, etc. They scale better and are more precise. Vector images can be made with graphics editors (e.g. Inkscape) or generated from code, e.g. TikZ in LaTeX.\nPrefer TikZ/LaTeX if the author can provide the code. Using TikZ/LaTeX generates vector images using the journal templates’ own fonts. (Requires: imagify filter)\nRequires: Imagify filter.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figures (images, diagrams, graphs)</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#tikz-figures",
    "href": "chapters/copyediting/194-cop-block-figures.html#tikz-figures",
    "title": "18  Figures (images, diagrams, graphs)",
    "section": "",
    "text": "18.1.1 Inline TikZ figures\nSimply insert TikZ code in the manuscript, within a imagify Div:\n\n``` imagify\n\n\\usetikzlibrary{arrows}\n\\begin{tikzpicture}[...options...]\n  ... code ...\n\\end{tikzpicture}\n\n```\n\n\n18.1.2 Floated TikZ figures\nSave the TikZ code as a separate file with .tex or .tikz extension: (which one makes no difference):\nfigure1.tikz\n\\usetikzlibrary{arrows}\n\\begin{tikzpicture}[...options...]\n  ... code ...\n\\end{tikzpicture}\n\nIn the manuscript, insert an image link.\nSee @fig:myfigure for an example.\n\n![Caption of the figure.](figure1.tikz){#fig:myfigure}\n\nManuscript text resumes here.\n\nSee Section 18.2.3 below for details. It must be on a line of its own, surrounded by blank lines, and with a caption text:",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figures (images, diagrams, graphs)</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#figures-from-files",
    "href": "chapters/copyediting/194-cop-block-figures.html#figures-from-files",
    "title": "18  Figures (images, diagrams, graphs)",
    "section": "18.2 Figures from files",
    "text": "18.2 Figures from files\nTo insert a figure from a file you use the markdown image command. Whether it generates an inline figure or a floated figure depends on how you use it, so we explain that command first.\n\n18.2.1 Markdown image command\nThe image command is like the link command but preceded with !:\n![alt text](file.jpg \"title of the image\")\n\nAs with links the source can be provided separately instead:\n![alt text]\n\n[alt text]: file.jpg \"title of the image\"\n\nIf the alt text is long, you can supply a shorter handle to provide the source separately:\n![alt text that is very long because it is the caption of the image.][img1]\n\n[img1]: file.jpg \"title of the image\"\n\nIn this command:\n\nfile.jpg is the name of the file. It should be present in the folder. If it is in another folder give a path: path/to/file.jpg.\nalt text is the alt text. Originally, it is text that is meant replace the image for visually impaired readers and when the image file is missing, on webpages. But it becomes the image’s caption if it is treated as a floated figure.\ntitle, called the title, is optional text that is typically displayed when hovering above the image on webpages. It is not displayed at all in PDF output.\n\n\nInline or Floated. An image command is:\n\nA floated figure if it is on a single line, separated by blank lines, and with a non-empty alt text,\nAn inline figure otherwise.\n\n\nAttributes. You can add attributes to an image command. This is used to specify is width, height and a id for cross-references:\n![alt text](file.jpg){width=50% #fig:fig1}\n\n![other alt text]{#fig:fig2}\n\n[other alt text]: file2.jpg\n\n\n18.2.2 Inline figure from a file\nIf you do not separate the image common from the surrounding text by blank lines, the image will be mixed with the text itself:\nThe image below:\n![](file.jpg \"a nice cat picture\")\nwill be printed in the middle of a line of text.\n\nIn most cases, you want to separate it. You should then make sure you leave the alt text empty, otherwise the image will be treated as a floated figure:\nThe image below:\n\n![](file.jpg \"a nice cat picture\")\n\nis separated from the text above and below.\n\nNote that you cannot cross-reference inline figures.\n\n\n18.2.3 Floated figure from a file\nInsert an image command on a line of its own, surrounded by blank lines:\n![Caption of the figure.](file.svg 'optional hovering text')\n\nYou can add attribute to specify a width or height and a id for cross-reference:\nPrevious text... See @fig:figure1.\n\n![Caption of the figure.](file.svg){#fig:figure1 width=50%}",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figures (images, diagrams, graphs)</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#sec-vector-bitmap",
    "href": "chapters/copyediting/194-cop-block-figures.html#sec-vector-bitmap",
    "title": "18  Figures (images, diagrams, graphs)",
    "section": "18.3 Background on vector vs bitmap formats",
    "text": "18.3 Background on vector vs bitmap formats\n(Skip this section if you are familiar with the distinction).\nWhat’s the difference between vector and bitmap image files? Bitmap (a.k.a. raster) images are encoded as a grid of pixels. Vector images are encoded as mathematical descriptions of lines and curves. For instance, a vector image may be (the computer-language equivalent of) “draw a circle of radius 10mm around the coordi nate (0,0).” The bitmap equivalent would be a big grid with cells coloured to form a circle. Because of this, vector images scale perfectly and magnify perfectly. Bitmap images can get noisy and pixelated when scaled or magnified. See below if you can tell which is which:\n \nAs you can see, the vector (first one) looks smooth when magnified, the bitmap looks pixelated.\nWhy use vector images for diagrams? They’re much better quality and use much less space. A bitmap diagram easily looks pixelated in print or on a high-resolution screen; it’ll look unprofessional to the reader. Bitmaps in high resolution can look good even in print or when enlarged on a screen, but at the cost of using a lot of space: a 1920*1080 high resolution bitmap easily takes about 1000 times the space of vector version of the same diagram; an article with bitmap images can easily occupy the same space as 10 to 100 articles without. It’s only in the case of highly textured images (e.g. photos) that a vector version would be either impossible or much heavier than a bitmap.\nWhich file types are vector, which are bitmap?\n\nJPEG, JPG, PNG, TIFF: bitmap images.\nPDF: can be bitmap, vector, and even images combining the two. The only way to tell is to zoom in a lot and see whether the lines remain perfect (vector) or pixelate (bitmap). File size is also an indicator: vectors are hardly more than a few Kbs, bitmaps can be anything from a few Kbs to one Mb or so.\nSVG: vector. Exception: an SVG file can import bitmaps from other files, including by URL. So in principle an author could send you a SVG ‘conversion’ that is nothing else than a link to an online version of their image. You’re very unlikely to encounter that problem, but if in doubt: the SVG file is a text file, you can open it in a text editor. Look for the tag &lt;image , e.g. &lt;image href=\"mybitmap.pgn\" width=\"200px\"/&gt;.\n\n\nHow to convert a bitmap image to a vector image? It can’t really be done. The problem is that the computer has to guess from the pixel grid of a bitmap image what’s supposed to be a line, a curve, etc. and that requires some intelligence (think of it like this: we’re going from a limited resolution to infinite precision). This is called vectorizing the bitmap image. Software like Inkscape can try and vectorize images for you, but you have to fiddle with the settings for each specific image, and the results are rarely satisfactory. In most cases, your or the author will have a much easier time recreating the image in vector mode. If you want to try to vectorize anyway, search “vectorize an image in Inkscape” or “convert an image to SVG” online to find some tutorials.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figures (images, diagrams, graphs)</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#how-to-create-or-convert-images",
    "href": "chapters/copyediting/194-cop-block-figures.html#how-to-create-or-convert-images",
    "title": "18  Figures (images, diagrams, graphs)",
    "section": "18.4 How to create or convert images",
    "text": "18.4 How to create or convert images\n\n18.4.1 Prefer vector formats for figures\nDiagrams, figures and the like should be provided in vector graphics formats (SVG files or code or TikZ code in LaTeX). Only photos, hand-drawn illustrations and the like should be provided as bitmap (a.k.a. raster) files. If you’re not familiar with the difference, see the explanation below.\nIf an author provides a diagram in bitmap form we ask that they recreated it in a vector format. Inkscape is an open-source, free software to generate vector images that is fairly easy to use and powerful. Authors who write in LaTeX may try to create in using the TikZ package instead.\nNote on PowerPoint. Some authors provide figures in MS Power Point. To convert to SVG, you will typically need to open it in MS Power Point (rather than Libreoffice) and convert to SVG there.\n\n\n18.4.2 How to create a vector image?\nHow to create a vector image? Draw it in an editor, or code it in TikZ.\n\nDrawing in a vector graphics editor. Wikipedia has a [list of visual graphics editor]. Fully-featured editors will cover all needs but may require more work. Inkscape is the best open-source one; Adobe Illustrator a good propertary one. However for simple diagrams you may be able to get by with a quick-and-dirty online editor. There are quite a few of those; try online svg editor in a search engine (check whether you need to pay to save your file). At the moment\nDrawSVG seems good (easy to use, free and no registration, ads).\n\n\nTikZ diagrams. TikZ is a language to describe vector images that can be embedded in LaTeX. It’s powerful but has a very steep learning curve. If authors can provide them, TikZ diagrams are the best - because any text in those diagrams will be printed out in the journal’s own fonts. TikZ code can be included directly in the markdown. Our template will include them directly in the LaTeX/PDF output and convert them to SVG files for other output formats.\nHow to create a TikZ diagram? Typically the author needs to go through the (large) TikZ documentation and work from existing examples. But there is also an online visual editor (TikZit) that can help.\n\n\n18.4.3 How to modify a bitmap image\nWikipedia has a list of bitmap image editors. GIMP is the best open-source editor. Adobe Photoshop and Photoshop Elements is a good commercial one, photography-oriented.\n\n\n18.4.4 Figures with letters or text\nFigures often include letters or text. They look best if their fonts are consistent throughout your journal. It is desirable, but not mandatory, your house template fonts. If these can be freely distributed you could ask authors to install them and use them, but that’s a tall order. It’ll typically fall on you to apply house fonts if possible.\n\nFigures in TikZ code: automatic. TikZ specifies the text, not the fonts, so your house template will render the figures with your house fonts.\nFigures in SVG. Use a good editor like Inkscape with the house fonts installed on your computer. Open the file, select text elements, change their font. It should be quick. Exception: in some rare cases, the original files may have encoded the characters as complicated lines rather than characters proper; if so the editor won’t recognize them as text and change their font. If so your only option would be to remove the original text and recreate it: it is probably more time-costly than it’s worth.\nFigures in bitmap format: can’t realistically be done. Editing in a bitmap editor is possible but probably more time-costly than it’s worth. If you’re settling for a bitmap you’re already tolerating low quality anyway.\n\n\n\n18.4.5 Removing large margins in SVG files\nIf the author provides you with a SVG file that has too much whitespace around, resize it using Inkscape.\n\nopen the file in Inkscape\nselect all the content with the arrow tool (click on the top left, drag your mouse to form a rectangle around it). Note: you could try Edit &gt; Select all (Ctrl+A on Win, Cmd+A on MacOS) but this sometimes take the entire page, even if it has a lot of whitespace.\nGo to File &gt; Document Properties. In the “Custom Size” area, expand the “Resize page to content…” line.\nMake sure “Units” is “px” (pixels). Enter 20 (20.00000) margins everywhere. If you activate the lock icon, you only need to enter 20 in one of the margins and the others will be the same.\nClick “Resize page to drawing or selection”. You should see that the page limits are just around the drawing.\nClose the “Document properties” box and save the document.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figures (images, diagrams, graphs)</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/194-cop-block-figures.html#troubleshooting",
    "href": "chapters/copyediting/194-cop-block-figures.html#troubleshooting",
    "title": "18  Figures (images, diagrams, graphs)",
    "section": "18.5 Troubleshooting",
    "text": "18.5 Troubleshooting\n\n18.5.1 [WARNING] Could not convert image…\nIf you insert an SVG image file in markdown and generate a PDF output, Pandoc needs to convert it to a format that LaTeX understands. It does so using an external programme, rsvg-convert. If rsvg-convert is not present, you will get a warning: [WARNING] Could not convert image...: check that rsvg-convert is in path.\nSolutions\n\nConvert the SVG files to PDF using Inkscape. They will still be vector file and print out well, but the LaTeX engine that generates your PDF output will be able to insert them. Open the file(s) in Inkscape, go to File &gt; Save a copy, select the “Portable Document Format (pdf)” format, save. In your markdown code replace ImageFile.svg with ImageFile.pdf.\nInstall rsvg-convert. As far as we can tell the least difficult way to do this is to use package managers. On Linux look for rsvg-convert in your package manager. On MacOS you should install homebrew first, if you haven’t already, and run the command brew install rsvg-convert. On Win you should install the chocolatey package manager, open an administrator Powershell (Windows menu &gt; Windows Powersheel &gt; right click on Powershell and select “Run as Administrator”, give the permission) and run the command choco install rsvg-convert.\n\n\nNote: on Windows Pandoc 2.14.0.3 (June 2021 version) cannot handle SVG conversion, even if rsvg-convert is installed. If that’s your setup use the first solution.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Figures (images, diagrams, graphs)</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html",
    "href": "chapters/copyediting/195-cop-block-statements.html",
    "title": "19  Statements and indented blocks",
    "section": "",
    "text": "19.1 Statements basics\nRequires: the statement.lua filter.\nIn articles some special blocks appear as indented. They fall into three types:\nThis section deals with statements, more precisely statements other than proofs and theorems. For the latter see Chapter 26.\nArguments that are set out of the main text can be typeset as statements. But when they have labelled premises, especially when we need to crossrefer to specific premises or the conclusion, we typeset them as custom-labelled lists. See Section 16.4.\nThe simplest statements are just a block of idented text. Optionally, some statements have a label (aka title). They may also have some extra encoded fields like acronym, info, ID for crossreferencing—these are explained below.\nStatements are encoded as Divs. See Section 14.5 if you don’t yet know what Divs are.\nA statement is encoded as a Div with the special class statement:\nAs detailed in Section 14.5, there are a couple of equivalent variations for this code. Provided that the Div has no other attribute that the statement class, curly braces can be omitted:\nThe opening and closing ‘fences’ can also be made as wide as you want if that improves readability. That doesn’t affect the output:",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statements-basics",
    "href": "chapters/copyediting/195-cop-block-statements.html#statements-basics",
    "title": "19  Statements and indented blocks",
    "section": "",
    "text": "...main flow of text...\n\n::: { .statement }\n\nThe sum of angles of a triangle equals two right angles.\n\n:::\n\n...subsequent flow of text...\n\n\n::: statement \n\nThe sum of angles of a triangle equals two right angles.\n\n:::\n\n\n::: {.statement} ::::::::::::::::::::::::::::::::::::::::::::\n\nThe sum of angles of a triangle equals two right angles.\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\n\n::: statement :::::::::::::::::::::::::::::::::::::::::::::::\n\nThe sum of angles of a triangle equals two right angles.\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#no-statements-in-footnotes",
    "href": "chapters/copyediting/195-cop-block-statements.html#no-statements-in-footnotes",
    "title": "19  Statements and indented blocks",
    "section": "19.2 No statements in footnotes",
    "text": "19.2 No statements in footnotes\nStatements don’t work in footnotes—that’s a limitation of the LaTeX package we use for them, amsthm.\nTo get an indented block in footnote use a custom-labelled list with an empty label. See Section 16.3.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-titles",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-titles",
    "title": "19  Statements and indented blocks",
    "section": "19.3 Statement titles",
    "text": "19.3 Statement titles\nA statement can have a title (aka custom label). This is specified in Strong emphasis (**...** or __...__), at the beginning of the statement:\n::: statement\n**The Principal Principle**. One's credence in $p$ conditional\non the hypothesis that the chance of $p$ is $x$ should be $x$.\n:::\n\nThis will be rendered as an indented block with its title in the template’s preferred formatting of statement titles, for instance:\n\n\nThe Principal Principle. One’s credence in \\(p\\) conditional on the hypothesis that the chance of \\(p\\) is \\(x\\) should be \\(x\\).\n\n\nIf you don’t specify an ID or acronym for the statement, its title is used to generate an ID automatically. The automatic ID is a lower case version, with all spaces and symbols replaced by _: the-principal-principle. If this ID already exists in your document (for instance, if it’s also the title of a section that Pandoc uses to automatically generate an ID for that section), the ID will be ...-1, or ...-2, as needed.\nA statement can only have one ID so if the statement has an acronym or custom ID (see below) they’re replace this one.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-acronyms",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-acronyms",
    "title": "19  Statements and indented blocks",
    "section": "19.4 Statement acronyms",
    "text": "19.4 Statement acronyms\nIf a statement has a title, you can also give it an acronym. It’s placed at the beginning of the title, within parentheses:\n::: statement\n**(PP) The Principal Principle**. One's credence in $p$ conditional\non the hypothesis that the chance of $p$ is $x$ should be $x$.\n:::\n\nThe result will depend on where the template prefers to place the acronym. For instance:\n\n\nThe Principal Principle (PP). One’s credence in \\(p\\) conditional on the hypothesis that the chance of \\(p\\) is \\(x\\) should be \\(x\\).\n\n\nBeware that the acronym must be within the title, i.e. within the strong emphasis delimiters:\n\nGOOD: __(PP) The Principal Principle__\nBAD: (PP) __The Principal Principle__\n\n\nIf you don’t specify an ID for a statement with an acronym, the acronym will be used to automatically generated an ID, e.g. PP. (When the ID PP already exists in your document, it’ll be PP-1 instead, or PP-2, etc.).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-info",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-info",
    "title": "19  Statements and indented blocks",
    "section": "19.5 Statement info",
    "text": "19.5 Statement info\nA statement can have some info, e.g. a source citation or some text within parentheses This is put at the end of, or right after, the statement’s title.\n::: statement\n**(Acro) Title of the satement (some info).** Content of the statement\n:::\n\n::: statement\n**(Acro) Title of the satement @Doe2020.** Content of the statement\n:::\n\n::: statement\n**(Acro) Title of the satement.** (some info) Content of the statement\n:::\n\n::: statement\n**(Acro) Title of the satement.**  @Doe2020 Content of the statement\n:::\n\nIf there’s no title, the info is just at the beginning.\n::: statement\n(some info) Content of the statement\n:::\n\n::: statement\n@Doe2020 [@Doe2021; @Doe2022] Content of the statement\n:::\n\nThe output depends on the template. (The template may even define different styles for different kinds of statement.) It may look like this, for instance:\n\n\nThe Principal Principle (PP). (Lewis (1990)) One’s credence in \\(p\\) conditional on the hypothesis that the chance of \\(p\\) is \\(x\\) should be \\(x\\).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-custom-ids",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-custom-ids",
    "title": "19  Statements and indented blocks",
    "section": "19.6 Statement custom IDs",
    "text": "19.6 Statement custom IDs\nYou can cross-reference statements that have an ID If the statement has an acronym or title, you can use the ID automatically generated based on those. Otherwise you can give it an ID by putting a #myidentifier entry in its attributes:\n::: {.statement #my-favourite-statement}\n__Title of the statement__. Content of the statement\n:::\n\nIt’s good practice to start your ID by sta: to make clear that it’s a statement ID:\n::: {.statement #sta:psr}\n__(PSR) Principle of Sufficient Reason__. Content of the statement\n:::\n\nBeware of adding curly brackets and a dot before statement:\nGOOD\n::: {.statement #my-favourite-statement}\n...\n:::\n\nBAD\n::: statement #my-fav-statement\n...\n:::\n\n::: {statement #my-fav-statement}\n...\n:::\n\nA statement can only have one ID so if you provide one you can’t refer to it by its acronym or title.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#statement-within-a-numbered-example-list",
    "href": "chapters/copyediting/195-cop-block-statements.html#statement-within-a-numbered-example-list",
    "title": "19  Statements and indented blocks",
    "section": "19.7 Statement within a numbered example list",
    "text": "19.7 Statement within a numbered example list\nSee custom-labelled lists within numbered example lists.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/195-cop-block-statements.html#crossreferencing-statements",
    "href": "chapters/copyediting/195-cop-block-statements.html#crossreferencing-statements",
    "title": "19  Statements and indented blocks",
    "section": "19.8 Crossreferencing statements",
    "text": "19.8 Crossreferencing statements\nStatements with ID (either automatically generated from their title or acronym, if any, or custom IDs that you provide) can be crossreferenced. You can use the citation syntax or the link syntax.\n\n19.8.1 Citation syntax\n\n@mystatement will produce a link with the statement acronym if it has one: PP, otherwise a link its title if has one: The Principal Principle or nothing.\n[@mystatement] will produce the same as above, surrounding by bracket. Beware that if your statement has no title or acronym (and it’s not a numbered statement e.g. theorem) you’ll only get two parentheses: ().\nCitations of multiple statements produce a ;-separated list. [@sta:psr, @sta:pp] can produce ‘(Principle of Sufficient Reason; Principal Principle)’ for instance.\ncitation prefixes and suffixes are allowed: [See @sta:pp above].\n\n\n\n19.8.2 Link syntax\n\n[](#mystatement) will produce the same as @mystatement.\n`arbitrary text will produce “[arbitrary text]” with a link to the statement.\n\n\nWithin the link text, &lt;&gt; will be replaced the statement’s automatic label, i.e. its acronym (it is has one) or title.\nSee the [principle &lt;&gt;]{#sta:pp} above.\n\nThis will produce: ‘See the principle PP’ if the statement @sta:pp has acronym PP.\nThe link syntax can’t be used to refer multiple statements. But it gives you more control over how the link is formatted. Compare:\n* According to principle @sta:pp, ...\n* According to [principle &lt;&gt;]{#sta:pp}, ...\n\nThe former generates a small link: ‘according to principle PP’, the latter a longer one: ‘according to principle PP’.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Statements and indented blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/196-cop-block-columns.html",
    "href": "chapters/copyediting/196-cop-block-columns.html",
    "title": "20  Multiple columns",
    "section": "",
    "text": "Requires: the columns filter.\nThis is about setting parts of text in multiple columns, not about typesetting an entire document in two columns.\nIt is sometimes useful to typset a part of text into multiple columns, e.g. to display some claims or formulas side by side. Note that this is not the same as using a table. Here we just divide part of the text into two or more columns, and the text may be allowed to flow from one to the other. The syntax is this:\n::: columns\n:::: column\nThis goes in the first column\n::::\n\n:::: column\nThis goes in the second column\n::::\n\n:::: column\nThis goes in a third column\n::::\n:::\n\nIn LaTeX, columns are justified vertically by default. That is, if columns are explicitly broken at certain points, LaTeX ensures that the text in each column occupies its full height by stretching inter-paragraph space. This means that some paragraph may end up being “bumped” at the end of a column. To avoid this, set the .ragged class on your columns Div like so:\n::: {.columns .ragged}\n\n...\n\n:::\n\nNote that this doesn’t work on individual column Divs, only on the columns Div that contains them.\nAbove I use three colons to open and close the “columns” part, and four colons to open and close each “column”. Any number above two works, provided they are distinct from each other.\n\n\n\n\n\n\n\nGood\nBad\n\n\n\n\nColumns opens and closes with 3 colons, each column opens and closes with 5:\n::: {.columns}\n::::: {.column}\nOn the left\n:::::\n\n::::: {.column}\nOn the right\n:::::\n:::\nEverything opens and closes with 4 colons:\n:::: {.columns}\n:::: {.column}\nOn the left\n::::\n\n:::: {.column}\nOn the right\n::::\n::::\n\n\nFirst column opens and closes with 5 colons, second with 7:\n::: {.columns}\n::::: {.column}\nOn the left\n:::::\n\n::::::: {.column}\nOn the right\n:::::::\n:::\n```\nFirst column opens with 5 but closes with 7, second column opens with 7 but closes with 5:\n::: {.columns}\n::::: {.column}\nOn the left\n::::::::\n\n::::::: {.column}\nOn the right\n:::::\n:::\n\n\nThe {. … } is optional if you have one word only, but mandatory if you have several\n::: {.columns}\n::: {.column}\nOn the left\n:::\n\n::: {.column}\nOn the right\n:::\n:::\n\n::: {.columns \\#my-columns}\n::: {.column}\nOn the left\n:::\n::: {.column}\nOn the right\n:::\n:::\n::: columns \\#my-columns\n\n::::: column width=\"40%\"\n\nOn the left\n\n:::::\n\n::::::: column label=\"red\"\n\nOn the right\n\n:::::::\n\n:::\n\n\n\nAt present you cannot set the relative width of columns.\nSee columns filter manual for further details.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Multiple columns</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/199-cop-block-other.html",
    "href": "chapters/copyediting/199-cop-block-other.html",
    "title": "21  Troublesome blocks",
    "section": "",
    "text": "21.1 Raw code if all else fails",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Troublesome blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/199-cop-block-other.html#raw-code-if-all-else-fails",
    "href": "chapters/copyediting/199-cop-block-other.html#raw-code-if-all-else-fails",
    "title": "21  Troublesome blocks",
    "section": "",
    "text": "21.1.1 Adding Raw LaTeX commands within markdown\nLaTeX/PDF typesetting may require fine-grained adjustements that we can ignore in HTML output. It is often possible to provide it alongside markdown. Caution: use sparingly. Don’t tinker with e.g. line or list spacing on a per-article basis.\nExample: you have a markdown table that you’re happy with, but it’s too wide to fit in a PDF page. You can make its text smaller in PDF output with:\n`{\\small`{=latex}\n\n+-----+-------+\n|know |valua- |\n|ledge|tion   |\n+=====+=======+\n|...  |...    |\n+-----+-------+\n\n`}`{=latex}\n\nUsing `...`{=latex} creates an (inline) element of raw code that is passed as is to latex and erased in other formats. {\\small .... } in LaTeX creates a group ({...}) within which the text is small.\n\n\n21.1.2 Providing a Raw LaTeX alternative\nRequirement. The not-in-format filter is required for some of the below.\nWhen there is no markdown solution to typeset something there is fallback solution: include raw output code of other formats directly in your markdown document. We first figure out how the element should be coded in relevant output formats (LaTeX, html, xml); we call this raw code. Then we insert raw code without our markdown document.\nIn some cases you’re happy with the output markdown generates in some, but not all, formats. For instance, the XML output is fine (XML has no typesetting), but you’d like to do some fine-grained typesetting in LaTeX that the normal LaTeX output doesn’t handle. In that case you’ll use markdown for some output formats, but provide raw code only for LaTeX.\nTo provide Raw code for all output formats, you insert it as follows:\n\n\n\n\n``` {=latex}\n... LaTeX code here ...\n```\n\n``` {=html}\n... html/epub code here ...\n```\n\n``` {=xml}\n... xml code here ...\n```\n\n\n\n\nThe part marked with {=latex} will be included as is in the LaTeX output (for PDFs) and only in the LaTeX output.\nTo provide raw code for some, but not all, formats, you should put the relevant bits of markdown within a not-in-format div, and the raw code after it. (This method requires the not-in-format Pandoc filter.) For instance:\n::: {.not-in-format .latex}\n-------- -------\nsimple    table\n-------- -------\n:::\n\n\n\n\n\n```{=latex}\n\\begin{table}\n\\begin{tabular}{ll}\n\\hline\nsimple & table\n\\hline\n\\end{tabular}\n\\end{table}\n```\n\n\n\n\n\nHere the simple markdown table enclosed within :::{.not-in-format .latex} … ::: will be used for all outputs formats except LaTeX and LaTeX-based outputs like PDF and beamer. The raw code below included within ```{=latex} … ``` will be used for LaTeX and LaTeX-based outputs.\nYou can leave out some markdown section from several formats too: :::{.not-in-format .xml .latex}.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Troublesome blocks</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/20-cop-multiple-languages.html",
    "href": "chapters/copyediting/20-cop-multiple-languages.html",
    "title": "22  Multiple languages",
    "section": "",
    "text": "Enter Greek and other languages in their original script:\n\n\n\nπᾶσα τέχνη καὶ πᾶσα μέθοδος, ὁμοίως δὲ πρᾶξίς τε καὶ προαίρεσις, ἀγαθοῦ τινὸς ἐφίεσθαι δοκεῖ: διὸ καλῶς ἀπεφήναντο τἀγαθόν, οὗ πάντ᾽ ἐφίεται. διαφορὰ δέ τις φαίνεται τῶν τελῶν: τὰ μὲν γάρ εἰσιν ἐνέργειαι, τὰ δὲ παρ᾽ αὐτὰς ἔργα τινά. ὧν δ᾽ εἰσὶ τέλη τινὰ παρὰ τὰς πράξεις, ἐν τούτοις βελτίω πέφυκε τῶν ἐνεργειῶν τὰ ἔργα. πολλῶν δὲ πράξεων οὐσῶν καὶ τεχνῶν καὶ ἐπιστημῶν πολλὰ γίνεται καὶ τὰ τέλη: ἰατρικῆς μὲν γὰρ ὑγίεια, ναυπηγικῆς δὲ πλοῖον, στρατηγικῆς δὲ νίκη, οἰκονομικῆς δὲ πλοῦτος. ὅσαι δ᾽ εἰσὶ τῶν τοιούτων ὑπὸ μίαν τινὰ δύναμιν, καθάπερ ὑπὸ τὴν ἱππικὴν χαλινοποιικὴ καὶ ὅσαι ἄλλαι τῶν ἱππικῶν ὀργάνων εἰσίν, αὕτη δὲ καὶ πᾶσα πολεμικὴ πρᾶξις ὑπὸ τὴν στρατηγικήν, κατὰ τὸν αὐτὸν δὴ τρόπον ἄλλαι ὑφ᾽ ἑτέρας: ἐν ἁπάσαις δὲ τὰ τῶν ἀρχιτεκτονικῶν τέλη πάντων ἐστὶν αἱρετώτερα τῶν ὑπ᾽ αὐτά: τούτων γὰρ χάριν κἀκεῖνα διώκεται. διαφέρει δ᾽ οὐδὲν τὰς ἐνεργείας αὐτὰς εἶναι τὰ τέλη τῶν πράξεων ἢ παρὰ ταύτας ἄλλο τι, καθάπερ ἐπὶ τῶν λεχθεισῶν ἐπιστημῶν.\n\n\nFor PDF output: if you encounter “Missing unicode charater” errors, it’s a template issue. Contact the template designer.\nRequires. For LaTeX/PDF, font that supports the relevant unicode charaters and, if needed, template unicode definitions for extra characters.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Multiple languages</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html",
    "title": "23  Cross-referencing",
    "section": "",
    "text": "23.1 Cross-referencing sections\nWhen an article cross-references its sections, figures, tables, images, numbered examples, equations and footnotes, we encode these in markdown. This ensures that they are linked (and, in some cases, standardly labeled and properly numbered) in the outputs.\nCross-references to sections, figures, tables, and images are handled by the pandoc-crossref extension of pandoc. We describe its basic usage described below (full documentation here).\nCross-references to numbered examples are handled by Pandoc itself, usage described below.\nAt the moment we cannot handle neatly cross-references to footnotes. A workaround is given below.\nTo cross-reference a section you first need to know its identifier. Pandoc accepts manually specified identifiers but also automatically generates identifiers. A manually specified identifier is given by adding {#sec:mysecid} after the heading. An automatically generated identifier is obtained by putting the section heading in lowercase, removing all formatting, links, or footnotes, removing all characters other than letters, numbers, underscore, periods and hyphens, and replacing spaces with hyphens. Some examples:\nSpecial cases. If a heading starts with something else than a letter, everything before that letter is removed (to ensure that all identifiers start with a letter). If a heading is empty, its identifier is section. If there are several headings of the same name (say, section), the second one is suffixed with -1 (section-1) then -2, etc.\nWarning: of course, if you change a section heading title, the automatically generated identifier changes. So if your headings might change, either use manual identifiers or wait before entering cross-references.\nWhen editing in RStudio visual mode, you can use Insert &gt; Cross-reference to find heading identifiers. A menu with the list of headings is displayed; pick the one you want and the editor will insert the code @ref(the-first-word). Remove @ref(…), and enter @sec: right in front of the the-first-word. The code @sec:the-first-word should become blue as you type @ and the following letters; if not it’s not interpreted as a reference, try again or edit in code mode instead.\nNow to cross-reference sections with identifiers the-first-word, the-second-word, use the following code:\nNote that @Sec:… instead of @sec:… capitalizes the label. Note that the quare-bracketed version doesn’t add parentheses (unlike in citations): the square brackets are only necessary if you have several references or a manually specified prefix (below).\nThe prefix (“sec.” here) is specified by the template. It can be suppressed or manually specified:\nAs the last line illustrates, you need to repeat the custom prefix for each entries that it applies to, even though in the output they will be grouped.\nStyle recommendations.\nCall subsections “sections” when referencing to them. If you’re referencing a subsection, you should still call it “section” in the readable text: ``cf. section [@sec:asubsectionid]. A subsection is a section, and the terminology of “subsection” is clunky and technical.\nAvoid specifying a manual prefix just to follow the author’s style. The default prefix is specified in the journal’s style template and should be preferred wherever possible. A manual prefix is only recommended for appendices (or any other section that is not a regular section of the paper).\n“In the last section”, “In the next section”, …. What if the author references sections verbally, e.g.: “In the last section, we will summarize…”, or “The next section reviews …”? Two options, decide what fits best:\nThe following does not work with PDF output, so we do not use it. It is also possible to specify a custom label to replace the number. This can be combined with a custom identifier:",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-sections",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-sections",
    "title": "23  Cross-referencing",
    "section": "",
    "text": "Markdown heading\nResulting section identifier(s)\n\n\n\n\n# The Last Stand\nthe-last-stand\n\n\n## Cause *célèbre*^[Sic.]\ncause-célèbre\n\n\n## The no.1 'Foolish' Claim that $E=mc^2$\nthe-no.1-foolish-claim-that-emc2\n\n\n# The First Word {#sec:first}\nfirst\n\n\n\n\n\n\n\n\n\n\n\nMarkdown headings\nResulting section identifier(s)\n\n\n\n\n# 3 Little Pigs\nlittle-pigs\n\n\n# Surprise Party\n\n## Surprise Party\n\nsurprise-party\n\nsurprise-party-1\n\n\n#\n\n#\n\nsection\n\nsection-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nIn sec. 1, we review…\nIn @sec:the-first-word, we review\nor\nIn [@sec:the-first-word], we review\n\n\nSec. 1 discusses\n@Sec:title-of-section discusses\nor\n[@Sec:title-of-section] discusses\n\n\nIn secs. 1, 2 we\nIn [@sec:the-first-word; @sec:the-second-word]\n we review\n\n\n… elsewhere (sec. 1).\n...elsewhere (@sec:the-first-word).\nor\n...elsewhere ([@sec:the-first-word]).\n\n\n\n\n\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nas said above (1).\nas said above [-@sec:the-first-word]\n\n\nIn unit 1, we…\nIn [unit @sec:the-first-word]\n\n\nIn § 1, we…\nIn [§ @sec:the-first-word]\n\n\nIn appendix 5, …\nIn [appendix @sec:appendix-proof-of-theorems], ...\n\n\nIn appendices 5, 6, …\nIn [appendices @sec:app1; appendices @sec:app2]\n\n\n\n\n\n\n\n\n\nmake non-verbose: In @sec:the-last-one, we..., @Sec:the-next-one reviews ...\nadd cross-references in brackets: In the last section ([@sec:the-last-one]), In the next section ([@sec:the-next-one]), ....\n\n\n\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nSee appendix A…\n12. Appendix A: Proofs\nSee [appendix @sec:appendix-a-proofs]...\n# Appendix A: Proofs {label=\"A\"}\n\n\nSee appendix A…\n12. Appendix A: Proofs\nSee [appendix @sec:app1]...\n# Appendix A: Proofs {label=\"A\" #sec:app1}",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#crossreferencing-and-captioning-tables-figures-images-equations",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#crossreferencing-and-captioning-tables-figures-images-equations",
    "title": "23  Cross-referencing",
    "section": "23.2 Crossreferencing and captioning tables, figures, images, equations",
    "text": "23.2 Crossreferencing and captioning tables, figures, images, equations\nRequires: the pandoc-crossref filter.\nTables and images can be cross-referenced and can be given a caption text. To cross-reference an image:\n![](imagefile.png) {#fig:my-image}\n\nAs you can see in @Fig:my-image ...\n\nTo add a caption to the image:\n![An image of a flying pig](imagefile.png) {#fig:my-image}\n\nAs you can see in @Fig:my-image ...\n\nExample with a table:\nAs the reader can see in @tbl:diffstyles, there are many\noptions:\n\n+----------+-----------+\n| style    | features |\n+==========+===========+\n| ...      | ...       |\n+----------+-----------+\n\n: The different styles of text {#tbl:diffstyles}\n\nThe identifiers of images or figures must have the form #fig:..., those of tables #tbl:..., those of equations #eq:....\nWhen cross-referencing them we use citation syntax with the prefixed identifiers: [@fig:my-image], @tbl:my-table, etc. This will print “figure 1”, “table 2”, etc. To get “Figure 1” and “Table 2” you capitalize the prefix: @Fig:..., @Tbl:....\nDetails are in the Pandoc-cross-ref documentation here.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#sec-crossreferencing-footnotes",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#sec-crossreferencing-footnotes",
    "title": "23  Cross-referencing",
    "section": "23.3 Cross-referencing footnotes",
    "text": "23.3 Cross-referencing footnotes\nCross-reference to footnotes has to be done manually. If your footnote numbers are not final yet, you will need to revist them before publishing.\nWe do not reference the page numbers where the footnote appears. This is meaningless in HTML and ePub output.\nThe syntax is as follows:\nThis is the main text.[^myfn]\n\n[^mfn]: [On this]{#my-best-footnote} difficult point I would like to add irrelevant remarks... .\n\n...\nAs mentioned above in footnote [7](#my-best-footnote), ...\n\n[^myfn] and [myfn]: create a footnote. We could have the alternative syntax, ^[... content ...] placed directly in the text:\nThis is the main text.^[[On this]{#my-best-footnote} difficult \npoint... .]\n[On this]{#my-best-footnote} creates a “Span” element with the identifier my-best-footnote. A Span is an invisible inline element that can carry attributes such as an identifier. The identifier allows us to target it with a link.\nfootnote [1](#my-best-footnote) adds to the number “7” a clickable link to the span we create above. You need to enter the footnote number manually.\n\n\nCommon mistake. Beware of not confusing the syntaxes for Span (targets) and Links:\n\nA Span uses curly brackets: [span]{#id}\nLinks use parentheses: [link](#id)\n\n\nSyntax and placement of the target.\n\nThe target Span can be empty: []{#my-footnote}\nIt should be placed within the first line of the footnote, to ensure referencing links take the reader to that line.\nBut **do not* place an empty Span right at the beginning of the footnote: in this position, the Span leaves an unwanted blank space:\nBAD\n[^footnote]: []{#fn-point} On this difficult point \n\nGOOD\n[^footnote]: [On]{#fn-point} this difficult point \n\nGOOD\n[^footnote]: See @doe_j:2020.[]{#fn-doe}\n\n\nNon-final manuscripts. If footnote numbers are not final, you will need to update cross-references to footnotes. A good practice is to use very visible text to ensure that you don’t miss them in proofing:\nSee above footnote [NUMBER](#fn-doe).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-list-items",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#cross-referencing-list-items",
    "title": "23  Cross-referencing",
    "section": "23.4 Cross-referencing list items",
    "text": "23.4 Cross-referencing list items\nYou have a numbered list and you want to cross-reference one of its items:\n\n\nFirst item\n Second item\nThird item.\n\n\nMy favourite item is (2), what’s yours?\n\n\nThe solution is as with footnotes: you have to put an invisible link target in the item and you have to create a link to it. The number is manually entered in the link, not automatically, so you have to make sure you know which number it is.\n1. first item\n2. []{#myidentifier} section item\n3. third item.\n \nMy favour item is ([2](#myidentifier)), what's yours?\n\nNote the difference between the target, where the identifier is in curly braces, and the link, where the identifier is in parentheses:\ntarget: []{#myidentifier}\nlink: [2](#myidentifier)",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/21-cop-block-crossreferencing.html#internal-links",
    "href": "chapters/copyediting/21-cop-block-crossreferencing.html#internal-links",
    "title": "23  Cross-referencing",
    "section": "23.5 Internal links",
    "text": "23.5 Internal links\nIf you want a part of the text to link to another, say have a statement labeled “C1” and later parts referring to it as “(C1)”, use internal link syntax. The general syntax is:\n[text to be linked to]{#unique-identifier}\n\n...\n\n[text that will become a link](#unique-identifier)\n\nCommon error: leaving spaces between text and {\\#identifier}:\n\n\n\n\n\n\n\nBAD\nGOOD\n\n\n\n\n[text linked to] {#identifier}\n[linking text] (#identifier)\n[text linked to]{#identifier}\n[linking text](#identifier)\n\n\n\nExample:\n[Claim 1]{#my-claim}. Death is nothing to us.\n\n(... article goes on ...)\n\nAs [my earlier claim](#my-claim) established, ...\n\nThis outputs, in both HTML and LaTeX :\n\n\nClaim 1. Death is nothing to us\n…\nAs my earlier claim established, …\n\n\nDon’t worry about whether the link is coloured and/or underlined: that is to be decided by the journal style.\nNote that [text that will be linked] to and [text that will become a link] are printed as is. If you wanted to change all labels to “Claim 2”, for instance, you need to change both the text linked to and the text that becomes a link.\nTargets (also known as “anchors”) and links to them typically need some formatting. For instance, we may want our claim label in bold and the link to it to be the label itself in parentheses:\n[**C1**]{#my-new-claim}. Death is nothing to us.\n\n...\n\nAs ([C1](#my-new-claim)) established, ...\n\nThis outputs:\nC1. Death is nothing to us.\n…\nAs (C1) established, …\nA cleaner version for internal links may be achieved by putting the syntax\n[**C1**]{#my-new-claim}. Death is nothing to us.\n\n...\n\nAs [@my-new-claim] established, ...\n\ninstead, which in turn outputs the same as above:\nC1. Death is nothing to us.\n…\nAs (my-new-claim?) established, …\nbut with a clearer syntax in markdown.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Cross-referencing</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/23-cop-citations.html",
    "href": "chapters/copyediting/23-cop-citations.html",
    "title": "24  Citations",
    "section": "",
    "text": "24.1 Encoding citations\nThere are three styles of citations:\nHow normal citations are displayed is taken care of by the journal’s template. The illustrations below use the author-date style.\nTo code a citation of a given reference, you need to know the reference’s citation key. You can see the keys from the .bib file of your article. In RStudio, if you use the visual mode, use Insert &gt; citation and select the source “Bibliography”, and it will allow you to select entries from the .bib file.\nCommon errors:\nMore details explained in pandoc’s markdown reference, citations section.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Citations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/23-cop-citations.html#encoding-citations",
    "href": "chapters/copyediting/23-cop-citations.html#encoding-citations",
    "title": "24  Citations",
    "section": "",
    "text": "Normal: (Smith 2012) in author-date style, [7] in number style, footnote in citations-in-footnotes style.\nInline: Smith (2012) says that….\nYear-only: … that elephants are happier than humans (2012).\n\n\n\n\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nNormal\n\n\n\n(Smith, 2012)\n[@Smith2012]\n\n\n(Smith, 2012, 2015)\n[@Smith2012; @Smith2015]\n\n\n(Smith 2012; Jones 2015)\n[@Smith2012;@Jones2015]\n\n\n(Smith 2012, 205)\n[@Smith2012, 205]\n\n\n(Smith 2012, iv-vii)\nNote: when non-numerical page numbers specify p. in the code\n[@Smith2012, p. iv-viii]\n\n\n(see Smith 2012, 205)\n[see @Smith2012, 205]\n\n\n(Smith 2012, 205-210, 235)\n[@Smith2012, 205-210, 235]\n\n\n(Smith 2012, 28; Jones 2015, 2017)\n[@Smith2012, 28; @Jones2015; @Jones2017]\n\n\n(see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58)\nNote: whether you get ‘;’ or ‘,’ or ‘:’ separators between several citations should be specified and handled automatically by the template.\n[see @Smith2018, 28; comp.\n @Jones2015, 28; also\n @Jones2017, 45--48]\n\n\nInline\n\n\n\nSmith (2012) says that\n@Smith2012 says that\n\n\nSmith (2012, 205) says that\n@Smith2012 [205] says that\n\n\nSmith (2012, x-xii) says that\nSpecify p. when the page numbers are not numerical\n@Smith2012 [p. x-xii] says that\n\n\nInline several papers by same author, you format the first inline and the rest regular:\n\n\n\nSmith (2012; 2015, 205) says that\n@Smith2012 [@Smith2015, 205] says that\n\n\nPeregrin & Svoboda (2013, 2016, 2017, and also Read, 2018)\nSmith (2012, p. 33; 2015, p. 300)\nAlternatively, you can type the name and use year-only:\nSmith (2012; 2015)\n@peregrin-svoboda:2013a [@peregrin-svob oda:2016;@peregrin-svoboda:2017; and also @read_s:2000]\n@Smith2012 [p.33; @Smith2015, p.300]\nSmith [-@Smith2012, @Smith2015]\n\n\nYear only\nSmith makes an outrageous claim (2015, 277).\nSmith keeps repeating himself (2012, 2013, 2014, 2015).\nSmith said this in a few places (2012, 20; 2013, 30)\nSmith said (in his 2012 a.o.) that\nnote: (Smith2012?) doesn’t work, brackets are needed.\nSmith makes an outrageous claim [-@Smith2015, 277].\nSmith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015]\nSmith said this in a few places [-@Smith2012, 20; @Smith2013, 30].\nSmith said (in his Smith2012? a.o) that\n\n\n\n\n\n\n\n\n\n\n\nBad\nGood\n\n\n\n\nCode:\n(See for instance [@Smith2015]).\n(See for instance @Jones2018).\nOutput:\n(See for instance (Smith, 2015)).\n(See for instance Jones (2018)).\nCode:\n[See for instance, @Smith2015]\nOutput:\n(See for instance Smith, 2015).\n\n\nCode:\nSee f o r instance @Smith2012; @Smith2015.\nOutput:\nSee for instance Smith (2012); Smith (2015).\nCode:\nSee for insta n ce Smith [-@Smith2012; @Smith2015]\nOutput:\nSee for instance Smith (2012, 2015).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n24.1.1 Inline: why do I get “Doe (2012; Doe 2016)”?\nInline citations of multiple authors look like this: “See Doe (2012; Smith 2013)”. The code is see @Doe2012 [@Smith2016] as explained above.\nInline citations of multiple references by the same author, on the other hand, should look like this: “See Doe (2012; 2016)”, as explained above. The code is see @Doe2012 [@Doe2016].\nIf you get “see Doe (2012; Doe 2016)”:\n\nif Doe is author of one reference but editor of the other, this is normal. Leave it like that.\nif Doe is the author of both (or the editor of both), this is an error in your bibliography file: Doe’s name isn’t recognized as the same, probably because it’s entered differently on both references. Typically, this is because the first name is different (“Doe, J” vs “Doe, Jane”) or because of a extra initial (“Doe, Jane” vs “Doe, Jane E.”).\n\n\n\n24.1.2 Ibid., Op. Cit., sec. or § and the like\nAll the finer-grained formating is handled by the bibliography template. Whether repeated citations are printed out as “ibid”, “op. cit”, whether page ranges are referred to as “pp. 12-15” or “p. 12-15” or “12-15”, whether sections are called “sec.” or “§”, etc., all of this is decided and automatically handled by the bibliography template.\nIf an author uses ibid. or op. cit., just replace it with the original citation. For instance, if the author’s manuscript has:\n\n\nLewis (1986, 19) says something important. He adds something less interesting a few pages later (ibid., 29).\n\n\nWe encode:\n@Lewis1986 [19] says something important. He adds something less\ninteresting a few pages later [@Lewis1986, 29].\n\n\n24.1.3 Citing Notes, Footnotes, and Endnotes\nWe don’t distinguish between foot- and endnotes and only use note.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\n(Smith, 2012, n. 11)\n[@Smith2012, n.11] or [@Smith2012, note 11]\n\n\n\nFor how to cross-reference footnotes from the same article see Section 23.3.\n\n\n24.1.4 Conflicts of Cites with Other Commands\nIn some cases, cites are not rendered correctly in the output if they appear right next to another command (e.g., \\noindent, \\indent, or [^1]). In order to solve this proplem, we can use the HTML-command &zwnj; (‘zero-width-non-joiner’).\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\n(Smith, 2012, 11)1\n[@Smith2012, 11]&zwnj;[^1]\n\n\n(Smith, 2012, 11)\n\\noindent&zwnj;[@Smith2012, 11]\n\n\n  (Smith, 2012, 11)\n\\indent&zwnj;[@Smith2012, 11]\n\n\n\n\n\n24.1.5 Putting a citation link on a page number, or a word\nCitations must all be in one of the three forms above (Normal, Inline or Year-only). We cannot, and should not, put them on arbitrary words or page numbers. For instance, in the following:\n@Lewis1986 [19] says something important, but see also page 29.\n\nWe could either turn “page 29” in an inline or year-only citation, or leave it without link—provided there’s already a link to the work nearby, as is the case above.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Citations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/23-cop-citations.html#examples-with-preferred-answers",
    "href": "chapters/copyediting/23-cop-citations.html#examples-with-preferred-answers",
    "title": "24  Citations",
    "section": "24.2 Examples with preferred answers",
    "text": "24.2 Examples with preferred answers\n\n24.2.1 Example: Doe (2019, 2020)\nOriginal\n\n\nIt should be noted here that, on the face of it, Doe (2019, 2020) does introduce his theory to justify placing greater weight on oneself than on others in making decisions.\n\n\nProposed\n\n\nIt should be noted here that, on the face of it, Doe (2020, 2019) does introduce his theory to justify placing greater weight on oneself than on others in making decisions.\n\non the face of it, Doe [-@doe_j:2020; -@doe_j:2019] does introduce...\n\nPreferred\nUse the inline citation format.\n\n\nIt should be noted here that, on the face of it, Jane Doe (2020, 2019) does introduce his theory to justify placing greater weight on oneself than on others in making decisions.\n\non the face of it, @doe_j:2020 [@doe_j:2019] does introduce\n\n\n24.2.2 Example: locating the possessive “’s”\nOriginal\n\n\nOne example is Doe (2020)’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon.\n\n\nProposal\n\n\nOne example is Doe (2020)’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon.\n\nOne example is Doe\n[-@doe_j:2020]'s notion...\n\nPreferred\nInline citations are simpler and give a better output link (clickable name as well as year):\n\n\nOne example is Jane Doe (2020)’s notion…\n\nOne example is @doe_j:2020's notion...\n\nBut in the original, “Doe (2020)’s …” is bad typesetting. Better move the citation to the end of the sentence or attach the possessive to the author’s name:\n\n\nOne example is Doe’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon [doe_j:2020].\n\n“the” (preeminent) horizon [doe_j:2020]. \n\n\nOne example is Doe’s [-doe_j:2020] notion…\n\nOne example is Doe's [-doe_j:2020] notion...\n\nBoth are fine, my favoured option is the first.\n\n\n24.2.3 Example\nOriginal\n\n\nOthers have granted him as much (e.g., Jones (2017), and Jane Doe in the introduction to Smith (2018)).\n\n\nCopyedited\nWe would avoid the double parenthesis at the end. More generally, avoid parentheses when the references is in parentheses:\n\n\nOthers have granted him as much (e.g., Jones, 2017, and Jane Doe in the introduction to Smith, 2018).\n\n\nBut also, if we’re citing Jane Doe’s introduction to Smith (2018), we should have a bibliography entry for that chapter itself. So ultimately we want:\n\n\n(e.g., Jones, 2017, Doe 2018).\n\n\nProposed\nFirst attempt, use two inline citations. But it results in a double parenthesis:\n\n\nOthers have granted him as much (e.g., Jones (2019), and Jane Doe in the introduction to Smith (2018)).\n\nas much (e.g., @jones_j:2017, and Jane Doe in the introduction to @smith_j:2018).\n\nSecond attempt, make it a single parenthesis citation with two references, on the model (Jones 2019; Smith 2018) ([@jones_j:2017; @smith_j:2018]). But pandoc doesn’t see it as a citation and the phrase disappears:\n\n\nOthers have granted him as much Smith (2018).\n\nas much [e.g., @jones_j:2017, and Jane Doe in the introduction to @smith_j:2018].\n\nWhat is going on? The syntax of inline citation separates prefixes and suffixes with commas (,) or spaces and different references with semi-colons (;). So the general rule is: if you have two keys you should have a semi-colon. In the code above what pandoc sees is:\n[prefix, @citekey, verylongsuffix]\n\nwhere verylongsuffix is the code and Jane Doe in the introduction to @smith_j:2018. But a suffix cannot include citations. It can only be simple text (and passim or a famous passage) or locator type + location (chap. 2, pages 12-13) or location (12-13).\nTo avoid that, we must make “and Jane Doe in the introduction to” the prefix of the second citation, @smight_j:2018:\n\n\nOthers have granted him as much (e.g., Jones 2019; and Jane Doe in the introduction to Smith 2018).\n\nas much [e.g., @jones_j:2017; and Jane Doe in the introduction to @smith_j:2018].\n\nThis is seen by pandoc as:\n[prefix, @jones_j:2017; anotherprefix @smith_j:2018].\n\nRemark that we get ; rather than , in between the citations. Compare:\n\n\nOthers have granted him as much (e.g., Jones, 2017, and Jane Doe in the introduction to Smith, 2018).\n\n\n\nOthers have granted him as much (e.g., Jones, 2017; and Jane Doe in the introduction to Smith, 2018).\n\n\nSome might prefer the first. But this is a small cost and one could argue that the second is more systematic.\nPreferred\nThe preferred method is to cite Doe’s introduction to Smith (2018) as a reference in its own right:\n\n\nOthers have granted him as much (e.g., Jones 2019; John Doe 2018).\n\nas much [e.g., @jones_j:2017; @doe_j:2018].\n\nThis requires an adding to the entry in the bibliography. The entry is a book section authored by Doe is a book authored (not edited) by Smith. Entering it in Zotero and exporting as Bibtex gives us the code:\n@inbook{doe_j:2018,\n    author = {Doe, John},\n    title = {Introduction},\n    booktitle = {An imaginary book},\n    bookauthor = {Smith, John},\n    publisher = {Ideas Press},\n    address = {Mainville},\n    year = {2018}\n}\n\n\n24.2.4 Example: Citation in parenthesis with interfering syntax\nOriginal\n\n\nOthers have granted him as much (see, e.g., Jones (2017); I speak simply in terms of states of affairs, as for present purposes nothing hinges on this).\n\n\nIf we typeset it as usual, with square brackets, it will look like this:\nOthers have granted him as much [see, e.g., @jones_j:2017; I speak simply in terms of states of affairs, as for present purposes nothing hinges on this].\n\n\nOthers have granted him as much [see, e.g., Jones (2019); I speak simply in terms of states of affairs, as for present purposes nothing hinges on this].\n\n\nProposed\nThe semi-colon (;) separates different references. Since there isn’t a second reference, the whole reference isn’t recognised as a reference in parenthesis. To avoid this, we can replace the semi-colon for an em-dash, if the context allows for that. Otherwise, we need to reformulate the text.\n\n\nOthers have granted him as much (see, e.g., Jones 2019—I speak simply in terms of states of affairs, as for present purposes nothing hinges on this).\n\n\n\n\n\nDoe, Jane. 2019. “Another Imaginary Article.” Review of Ideas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\n———. 2020. “An Imaginary Article.” Review of Ideas 10: 13–27. https://doi.org/10.0000/123456789.\n\n\nDoe, John. 2018. “Introduction.” In An Imaginary Book, by John Smith. Mainville: Ideas Press.\n\n\nJones, Jane. 2019. “Yet Another Imaginary Article.” Review of Ideas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\nSmith, John. 2018. An Imaginary Book. Mainville: Ideas Press.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Citations</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html",
    "href": "chapters/copyediting/24-cop-bibliography.html",
    "title": "25  Bibliography",
    "section": "",
    "text": "25.1 Multiple bibliography files\nYou should get or create a bibliography file containing the references cited in your manuscript. This could be a BibTeX file (.bib) or a CSL json file (usually .json). You need to:\ndialectica. We use BibTeX files. The “bibliography file” below refers to a .bib file in your article’s folder.\nIn your article’s metadata block, enter the name of your bibliography file:\nDo not leave the bibliography field empty, or you will get a Pandoc error File  not found in resource path.\nYou can have multiple bibliography files:",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#multiple-bibliography-files",
    "href": "chapters/copyediting/24-cop-bibliography.html#multiple-bibliography-files",
    "title": "25  Bibliography",
    "section": "",
    "text": "bibliography:\n- references1.bib\n- references2.bib",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#self-citing-bibliography",
    "href": "chapters/copyediting/24-cop-bibliography.html#self-citing-bibliography",
    "title": "25  Bibliography",
    "section": "25.2 Self-citing bibliography",
    "text": "25.2 Self-citing bibliography\nA BibTeX bibliography file may ‘self-cite’, that is, have entries that cite other entries. Citations of other entries may appear in the note, crossref or even title field, for instance.\nIf self-cited entries are missing from the BibTeX file, you will get “Citation not found” error, or you will get garbage text like Smith_2008:c? or wrong formatting like “(reprinted in (Smith 2008))” in the bibliography printed out in output formats.\nThere’s more detail on self-citing bibliographies below.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#get-or-create-a-bibtex-file",
    "href": "chapters/copyediting/24-cop-bibliography.html#get-or-create-a-bibtex-file",
    "title": "25  Bibliography",
    "section": "25.3 Get or create a BibTeX file",
    "text": "25.3 Get or create a BibTeX file\n\n25.3.1 Using Zotero\nCreate a new (sub)collection in your Zotero Library for the article. Add the article references to it.\nZotero creates citation keys automatically. If you need to manually change them to whichever ones you’re using in the manuscript, see below.\nLeft-click the collection and chose “Export collection”. Export it as BibTeX (.bib) file to the article’s folder.\n\n\n25.3.2 Manually set citation keys in Zotero\nSelect a bibliography item. Its metadata is displayed on the right tab. Find the ‘Extra’ field at the bottom. Edit it to add a new line to whatever it may already contain:\nCitation Key: Doe1995-Article-Title\n\nThis changes the item’s citation key. Don’t forget the caps (“Citation Key” not “citation key” nor “citationkey”), and make sure this occupies a single line of the “Extra” field.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#sec-adding-non-cited-references-in-the-bibliography",
    "href": "chapters/copyediting/24-cop-bibliography.html#sec-adding-non-cited-references-in-the-bibliography",
    "title": "25  Bibliography",
    "section": "25.4 Adding non-cited references in the bibliography",
    "text": "25.4 Adding non-cited references in the bibliography\nIn the metadata block, add a line:\nnocite: |\n  @bibtexentry1, @bibtexentry2, @bibtexentry3\n\nIf you have lots of those, best use a tool to extract the keys automatically from a bibtex file.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#inserting-citations-in-the-text-in-rstudio",
    "href": "chapters/copyediting/24-cop-bibliography.html#inserting-citations-in-the-text-in-rstudio",
    "title": "25  Bibliography",
    "section": "25.5 Inserting Citations in the text in RStudio",
    "text": "25.5 Inserting Citations in the text in RStudio\nRequires: RStudio visual editor mode.\nIn visual mode, Insert &gt; @ Citation. It opens a popup window; on its left menu, choose bibliography. Click the plus sign on the right of each citation, then press the insert button.\nMissing references: Go to @ Citations. On the left menu of the pop-up window, choose CrossRef. (See image below). Type the author and the name of the paper in the search bar; that should find the paper. Click on the plus sign on the right of the entry, then press insert button which will add the reference to the bibliography file.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#formatting-citations-in-the-text",
    "href": "chapters/copyediting/24-cop-bibliography.html#formatting-citations-in-the-text",
    "title": "25  Bibliography",
    "section": "25.6 Formatting citations in the text",
    "text": "25.6 Formatting citations in the text\nThere are various formats of citations:\n\nIn several recent papers, this has all been shown wrong (Castor &gt; 2018; Pollux 2020).\nAs Castor (2020: 127) shows, this is all wrong.\n\n\nTo get these various formats you need to modify the markdown code for citations. For instructions refer to the Markdown guide above (cheatsheet or section on citations).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-guidelines",
    "href": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-guidelines",
    "title": "25  Bibliography",
    "section": "25.7 BibTeX file guidelines",
    "text": "25.7 BibTeX file guidelines\nThis only applies to BibTeX (.bib) files. If you’re using CSL Json files, you are probably generating them from Zotero or some other bibliography manager instead.\n\n25.7.1 Edit BibTeX files\nSeveral methods:\n\nEdit the .bib file directly in a text editor (e.g. RStudio). Either:\n\n\nfix manually what is wrong with the entry.\ndelete the entry, search and add it again with the same method as when you miss a reference (see below).\n\n\nUse a BibTeX editor (BibDesk, comes with TeXshop on Macos, or JabRef).\nUse a bibliography manager like Zotero that imports / exports BibTeX files. Beware: Zotero and others convert the .bib file into their own formats on import. This means that you may lose of your bib file’s features: with Zotero, \\cite commands (that a BibTeX file may use to cite some entries in other entries) are lost.\n\n\n\n25.7.2 Check BibTeX file formatting\nYou can use biber (LaTeX’s bibliography generator) to check a BibTeX file for errors. Run on the terminal:\nbiber --tool references.bib\n\nThis prints out a report on any problem in the file. It also creates a cleaned-up version of the file, as references_bibtools.bib.\n\n\n25.7.3 BibTeX field names aren’t case-sensitive\nBibTeX field names are not case-sensitive: they can be named “author”, or “Author”, or “AUTHOR”.\n@inbook{Jakobson:1980,\n  Author = {Jakobson, Roman},\n  Title = {Metalanguage as a Linguistic Problem}\n}\n\nIs the same as:\n@inbook{Jakobson:1980,\n  author = {Jakobson, Roman},\n  TITLE = {Metalanguage as a Linguistic Problem}\n}\n\n\n25.7.4 Title capitalization\nTraditionally, in English bibliographies titles in English are typeset in title case (“An Article with Results”) but titles in other languages are typeset in sentence case (“An article with results”). In German or French bibliographies, all titles (including those of works in English) are in sentence case.1\nThe appearance is controlled by our bibliography template. For this to work entries in the the BibTeX file must:\n\nHave a langid field specifying the entry’s language as an IETF language tag: en, en-US, de, etc.2 Though (at least some) full names like english or french will work too. If there is no\nlangid field for a given BibTeX entry, the entry is assumed to be in the language of the document (as specified in the document’s metadata, lang field).\nHave titles in sentence case, that is, where only names and words that need to be capitalized no matter what are in upper case. For instance, “The philosophy of logical atomism” or “Der Wahrheitsbegriff in den formalisierten Sprachen”.\n\n\nIf an entry uses title case (“Rezension der Schrift von…”), the capitals will be assumed to be mandatory and will be printed even when it should be in sentence case. Thus if you know that your bibliography entries in English will always be printed in title case (i.e., your publication is in English and you’re sure it won’t adopt the APA sentence case convention), then it’s harmless to use title case in the BibTeX file itself. But when in doubt sentence case + langid field is the safe option.\nFor an illustration:\n@article{Tarski1936,\n    author = {Alfred Tarski},\n    title = {Der Wahrheitsbegriff in den formalisierten Sprachen},\n    journal = {Studia Philosophica},\n    volume = {1},\n    pages = {261--405},\n    year = {1936},\n    langid = {de},\n}\n@article{Russell1905,\n    author = {Bertrand Russell},\n    title = {On denoting},\n    journal = {Mind},\n    volume = {14},\n    number = {56},\n    pages = {479--493},\n    year = {1905},\n  langid = {en},\n}\n\nFor more detail:\n\nthe langid field is a biblatex field name. It is recognized by Pandoc’s citeproc (Pandoc’s internal citation processor) for use in a association with a CSL style file.\nThere is a language field in BibTeX files too. But it is not meant to affect an entry’s format; rather, it is used for entries to explicitly state its language](ttps://tex.stackexchange.com/questions/323441/how-does-langid-field-in-biblatex-differ-from-language-field) affect the formal of the bibliography.\n\n\n\n25.7.5 Original year of publication\nIf the author isn’t using the original edition of a book, e.g. citing from a 2010 edition of Locke’s 1689 essay, add a field origdate in the bibtex entry. (will not show up in the PDF at the moment, but our final template will do it). Ex:\n@inbook{Jakobson:1980,\n  Author = {Jakobson, Roman},\n  Booktitle = {The Framework of Language},\n  Location = {Ann Arbor},\n  Year = {1980}\n  Origdate = {1956},\n  Pages = {81\\--92},\n  Publisher = {University of Michigan Press},\n  Shorttitle = {Metalanguage as a Linguistic Problem},\n  Title = {Metalanguage as a Linguistic Problem}\n}\n\nSee biblatex documentation, §2.2.2 on data fields.\n\n\n25.7.6 BibTeX conventions and resources\nThere are two BibTeX standards that can be used:\n\nBibTeX\nBibLaTeX\n\n\nThe two conventions overlap a lot (most of the field names are common). The BibLaTeX conventions are more recent and complete. The BibTeX ones are widely used, and almost entirely compatible with BibLaTeX. Each corresponds to a LaTeX bibliography processor (bibtex and biber, respectively). Both are understood by Pandoc’s bibliography processor, citeproc.\nWhere to find references on these BibTeX standards?\n\nBibTeX. The BibTeX original documentation (1988), Paperpile’s BibTeX guide.\nBibLaTeX. The BibLaTeX official documentation and the BibLaTeX cheatsheet.\n\n\nNote: if you have a full LaTeX installation on your computer you will have access to some of these documents from your terminal using the texdoc command. Try the commands:\ntexdoc biblatex\n\ntexdoc biblatex-cheatsheet\n\ntexdoc bibtex\n\nDialectica guideline. We use the biblatex conventions.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-special-entry-types",
    "href": "chapters/copyediting/24-cop-bibliography.html#bibtex-file-special-entry-types",
    "title": "25  Bibliography",
    "section": "25.8 BibTeX file special entry types",
    "text": "25.8 BibTeX file special entry types\n\n25.8.1 Unpublished manuscript\nChoose the type unpublished. Add a note field:\n  note = {unpublished manuscript}\n\nAdd a URL if available.\nDialectica guideline. We require a URL. If the author cannot provide a URL, we do not create a bibliography entry at all but only describe the source in a footnote (“in an unpublished manuscript titled”XXX”).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#make-sure-any-self-cited-entries-are-included-and-printed",
    "href": "chapters/copyediting/24-cop-bibliography.html#make-sure-any-self-cited-entries-are-included-and-printed",
    "title": "25  Bibliography",
    "section": "25.9 Make sure any self-cited entries are included and printed",
    "text": "25.9 Make sure any self-cited entries are included and printed\nYour bibliography file may be ‘self-citing’, that is it may include some entries that cite other entries. For instance, a bibliography entry may have the title “Review of \\citet{Smith_h:2005}”, where the latter is LaTeX code to cite the entry with key Smith_h:2005. If your bibliography file might have such entries you need to do two things:\n\nMake sure that for all the self-cited keys, there is an entry in the file.\nMake sure that the self-cited keys are printed out in the final bibliography.\n\n\nIf somebody else is taking care of your bibliography file, you only have to do the second. If in addition you’re sure that your bibliography file does not include unnecessary entries, you have a simple way of dealing with (2) by adding the nocite: @* line in your metadata. See below.\n\n25.9.1 Check that the BibTeX file includes all self-cited entries\nRequires: Dialectica’s selfcites.py script. Using the terminal.\nThe problem. If a bibliography file self-cites some keys, but doesn’t include an entry for these keys, you will get “Missing reference” warnings and your bibliography will be incomplete. You need to ensure that there’s an entry for any self-cited key.\nSolution. Run the selfcites.py script on your bibliography file. Suppose your article’s bibliography file is named myreferences.bib. Open a terminal, navigate to the article folder and run:\npython3 ../../../resources/scripts/selfcites.py myreferences.bib\n\nMore generally, you can run that script from anywhere on a bib file that is anywhere:\npython3 path/to//selfcites.py path/to/myreferences.bib\n\nThe script will check the .bib file for self-citations and output a report in the terminal such as:\nDialectica open access initative self-citing bibliography file check, (c) Thomas Hodgson 2021\nI found these self cited keys:\n quine:1951e, loux:1970, lewis_dk:2001c, vaninwagen:2001, quine:1953, lewis_dk:1983\nThese self cited keys are missing from the file's entries:\n quine:1951e\nloux:1970\nlewis_dk:2001c\nvaninwagen:2001\nquine:1953\nlewis_dk:1983\nFor information, these are all the entries I found:\n horgan_te-potrc:2008, brenner_and:2017a, zimmerman_dw:2008, kleinschmidt_s:2014, sider_t:2013, rettler:2016, vaninwagen:1998d, cameron_rp:2012, lewis_dk:1973, cowling_s:2013b, finocchiaro_p:2019:, burgess_jp-rosen:1997, mcsweeney:2019, willard_mb:2014, bennett_k:2009, nolan_dp:1997b, tallant:2013a, schaffer_j:2015a, prior_an-fine:1977, turner_j:2015, churchland_pm:1984, finocchiaro_p:2021:, melia:2008a, quine:1948, torza:2015, schaffer_j:2009d, lewis_dk-lewis:1970, bennett_k-zimmerman:2013, linnebo-nicolas:2008, lewis_dk:1986, parsons_j:2014, chalmers_dj-etal:2009, sober:2015, sider_t:2011, merricks:2001, keller_ja:2017, finocchiaro_p:2019b:, mckay_tj:2006, paul_la:2017a\n\nIf there are keys below “These self cited keys are missing from the file’s entries:”, then your .bib file cites these keys but they are missing. You need to add them.\nThe line below “I found these self cited keys:” can be used to ensure the self-cited entries are printed in the article bibliography. See below.\n\n\n25.9.2 Make sure all the self-cited entries are printed out\nThe problem. If bibliography file self-cites some entries, but the manuscript itself doesn’t cite them, these entries will not be printed in the bibliography.\nThe solution. The self-cited entries must be added in the document’s metadata, in a nocite field. There are two ways to do so:\n\nif you’re sure that your .bib file only contains entries that need to be printed out (no extra entries), then you can use the simple option 1.\notherwise, use option 2, which requires a script.\n\n\nOption 1. If you are sure that your .bib file only contains entries that need to be printed out in the bibliography\nRequires: the selfcites.py script. See above.\nOpen the .bib file in a text editor. Search for \\cite. If you have no no results, then your .bib file doesn’t include self-citations and you are good to go. If you do find results, you will have bibliography entries in the file that look like this, for instance:\n@book{geach_pt:1962,\n  address =       {Ithaca, New York},\n  author =        {Geach, Peter Thomas},\n  note =          {third edition: \\citet{geach_pt:1980}},\n  publisher =     {Cornell University Press},\n  title =         {Reference and Generality, an examination of some\n                   medieval and modern theories},\n  year =          {1962},\n}\n\nIn the note = line here, you see the code \\citet{geach_pt:1980}. This is a LaTeX command that cites another bibliography entry in the same file, namely the one with the key geach_pt:1980. Ultimately this will be printed out in the bibliography as:\n\n\nGeach, Peter Thomas (1962) Reference and Generality, an Examination of Some Medieval and Modern Theories, Ithaca, New York: Cornell University Press. Thrid edition: Geach (1980).\n…\nGeach, Peter Thomas (1980) Reference and Generality, …\n\n\nThe LaTeX \\cite commands can start with \\cite, \\citet, \\citep; you will find all of these by searching \\cite in the file. Sometimes the command cites pages numbers and looks like this instead:\n  note =          {reprinted in \\citet[232--258]{mccall_s:1967}, with\n                   considerable change in notation},\n\nIn that case the cited entry’s key is still the thing between curly brackets, here mccall_s:1967.\nNow you need to make sure that the self-cited entries appear in the bibliography. The problem is that if it is only cited in the bibligraphy and not the paper itself, it will not automatically be included. To ensure that it is included, you need to add the key in your document metadata, in a nocite field:\ntitle: A Neat Paper\nauthor: Smith, John\nbibliography: smith.bib\nnocite: |\n  geach_pt:1980, mccall_s:1967\n\nThe nocite: | should appear on one line, the entries on one or several lines below but each of those lines must start with at least two spaces, and the entries should be separated by commas.\nYou need not check whether the entries are actually cited in the paper or not: just add them to the nocite metadata, it will not hurt if they are also cited.\nContinue searching for \\cite commands in your .bib file and make sure all the keys are entered in your document’s nocite metadata section.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#troubleshooting-and-examples",
    "href": "chapters/copyediting/24-cop-bibliography.html#troubleshooting-and-examples",
    "title": "25  Bibliography",
    "section": "25.10 Troubleshooting and examples",
    "text": "25.10 Troubleshooting and examples\n\n25.10.1 Error message: Unexpected end of file\nThe following message indicates an error with the BibTeX file:\nError at \"percent.bib\" (line 9, column 1):\nunexpected end of input\n\n\n25.10.2 Percent signs in DOI field\nAt the moment % signs in DOI fields generate an error.\nIf you copied/pasted DOIs in your BibTeX file, symbols in them may end up ‘percent-encoded’, e.g. “%2F” instead of “/”. For instance, the DOI “10.1007/15.12345” copied from the web may end up being pasted as “10.1007%2F15.12345”.\nThese DOIs crash Pandoc version 3.0.1 and lower, but the bug will be fixed in future releases.\n\n\n25.10.3 Error message: \\citet unknown command\nRequires: script or filter that manages recursive bibliography management .\nPandoc encounters a LaTeX citation command (\\citet or the like). Unless you or the author has written one in the text, it is in the .bib file.3\nSolution 1. In Dialectica, LaTeX citation commands in the .bib file are processed. This is achieved by a script that runs pandoc on the document twice, first to generate a json that includes the biblio, second to generate the final output (at which state the latex commands in the biblio are processed). The first run is --to json and the second with -M suppress-bibliography. Suggested by John MacFarlane on pandoc-discuss.\nSolution 1. Replace the offending \\citet command(s) in your .bib file. To find it or them:\n\nprocess the markdown with .tex output.\nsearch \\citet in the tex output. you should see which bib entry it is in.\ngo to the .bib file and replace the \\citet{jones_a:2020} in that entry with e.g. Jones (2020), and in the md, enter the citation key as no-cite (see above)\n\n\nSolution 2. Implement a double-pass generation procedure. This is the publisher’s job.\n\nWe have now figured out a method to process those command. However, we’ll need to update the document-generation procedure to implement it. Either wait for it, or use solution 1.\nin a field of your .bib file is printed out. It needs to be replaced. To find it:\n\nprocess the markdown with .tex output.\nsearch \\citet in the tex output. you should see which bib entry it is in.\ngo to the .bib file and replace the \\citet{jones_a:2020} in that entry with e.g. Jones (2020), and in the md, enter the citation key as no-cite (see above)\n\n\nExplanation. Pandoc doesn’t process it (at least, not if the field is “title”, and perhaps not in general), leaves the \\citet command. At the LaTeX stage it’s not recognized by LaTeX (because we don’t load natbib).\n\n\n\n25.10.4 From Frege to gödel\nMystery. The cross ref below is printed out as “From Frege to gödel:” by citeproc, no matter (a) whether we write Gödel or G{\\¨o}del, (b) no matter the position, i.e. we get “From gödel to Frege”. The solution is put G in curly brackets. But why???\n\\@incollection{frege:1967a,\n  Author = {Frege, Gottlob},\n  Crossref = {vanheijenoort:1967},\n  Note = {translated by Stephan Bauer-Mengelberg},\n  Num_Sort = {40337},\n  Pages = {1\\--82},\n  Title = {Begriffsschrift: A Formula Language Modeled on that of\n  Arithmetic, for Pure Thought},\n  Year = {1967}\n}\n\n\\@book{vanheijenoort:1967,\n  editor = {van Heijenoort, Jan},\n  year = {1967},\n  title = {From Frege to G{\\\"o}del: A Source Book in Mathematical Logic\n  1879-1931},\n  booktitle = {From Frege to {G}ödel: A Source Book in Mathematical Logic\n  1879-1931},\n  address = {Cambridge, Massachusetts},publisher = {Harvard University\n  Press}\n}\n\nBeginning of an answer: case is protected if a subpart of the word is bracketed. A dog called {Pizza} will be overriding by the style (and thus printed “A pizza” if the style calls for it) but A dog called {P}izza is protected.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/24-cop-bibliography.html#footnotes",
    "href": "chapters/copyediting/24-cop-bibliography.html#footnotes",
    "title": "25  Bibliography",
    "section": "",
    "text": "The Chicago manual recommends title case for English titles; the APA manual recommends sentence case for all titles.↩︎\nThe polyglossia package documentation has a useful list of tags. If you have a full LaTeX installation you can also get it from the terminal by running the command texdoc polyglossia.↩︎\nExplanation. By default Pandoc doesn’t process the \\citet command in a bib file (at least, not if the field is “title”, and perhaps not in general), leaves the \\citet command. At the LaTeX stage it’s not recognized by LaTeX (because we don’t load natbib).↩︎",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html",
    "href": "chapters/copyediting/241-cop-math-latex.html",
    "title": "26  Math and LaTeX elements",
    "section": "",
    "text": "26.1 Math and logic conventions\nThis chapter focuses on formulas, maths and other LaTeX elements.\nThese are decided by your house style.\nDialectica guidelines.\nResources: many websites allow you to search for HTML entites code.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#math-and-logic-conventions",
    "href": "chapters/copyediting/241-cop-math-latex.html#math-and-logic-conventions",
    "title": "26  Math and LaTeX elements",
    "section": "",
    "text": "Propositional connectives: \\lnot (\\(\\lnot\\)) rather than \\sim (\\~). (those who prefer the latter should note that \\sim doesn’t have operator spacing in LaTeX, better redefine \\lnot to print ~ with math operator spacing.)",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#formulas",
    "href": "chapters/copyediting/241-cop-math-latex.html#formulas",
    "title": "26  Math and LaTeX elements",
    "section": "26.2 Formulas",
    "text": "26.2 Formulas\n\n26.2.1 Basics\nIf the author’s manuscript includes formulas, make sure they are in MS Word / Google Docs Equation mode before converting to markdown. pandoc will then convert them in LaTeX formulas, which will greatly simplify your work.\nAn “inline” formula, that is a formula within the flow of the text, is delimited by $ signs. For instance, this:\n\n\nThe principle of non-contradition, \\(\\lnot (\\phi \\land \\lnot \\phi)\\) is Leibniz’s…\n\n\nis coded:\nThe principle of non-contradition, $\\lnot (\\phi \\land \\lnot \\phi)$ is\nLeibniz's...\n\nA “display” formula, one that occupies more than one line, is delimited by $$ signs. For instance, this:\n\n\nLeibniz’s law, \\[\\forall x \\forall y (x=y \\rightarrow \\forall X\n(Xx \\leftrightarrow Xy))\\] is …\n\n\nis coded:\nLeibniz's law, $$\\forall x \\forall y (x=y \\rightarrow \\forall X \n(Xx \\leftrightarrow Xy))$$ is ... \n\nDisplay formulas are ‘block’ elements. For more or them, in particular, numbering them, see the Equations.\nDo not leave a space after the opening $ or before the closing one, otherwise markdown thinks they are ordinary dollar signs.\n\nGOOD: $\\forall x (Fx \\rightarrow Gx)$\nBAD: $ \\forall x (Fx \\rightarrow Gx) $\n\n\nCan pandoc confuse ordinary dollar signs and formula delimiters? Normally not. In the following:\n\nAmounts of $20,000 and $30,000 are...\n\n\nPandoc will not think that $20,000 and $ is a formula, because the last $ is preceded by a space. If, however, for some reason you need to typeset something like:\n\nAmounts of $20,000 and 0.00$ are...\n\n\nwhere Pandoc will turn into a formula, “escape” the dollar signs:\nAmounts of \\$20,000 and 0.00\\$ are...\n\n\nAmounts of $20,000 and 0.00$ are…\n\n\n\n26.2.2 Good practices\nDo not break up a formula apart into its individual symbols. For instance, this:\n\n\nThe formulas \\(\\exists x(Fx \\rightarrow Gx)\\), \\(\\forall x\\neg\\text{Gx}\\) are quantified formulas.\n\n\nShould be entered in markdown as:\nThe formulas $\\exists x(Fx \\rightarrow Gx)$, $\\forall x\\neg\\text{Gx}$\nare quantified formulas.\n\nNot as:\nThe formulas $\\exists$ x (Fx $\\rightarrow$ Gx), $\\forall$ x$\\neg$Gx\nare quantified formulas.\n\nDo not enter a list of formulas as a single formula (with exceptions). Merging two formulas into one prevents linbreaks between them in the output:\n\nGOOD: $\\exists x (Fx \\rightarrow Gx)$, $\\forall x \\lnot Gx$.\nBAD: $\\exists x (Fx \\rightarrow Gx), \\forall x \\lnot Gx$.\n\n\nException: if you have lists of small items as in \\(p_1, p_2, \\ldots , p_n\\), no need to split those into many equations:\n\nGOOD: $p_1, p_2, \\ldots, p_n$1\nALSO GOOD: $p_1$, $p_2$, ..., $p_n$.\n\n\nAnother exception, list of premises in a formula stating that they entail a conclusion:\n\n\n\\(A, B, \\vDash C\\)\n\n\nGOOD: $A, B, \\vDash C$\nBAD: $A$, $B$, $vDash C$\n\n\nThe latter might look right but it is not accurate in e.g. a machine-readable JATS XML export, as the whole line here should be treated as a single claim (that \\(A\\),\\(B\\) entail \\(C\\)), not three claims (\\(A\\), \\(B\\) and \\(\\vDash C\\)).\nElements of formulas repeated in the text are entered as formulas too. For instance this:\n\n\nIn the formula \\(\\exists xFx\\) the variable \\(x\\) is bound.\n\n\nis coded thus:\n\nGOOD: In the formula $\\exists xFx$ the variable $x$ is...\nBAD: In the formula $\\exists xFx$ the variable x is...\nBAD: In the formula $\\exists xFx$ the variable *x* is...\n\n\nNote that *x* is not in formula mode and not a suitable replacement for $x$ here. While both would be displayed in italics, their meaning is different (on indicates emphasis, the other indicates an element of a formula) and they are subtle differences in typesetting (different font and spacing for formulas). Similarly:\n\n\nIf a subject \\(S\\) has property \\(P\\)\n\n\nGOOD: If a subject $S$ has property $P$...\nBAD: If a subject S has property P...\nBAD: If a subject *S* has property *P*...\nBAD: If a subject **S** has property **P**...\n\n\nOrdinary text within formulas. Some authors put ordinary text within formulas:\n\\(\\exists\\Phi(\\textrm{All }\\Phi\\textrm{ one})\\)\nYou should put that text within the formula LaTeX code, using \\textrm{...} for normal text, and \\textit{...} for italic, \\textbf{...} for bold, \\texttt{...} for code.\n\nBAD: ($\\exists\\Phi$)(All $\\Phi$ One)\nGOOD: $(\\exists\\Phi)(\\textrm{All} \\Phi \\textrm{One})$\n\n\nThis makes more sense (the first is one formula, the second is two mixed with the text) and the spacing will be better.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#schematic-letters-in-the-text",
    "href": "chapters/copyediting/241-cop-math-latex.html#schematic-letters-in-the-text",
    "title": "26  Math and LaTeX elements",
    "section": "26.3 Schematic letters in the text",
    "text": "26.3 Schematic letters in the text\nSchematic letters in the main text should normally be typeset as formulas:\n\n\n\nI want\nI type\n\n\n\n\n\\(S\\) knows that \\(p\\)\n$S$ knows that $p$\n\n\n\\(n\\)-ary predicate\n$n$-ary predicate\n\n\n\\(F\\)-ness\n$F$-ness\n\n\n\\(\\mathrm{F}\\)-ness\n$\\mathrm{F}$-ness\n\n\n\nThis does not apply to acronyms, e.g. “PP” for the Precautionary Principle.\nRemark. If there are few, e.g \\(S\\), \\(p\\), and they don’t appear in formulas proper such as \\(K_Sp\\), then it can be tolerated to enter them as is (S) or with emphasis to obtain italics (*p*). We advise against this because *...* indicates emphasis and not a symbol or italics. For instance, if the markdown source is later fed into text-to-speech software the read out will wrongly stress *p* wherever it’s used.\nSome mathematic texts use upright uppercase letters and lowercase italicized letters.2 To get upright letters with math mode use the \\mathrm{...} LaTeX command. All letters within {...} will be typset as upright serif letters (“roman” is another name for serif):\n\n\n\nI want\nI type\n\n\n\n\n\\(\\mathrm{MA}p\\)\n$\\mathrm{MA}p$\n\n\n\\(\\mathrm{M}Ap\\)\n\\mathrm{M}Ap\n\n\n\\(\\mathrm{A+B}\\)\n\\mathrm{A+B}\n\n\n\nIf the predicates are referred to in the text around, I would make sure there are in dollar signs too:\n\n\nPredicate \\(F\\) is unary, predicate \\(G\\) binary.\n\n\nGOOD Predicate $F$ is unary, predicate $G$ binary.\nNOT ADVISED Predicate F is unary, predicate G binary.\nNOT ADVISED Predicate *F* is unary, predicate *G* binary.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#sec-cop-math-latex-split-fractions",
    "href": "chapters/copyediting/241-cop-math-latex.html#sec-cop-math-latex-split-fractions",
    "title": "26  Math and LaTeX elements",
    "section": "26.4 Split fractions",
    "text": "26.4 Split fractions\nFractions like 2/3, 1/2, can (and are often better) be printed out as split fractions, with the first number slightly up and left and the lower slightly down and right.\nSolution 1. Fraction ½. This can be printed in both HTML and LaTeX output with the HTML entity code &frac12;. However, the HTML entites cannot be used in LaTeX so you need to break down any formula including it, which is potentiall bad for output (allows an unwanted linebreak, for instance).\nThe glass is &frac12; empty.\n\n$x =$&frac12;$+ 1$. \n\n\nThe glass is ½ empty.\n\\(x =\\)½\\(+ 1\\).\n\n\nSolution 2. LaTeX package + imagify. Use the xfrac LaTeX package by adding the following to the header-includes metadata field:3\nheader-includes: |\n  ~~~ {=latex}\n  \\usepackage{xfrac}\n  ~~~\n\nand enter the fractions in formulas like so:\n$\\sfrac{2}{3}$\n\nDownside: these are not handled by MathJAX in HTML output, so they have to be converted to images by your template Chapter 27.\nFuture solution? (fails with MathJAX 3). Use xfrac as above but add a custom extension to MathJaX instead of imagifying. See this page for a MathJaX 2 example. This doesn’t seem to work in MathJAX 3 (perhaps because we can’t have the “unpacked” version from the CDN). With a working extension the idea would be to add the conde:\nheader-includes:\n  ~~~ {=latex}\n  \\usepackage{xfrac}\n  ~~~\n  ~~~ {=html}\n  &lt;script type=\"text/x-mathjax-config\"&gt;\n  MathJax.Hub.Register.StartupHook(\"TeX Jax Ready\",function () {\n   ... extension code\n  });\n  &lt;/script&gt;  \n  ~~~\n\nWarning though: if using OJS’s inline HTML the script should be in the body rather than header.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#equations",
    "href": "chapters/copyediting/241-cop-math-latex.html#equations",
    "title": "26  Math and LaTeX elements",
    "section": "26.5 Equations",
    "text": "26.5 Equations\nFor the basics of formulas, see Formulas.\n\n26.5.1 Numbered equations\nRequires: pandoc-crossref filter.\nDisplay formulas can be numbered by assigning them an identifier:\n$$E = mc^2$$ {#eq:my-label}\n\nHere the identifier is eq:my-label. It must start with eq:. It can then be used for crossreferences:\nAs shown by @my-label, ...\n\nThe syntax for crossreferences is like that of citations, but it can also automatically add a prefix like ‘Eq.’ or ‘Eqs.’. See the pandoc-crossref documentation.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#theorems-and-proofs",
    "href": "chapters/copyediting/241-cop-math-latex.html#theorems-and-proofs",
    "title": "26  Math and LaTeX elements",
    "section": "26.6 Theorems and proofs",
    "text": "26.6 Theorems and proofs\nRequires: the statement.lua filter.\nWe format them as “fenced Div blocks”, i.e. blocks separated by three or more colons (the closing fence must have as many as the opening one). The fenced Div must have a class from one of the default theorem types like theorem (or thm), proposition (or prop), lemma (or lem), definition (or defn), remark (or rmk), etc.\n::: theorem\nContent of the theorem\n\nSecond paragraph of the same theorem.\n:::\n\nAn theorem can have an id for cross-reference. If you add an ID don’t forget the curly brackets and point before theorem:\n::: {.theorem #theorem}\nContent of the theorem\n:::\n\nTheorems can also have a source, or some info. The source is a citation right at the beginning of the theorem:\n::: theorem\n@jones1990 Content of the theorem\n:::\n\nInfo is some text between brackets at the beginning of the theorem. The text can itself contain brackets, provided they’re properly balanced:\n::: theorem\n(negative (or positive) values) Content of the theorem\n:::\n\nProofs:\n::: proof\nObvious from theorem @mytheorem.\n:::\n\n26.6.1 No theorems in footnotes\nStatements don’t works in footnote for LaTeX/PDFoutput. That’s a limitation imposed by the LaTeX amsthm package we rely on. It’s a sensible limitation: countless maths books are published with this package and not a single one of them needs theorems in footnotes.\nIndented blocks (plain statements) may appear in footnote. If so use a custom labelled list with empty labels.\n\n\n26.6.2 More theorem options\nThe Statement filter has many more options. Check its manual (in progress as of April 2023)\nStatement filter manual",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#natural-deduction-proofs-with-bussproofs",
    "href": "chapters/copyediting/241-cop-math-latex.html#natural-deduction-proofs-with-bussproofs",
    "title": "26  Math and LaTeX elements",
    "section": "26.7 Natural deduction proofs with bussproofs",
    "text": "26.7 Natural deduction proofs with bussproofs\nIf an article uses the LaTeX bussproofs package, the following guidelines will allow them to be displayed directly in HTML when using the Mathjax option.4\nBussproofs can be either inline, ending with \\DisplayProof:\n\\AxiomC{$P \\land Q$)}\n\\UnaryInfC{$Q$}\n\\DisplayProof\n\nOr display (block element), within a prooftree environment:\n\\begin{prooftree}\n\\AxiomC{$P \\land Q$)}\n\\UnaryInfC{$Q$}\n\\end{prooftree}\n\nMathJax can only render the latter, so we always use display proofs. They’re a bit more spaced than inline ones, but that looks better. If, for some reasons, inline bussproofs are required, we would imagify them.\n\n26.7.1 Inline bussproofs\nMathjax does not display inline bussproofs. So prefer block ones wherever possible. If you must use an inline proof, you have two options.\n\nUse the Imagify to convert the proof to image in HTML output.\nReplace any $...$ math delimitors in the proof with \\(...\\), and wrap the proof within $...$. If you do this, the HTML output will display a warning message where the proof would have been. If you don’t, you will get nothing at all or a confusing mix of LaTeX code and error message such as ...A\\(}\\UnaryInfC{\\)AExtra close brace or missing open...\n\n\n(Dialectica-specific). We strongly prefer block proofs. We imagify any proof that doesn’t display correctly.\nIllustration of option 2. Suppose you have the Inline proof:\n\\AxiomC{$P \\land Q$)}\n\\UnaryInfC{$Q$}\n\\DisplayProof\n\nYou should rewrite it as:\n$\\AxiomC{\\(P \\land Q\\)}\n\\UnaryInfC{\\(Q\\)}\n\\DisplayProof$\n\n\n26.7.2 Block bussproofs\nRequires: Pandoc 2.19.3+. Enter the prooftree environment directly in markdown, without enclosing $$...$$:\n\\begin{prooftree}\n\\AxiomC{\\(P \\land Q\\)}\n\\UnaryInfC{\\(Q\\)}\n\\end{prooftree}\n\nIt should display correctly in HTML output.\nExceptions: some commands like \\doubleline aren’t handled by MathJaX. They are displayed in red in the HTML output. You can either leave it as is or use Imagify to convert it to an image:\n::: {.imagify}\n\n\\begin{prooftree}\n...\n\\end{prooftree}\n\n:::\n\nSee the Imagify section to fine-tune the result.\n*(Dialectica-specific)**. We strongly prefer block proofs. We imagify any proof that doesn’t display correctly.\nRequires: the not-in-format filter.\n(Note: the problem below will be fixed with Pandoc 2.19.3. With this update we should be able to enter the prooftree environments without the surrounding $$..$$. (to be tested).)\nWith prooftree environments we face the following problem:\n\nIf we include the LaTeX directly in the source, it’s not printed at all in HTML output:\n\\begin{prooftree}\n\\AxiomC{\\(P \\land Q\\)}\n\\UnaryInfC{\\(Q\\)}\n\\end{prooftree}\nIf we enclose it within `$$...$$, it is passed to the HTML output and then correctly displayed by MathJax. But the PDF generation crashes.\n$$\\begin{prooftree}\n\\AxiomC{$P \\land Q$}\n\\UnaryInfC{$Q$}\n\\end{prooftree}$$\n\n\nSolution. We provide two versions of the prootree environment, one for formats other than LaTeX, one for LaTeX. This is done as follows:\n::: {.not-in-format .latex}\n $$\\begin{prooftree}\n  \\AxiomC{$P \\land Q$}\n  \\UnaryInfC{$Q$}\n\\end{prooftree}$$\n:::\n\n::: {.only-in-format .latex}\n\\begin{prooftree}\n  \\AxiomC{$P \\land Q$}\n  \\UnaryInfC{$Q$}\n\\end{prooftree}\n:::\n\nWithin prooftree environements there’s no need to replace the $...$ with \\(...\\).\nThe not-in-format and only-in-format Divs can contain any markdown content, including a mix of LaTeX and markdown if needed. For isntance, your proofs may be in numbered example lists:\n::: {.not-in-format .latex}\n(@) $$\\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}$$\n:::\n\n::: {.only-in-format .latex}\n(@) \\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}\n:::\n\nAnd if you have several proofs in a row, you don’t need to have two Divs for each, you can have two Divs overall:\n::: {.not-in-format .latex}\n1.   $$\\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}$$\n2.   $$\\begin{prooftree}\n      \\AxiomC{$P$}\n      \\UnaryInfC{$P\\lor Q$}\n    \\end{prooftree}$$\n:::\n\n::: {.only-in-format .latex}\n1.   \\begin{prooftree}\n      \\AxiomC{$P \\land Q$}\n      \\UnaryInfC{$Q$}\n    \\end{prooftree}\n2.   \\begin{prooftree}\n      \\AxiomC{$P$}\n      \\UnaryInfC{$P\\lor Q$}\n    \\end{prooftree}\n\n:::",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#latex-new-and-redefined-commands",
    "href": "chapters/copyediting/241-cop-math-latex.html#latex-new-and-redefined-commands",
    "title": "26  Math and LaTeX elements",
    "section": "26.8 Latex new and redefined commands",
    "text": "26.8 Latex new and redefined commands\nA document can include \\newcommand (\\renewcommand, \\newenvironment, \\renewenvironment, \\def,\\let) commands to define abbreviations. For instance some authors introduce a command to produce tuples:\n\\newcommand{\\tuple}{\\langle #1 \\rangle}\n...\n\nThe pair \\tuple{a,b} is...\n\nThe command \\tuple{a,b} then abbreviates \\langle a,b \\rangle which produces \\(\\langle a,b \\rangle\\).\nWe can use these commands, but not put them in {=latex} wrappers.\nBAD:\nheader-includes: |\n  ```{=latex}\n  \\usepackage{fancypkg}\n  \\newcommand{\\tuple}{\\langle #1 \\rangle}\n  ```\n\nGOOD:\nheader-includes: |\n  ```{=latex}\n  \\usepackage{fancypkg}\n  ```\n  \\newcommand{\\tuple}{\\langle #1 \\rangle}\n\nPut in {=latex} things that only work in LaTeX. Special packages that can only be imagified in HTML output go there. For example stmaryrd is a package often used to get double brackets; it doesn’t work in MathJaX and we need to imagify those elements instead. So it goes in {=latex}.\nPut outside of {latex} things that Pandoc needs to know about even when generating HTML output. Here the new command needs to be translated whichever output we’re generating, so Pandoc needs to know about it. We put it outside of {=latex}.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#mathjax-math-input-error",
    "href": "chapters/copyediting/241-cop-math-latex.html#mathjax-math-input-error",
    "title": "26  Math and LaTeX elements",
    "section": "26.9 MathJAX “Math Input Error”",
    "text": "26.9 MathJAX “Math Input Error”\nError: you’re expecting a LaTeX element to be rendered by MathJAX in HTML output, but instead MathJAX displays a red-on-yellow “Math Input Error” message.\nTo identify the source of the problem, open the HTML in a text editor. Find the bit of HTML corresponding to your latex element. It’ll be in a math inline or math display span element:\n&lt;span class=\"math display\"&gt;\\[\\begin{prooftree}\n\\AxiomC{A}\\RightLabel{Id}\n\\UnaryInfC{$A$}\\RightLabel{example, \nRefl}\n\\UnaryInfC{$A$}\n\\end{prooftree}\\]&lt;/span&gt;\n\nCreate an empty math element next to it, e.g.:\n&lt;p&gt;TEST CODE:&lt;/p&gt;\n&lt;span class=\"math display\"&gt;\\[\n\\]&lt;/span&gt;\n\nOpen the file in a browser. Add the contents of the original element line by line, refreshing the browser each time, until you find the bit of code that produces the error. In the example above, for instance, the error was produced by the linebreak:\n\\UnaryInfC{$A$}\\RightLabel{example, \nRefl}\n\nand was fixed when we removed it:\n\\UnaryInfC{$A$}\\RightLabel{example, Refl}",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#latex-output-issues",
    "href": "chapters/copyediting/241-cop-math-latex.html#latex-output-issues",
    "title": "26  Math and LaTeX elements",
    "section": "26.10 LaTeX output issues",
    "text": "26.10 LaTeX output issues\n\n26.10.1 Underbraces or Overbraces not working (mathtools)\nProblem: Underbraces or overbraces are not typeset correctly; instead we see a ‘Z’ and black boxes.\nDiagnosis. The LaTeX package mathtools is loaded by the template or the article’s header-include after the package unicode-math. See this stackexchange post.\nSolution. The journal template should load mathtools before unicode-math, or the article should not use mathtools. Note: mathtools is an extension of amsmath, it can be loaded instead of amsmath.\nDialectica solution. Our template loads mathtools. Do not include \\usepackage{mathtools} in header-includes.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/241-cop-math-latex.html#footnotes",
    "href": "chapters/copyediting/241-cop-math-latex.html#footnotes",
    "title": "26  Math and LaTeX elements",
    "section": "",
    "text": "\\ldots is LaTeX code for suspension dots.↩︎\nBecause latin lowercase letters come from handwritten Carolingian letters but latin uppercase letters come from stone-engraved Roman letters, some think that uppercase latin letters shouldn’t be used unless strictly necessary. The same can be said for uppercase/lowercase greek letters.↩︎\nRecall that ~~~ marks code blocks like ```.↩︎\nMathJax is a HTML-embedded script that allows your browser to display most LaTeX-encoded math. When Pandoc converts to HTML in MathJax code, it includes LaTeX code within $...$ and $$...$$ directly in the HTML, and MathJax typesets it. However, MathJax cannot process all LaTeX. It covers most of the standard maths and some special math-related packages like bussproofs for natural deduction. But custom commands, special packages and other advanced LaTeX will result in red text error messages.↩︎",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Math and LaTeX elements</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/25-cop-imagify.html",
    "href": "chapters/copyediting/25-cop-imagify.html",
    "title": "27  Imagify",
    "section": "",
    "text": "27.1 Basic usage\nRequires: the Imagify filter. The Imagify filter transforms chosen LaTeX elements into images when producing non-PDF outputs.\nMath formulas in LaTeX are generally well rendered in HTML output. But some LaTeX components aren’t. Example\nExample usage. Below the first proof is passed directly to HTML (where MathJaX handles it) but the second is converted to an image (because MathJaX cannot display \\doubleline):",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Imagify</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/25-cop-imagify.html#basic-usage",
    "href": "chapters/copyediting/25-cop-imagify.html#basic-usage",
    "title": "27  Imagify",
    "section": "",
    "text": "27.1.1 When is imagify needed?\nYou see red text in the HTML output corresponding to some LaTeX code in the original. E.g. \\llbracket in red.\n\n\n27.1.2 Imagify with default settings or specific settings\nYou’ll have to figure out whether you can imagify with default settings alone or whether you need specific settings. Simply try the default settings first, and move to specific ones if that doesn’t work.\nDefault settings work e.g. when you have a bussproof that uses doubleLine, a table, or a Tikz image. Specific settings are required e.g. when the LaTeX uses symbols found in a extra package (double brackets from the stmaryrd package).\nSpecific settings may also be used to fine-tune the image: its vertical alignment, or size (zoom).\n\n\n27.1.3 Imagifying with default settings\nCreate a Div with class imagify:\n\n::: {.imagify} \n\nMixed content here.\n\n:::\n\nThe Div can contain a mix of text and LaTeX elements. So you don’t need to place your Div exactly around the LaTeX bit that needs to be converted, you can take e.g. the paragraph that contains it.\nWithin the Div, any LaTeX element is converted to a separate image:\n\nEvery math formula ($...$, /(.../), $$...$$, /[.../])\nEvery raw LaTeX element, block or inline:\n`...inline latex...`{=latex}\n\n\n\n\n\n```{=latex}\n...block latex...\n```\n\n\n\nEvery LaTeX command directly inserted into the text:\n... (end of some paragraph).\n\n\\pagebreak\n\n... (begining of some other paragraph)\n\n\nBy default, images are embedded within the HTML document. But Imagify options allow you to save them as separate files instead.\nTikZ. Tikz images start with \\begin{tikzpicture} (sometimes preceeded with \\usetikzlibrary{...}). They should work with default settings. However, you sometimes need to check which “libraries” are loaded. Suppose the original manuscript (in LaTeX) has a preamble with either of the following commands:\n\\usepackage[arrows]{tikz}\n\\usetikzlibrary{arrows}\n\nThen the document is loading a “package” for TikZ images, the arrows package. You need to tell Imagify that it’s used in your particular image. To do so you add the \\usetikzlibrary command at the beginning of the LaTeX code itself:\n\\usetikzlibrary{arrows}\n\\begin{tikzpicture}...\n\n\n27.1.4 Imagify with specific settings\nYou may use specific Imagify settings instead. The best way to do so is to declare an Imagify “class” in the document’s metadata:\nimagify-classes:\n  myclass:\n    header-includes: |\n      \\usepackage{stmaryrd}\n    zoom: 1.6\n\nHere we declare an imagifying class myclass. It uses the LaTeX package stmaryrd (with provides a bunch of symbols like double brackets) and an extra zoom of 1.6 (default is 1.5 or 1.4). You can then use the class by putting content in a Div of that class:\n\n::: myclass\n\n... Mixed content (LaTeX elements here are imagified with those settings)\n\n:::\n\nIt that helps clarity you can also declare the Div both of imagify and myclass:\n\n::: {.myclass .imagify}\n\n...\n\n:::\n\n(Recall that when multiple identifier/classes/attributes are declared we need to use curly brackets and dots at the beginning of classes.)\nClass names rules. It’s a good idea to use if you use “imagify” in the name, perhaps with the name of the author (imagify-smith) or a name related to the particular element to be imagified (imagify-bussproofs). Important: avoid name clashes between two papers in the same issue. E.g. two papers with the same imagify-table class but different class settings in each.\nHow to find out which packages are needed. Sometimes it’s obvious which LaTeX package is needed from the original LaTeX manuscript.\nOften the missing LaTeX is a symbol.Look at the command(s) that are printed in red in HTML output. Suppose you see the \\\\llbracket command, for instance. A good idea is to check whether this command is in the LaTeX Comprehensive Symbols List:\n\nrun texdoc symbols on a Terminal. If you have a rich enough LaTeX distribution installed this will open the LaTeX Comprehensive Symbols List (a large PDF). Otherwise search for it online.\nsearch in the document for your command, e.g. search for llbracket.\nif it shows up, it’ll be in a Table. The table caption tells you which LaTeX package contains the symbol, e.g. “Table 225: stmaryrd Variable-sized Delimiters” tells me that \\llbracket is part of the stmaryrd package.\n\n\nWhen you figure out which LaTeX package is needed to imagify your bit of LaTeX, add it to the relevant imagify class with header-includes.\nSpecifying settings on the Div itself. You can also specify Imagify settings on the Div itself:\n::: {.imagify zoom=\"1.6\" }\n\n...\n\n:::\n\nUnfortunately, you cannot use this to specify LaTeX packages. The following:\n::: {.imagify header-includes=\"\\usepackage{stmaryrd}\" }\n\nis converted by Pandoc into “usepackage{stmaryrd}”, i.e. a backslash symbol followed by the text ‘usepackage’ rather than the actual LaTeX command \\usepackage.\nCascading styles. Imagify settings are applied in a “cascading” order: first the defaults, then those associated with a Div’s class, then those specified on the Div itself. The latter ones override the former.\nIf a LaTeX element is contained within an imagify-class Div that is itself contained in another imagify-class Div, then the settings (class and local) of the first are applied first, then those of the contained one. And so on for multiple containment.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Imagify</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/25-cop-imagify.html#advanced-usage",
    "href": "chapters/copyediting/25-cop-imagify.html#advanced-usage",
    "title": "27  Imagify",
    "section": "27.2 Advanced usage",
    "text": "27.2 Advanced usage\n\n27.2.1 See the LaTeX document used to generate an image\nImagify uses Pandoc’s default LaTeX template to create a document of the standalone class that contains your LaTeX element’s code.\n\nSeveral packages are already included: amsmath, amssymb, etc.\nYour header-includes code is included. To prevent that, set an alternative Imagify header-includes empty in your doc metadata:\nheader-includes: |\n  ... document header-includes ...\nimagify:\n  header-includes: |\n  ... header-includes used by Imagify ...\n\n\nTo see these intermediate LaTeX files, set imagify’s debug option in your document’s metadata:\nimagify:\n  debug: true\n\nThey will be placed in the document folder, or if the folder specified by Imagify’s output-folder option:\nimagify:\n  output-folder: imagify_files\n\nIf Imagify conversion crashes, you can open these files in an editor and figure out which modifications (e.g. additional packages) are needed to make it work.\n\n\n27.2.2 TikZ\nIf \\begin{tikzpicture} or usetikzlibrary appears within the imagified code, Imagify will handle it well.\nIf your code uses TikZ indirectly (e.g., it uses a package that loads TikZ), you normally have to set the tikz classoption:\nimagify:\n  classoption: tikz\n\n\n27.2.3 Additional packages\nYou can use Imagify’s header-includes to provide any LaTeX packages an image needs:\nheader-includes: |\n  ... document header-includes ...\nimagify:\n  header-includes: |\n     ... header-includes used by Imagify ...\n\n\n27.2.4 Imagify classes\nYou can create multiple imagify classes with different options. This allows you to provide different packages for different images:\nimagify:\n  classes:\n    fitchproof:\n      header-includes: |\n        ```{=latex}\n        \\usepackage{fitch}\n        ```\n    bussproof:\n      header-includes: |\n        ```{=latex}\n        \\usepackage{bussproofs}\n        ```\n\nAll of Imagify’s rendering options (zoom, pdf-engine, embed, etc.) work under these classes too.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Imagify</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/25-cop-imagify.html#brief-notes",
    "href": "chapters/copyediting/25-cop-imagify.html#brief-notes",
    "title": "27  Imagify",
    "section": "27.3 Brief notes",
    "text": "27.3 Brief notes\n\n27.3.1 mdframed\nSet-up for using the mdframed package:\n\nWill crash if you don’t provide the varwidth=... standalone class option.\nWill crash if you provide the tikz option, even though it uses tikz.\n\nimagify-framed: # varwidth, no TikZ even though mdframed uses it\n  classoption: varwidth=3.5cm\n  header-includes: |\n    ```{=latex}\n    \\usepackage[framemethod=TikZ]{mdframed}\n    ```",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Imagify</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html",
    "href": "chapters/copyediting/27-cop-troubleshooting.html",
    "title": "28  Trouble and troubleshooting",
    "section": "",
    "text": "28.1 Paragraph starts with ‘(1)’ or ‘1.’ or some other list code\nProblem. you have a paragraph or blockquote starting with (1) or 2) or 3.. Pandoc thinks it’s a list, but it’s not.\nSolution. Escape the parenthesis or dot that follows the number.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#paragraph-starts-with-1-or-1.-or-some-other-list-code",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#paragraph-starts-with-1-or-1.-or-some-other-list-code",
    "title": "28  Trouble and troubleshooting",
    "section": "",
    "text": "I TYPE\nI GET\n\n\n\n\n(1) This is interpreted\nas a list item.\n\n3. And so is this.\n\nThis is interpreted as a list item.\n\n\n\nAnd so is this.\n\n\n\n(1\\) This isn't interpreted\nas a list item.\n\n3\\. This isn't either.\n(1) This isn’t interpreted as a list item.\n3. This isn’t either.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#if-pdf-generation-doesnt-work",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#if-pdf-generation-doesnt-work",
    "title": "28  Trouble and troubleshooting",
    "section": "28.2 If PDF generation doesn’t work",
    "text": "28.2 If PDF generation doesn’t work\nMake sure first that you’ve checked the advice in the “how to produce outputs” sections.\nPDF generation happens in two stages. Identify which one fails:\n\nMarkdown to LaTeX (the Pandoc stage)\nor LaTeX to PDF (the LaTeX stage)\n\n\nYou do so by trying to generate a LaTeX (.tex) output. If that fails, there’s an error at the Pandoc stage, otherwise (more commonly, unfortunately) the error is at the latex stage.\nPandoc-stage errors are mostly due to:\n\nFaulty YAML metadata.\n\nYAML parse exception at line 453.. your YAML is not well formatted. See the metadata section.\nEven if you don’t get the YAML parse error, there might be some formatting error around line breaks or identation. Check multiline fields and nested fields of maps/lists.\nSome YAML value isn’t correct and makes a filter crash.\n\nFile not found. File not found in resource path error, see below.\nA bug in one of the “filters” that we use to handle various typesetting tasks (e.g. statements). You will see the name lua in the error message.\nFaulty LaTeX template. Cannot compile the template error. There’s an error in the house template.\n\n\nLaTeX stage errors are due to a multitude of causes. You can learn more about the error by running your pdf engine on the LaTeX output:\nlualatex article.tex\n\nFor lualatex; replace with pdflatex or xelatex depending on your setup.\nOnce you run LaTeX a detailed log of its action rolls out—faster than you can read. The error message will be close to the end and look like this:\nError/Warning (...) Error: MESSAGE\n\nType  H &lt;return&gt;  for immediate help.\n ...                                              \n                                                  \nl.3984       {See the manual for further details.}\n\nThe l.3984 is the line of the LaTeX file where the error arose. (Not necessarily the line that caused it! The cause might be earlier in the code, though not later.) You can go to that location in your LaTeX file and investigate.\nYou can place the LaTeX run log in a file if you want to examine it in a text editor rather than the terminal:\nlualatex article.tex &gt; latex_log.txt",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#word-manuscript-with-many-symbols-phi-psy-greek-letters-logical-symbols.",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#word-manuscript-with-many-symbols-phi-psy-greek-letters-logical-symbols.",
    "title": "28  Trouble and troubleshooting",
    "section": "28.3 Word manuscript with many symbols (phi, psy, greek letters, logical symbols,).",
    "text": "28.3 Word manuscript with many symbols (phi, psy, greek letters, logical symbols,).\nIf the symbols aren’t in MS Word Equations, they will be preserved as is in markdown - and the document won’t work. All the symbols have to converted into LaTeX formulas. A tip:\n\nUse search and replace in RStudio to convert each symbol in its &gt; LaTeX equivalent.\nThen go through the document to enclose each of them in $...$ (to &gt; indicate maths formulas).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#reverse-conversion-.md---.tex",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#reverse-conversion-.md---.tex",
    "title": "28  Trouble and troubleshooting",
    "section": "28.4 Reverse conversion .md -> .tex",
    "text": "28.4 Reverse conversion .md -&gt; .tex\n\n\n\n\n\n\n\n\nI want\nI type\nLaTex\n\n\n\n\nBasic\n(Smith, 2012)\n(Smith, 2012, 2015)\n(Smith 2012; Jones 2015)\n(Smith 2012, 205)\n(see Smith 2012, 205)\n(Smith 2012, 205-210, 235)\n(Smith 2012, 28; Jones 2015, 2017)\n(see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58)\n[@Smith2012]\n[@Smi th2012;@Smith2015]\n[@Smi th2012;@Jones2015]\n[@Smith2012, 205]\n[see @Smith2012, 205]\n[@Smith2012, 205--210, 235]\n[@Smith2012, 28; @Jones2015; @Jones2017]\n[see @Smith2018, 28; comp. @Jones2015, 28; also @Jones2017, 45--48].\n\\citep{smith:2012}\n\\citep{sm ith:2012,smith:2015}\n\\citep{sm ith:2012,jones:2015}\n\\cite p[205]{smith:2012}\n\\citep[see\n][205]{smith:2012}\n\\citep[205--2 10,235]{smith:2012}\n(Smith \\citeyea r[28]{smith:2012}; Jones \\citeyear{jon es:2015,jones:2017})\n(see Smith \\citeyea r[28]{smith:2012}; comp. Jones \\citeyea r[28]{jones:2015}; also Jones \\citeyear[45 --58]{jones:2017})\n\n\nInline\nSmith (2012) says that\nSmith (2012, 205) says that\nSmith (2012; 2015, 205) says that\nPeregrin & Svoboda (2013, 2016, 2017, and also Read, 2018)\nAlternatively, you can type the name and use year-only:\nSmith (2012; 2015)\n@Smith2012 says that\n@Smith2012 [205] says that\n@Smith2012 [@Smith2015, 205] says that\n@pe regrin-svoboda:2013a [@pe regrin-svoboda:2016;\n@pe regrin-svoboda:2017; and also @read_s:2000]\nSmith [-@Smith2012, @Smith2015]\n\\citet{smith:2012} says that\n\\cite t[205]{smith:2012} says that\nSmith (\\c iteyear{smith:2012}, \\citeyea r[205]{smith:205}) says that\n\\citet[][and also Read \\citeyear{r ead_s:2000}]{peregr in-svoboda:2013,pere grin-svoboda:2016,pe regrin-svoboda:2017}\nPeregrin \\& Svoboda (\\citeyear{peregri n-svoboda:2013,pereg rin-svoboda:2016,per egrin-svoboda:2017}, and also Read \\ci teyear{read_s:2000})\n\n\nYear only\nSmith makes an outrageous claim (2015, 277).\nSmith keeps repeating himself (2012, 2013, 2014, 2015).\nSmith said this in a few places (2012, 20; 2013, 30)\nSmith makes an outrageous claim [-@Smith2015, 277].\nSmith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015].\nSmith said this in a few places [-@Smith2012, 20; @Smith2013, 30].\nSmith makes an outrageous claim (\\citeyear\n[277]{smith:2015}).\nSmith keeps repeating himself (\\citeyear{smith :2012,smith:2013,smi th:2014,smith:2015})\nSmith said this in a few places (\\citeyea r[29]{smith:2012}, \\citeyear [30]{smith:2013}).",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#file-not-found-in-resource-path",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#file-not-found-in-resource-path",
    "title": "28  Trouble and troubleshooting",
    "section": "28.5 File not found in resource path",
    "text": "28.5 File not found in resource path\nFile mydefaults.yaml not found in resource path\n\nThe file mydefaults.yaml is absent or not at the place expected. Check whether the relative locations of your article, master and template are correct.\nFile  not found in resource path\n\nPandoc is looking for a file with no name. Check if you don’t have an emtpy bibliography field in the metadata.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#htmlmathjax-math-mode-letter-in-heading-not-showing",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#htmlmathjax-math-mode-letter-in-heading-not-showing",
    "title": "28  Trouble and troubleshooting",
    "section": "28.6 HTML/MathJax: Math-mode letter in heading not showing",
    "text": "28.6 HTML/MathJax: Math-mode letter in heading not showing\nPROBLEM: a Math-mode letter (e.g. \\(\\alpha\\)) is not showing in a heading in HTML/MathJax output.\nSOLUTION. Is your CSS using a font variant, e.g. small-caps? Make sure Spans of the math-inline class are in regular shape and variant.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#missing-character",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#missing-character",
    "title": "28  Trouble and troubleshooting",
    "section": "28.7 Missing character",
    "text": "28.7 Missing character\n[WARNING] Missing character: There is no SPECIAL-CHAR (U+2192) in font FONT\n\nMeans that your markdown file include a character SPECIAL-CHAR that is not available in the font you use. Typically, SPECIAL-CHAR is a symbol or character from non-latin languages. Note that you might not see anything where SPECIAL-CHAR is above, if the character in question is a (special kind of) space or if it’s not present in the font in which this warning is printed.\nSolution: if SPECIAL-CHAR is visible you can copy it, and search it in your markdown file. Remove it and if needed replace it with some character that is present in your font. Typically, this involves replacing a unicode symbol (a right arrow) by its LaTeX equivalent, e.g. \\(\\rightarrow\\).\nSolution: if SPECIAL-CHAR is not visible, look up the unicode number (e.g. U+2192 online) to see what character is it, and hunt it down in your markdown manuscript.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#yaml-parse-exception",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#yaml-parse-exception",
    "title": "28  Trouble and troubleshooting",
    "section": "28.8 YAML Parse exception",
    "text": "28.8 YAML Parse exception\nError message: PandocParseError \"YAML parse exception at line 2, column 2:\\nmapping values are not allowed in this context\"\nSolution: this is probably due to several --- lines in your source markdown. The text in between might be interpreted as an additional YAML metadata block by Pandoc. Replace them with a longer dash sequence, e.g ------.",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#attempt-to-compare-nil-with-number",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#attempt-to-compare-nil-with-number",
    "title": "28  Trouble and troubleshooting",
    "section": "28.9 attempt to compare nil with number",
    "text": "28.9 attempt to compare nil with number\nError:\nwarning  (node filter): error: ...e/2022/texmf-dist/tex/generic/babel/babel-bid\ni-basic.lua:155: attempt to compare nil with number\n\nThis bug can be produced by a statement with a custom label containing an uppercase letter followed by a dash, such as:\n:::{.statement #statement-id}\n__L-a__. This statement might generate an error!\n:::\n\nFix 1. Use the HTML entity for non-breaking hyphen (&#8209;)\n:::{.statement #statement-id}\n__L&#8209;a__. This will not generate an error.\n:::\n\nCaution: depending on the length of the hyphenated term and the surrounding text—especially if you refer to the statement intext with the identifier (i.e., @statement-id)—this might mess up the horizontal spacing of lines since the term will not be split up at the hyphen. To avoid this, you can refer to the statement with an internal link, i.e., [[L-a]{.smallcaps}](#statement-id).\nFix 2 (If Fix 1 Fails). Surround the dash with spaces\n:::{.statement #statement-id}\n__L - a__. This will not generate an error.\n:::\n\nA longer dash probably looks better:\n:::{.statement #statement-id}\n__L -- a__. This will not generate an error.\n:::",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#hard-coded-latex-table-undefined-control-sequence",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#hard-coded-latex-table-undefined-control-sequence",
    "title": "28  Trouble and troubleshooting",
    "section": "28.10 Hard-coded LaTeX table: Undefined control sequence",
    "text": "28.10 Hard-coded LaTeX table: Undefined control sequence\nWe hard-coded a complex LaTeX table but used markdown to include a link target in the caption:\n::::: {.only-in-format .latex}\n\n`\\begin{longtable}{ccc}`{=latex}\n`\\caption{`{=latex}Numbers to prove [this idea]{#idea}.`}\\\\`{=latex}\n\n\n\n\n``` {=latex}\n \\hline\n    header & header & header \\\\\n  \\hline\n  ... table rows \\\\\n \\hline\n\\end{longtable}\n```\n\n\n\n\n:::::\n\nWe got a “Undefined control sequence” for an obscure command (HyperRaiseLinkLength) that doesn’t appear in the pandoc-generated LaTeX. The cause is that Pandoc inserts a \\phantomsection command before the link target:\n\\begin{longtable}{ccc}\n\\caption{Numbers to prove \\phantomsection\\label{idea}{#idea}.} \n\nWhich cannot be inserted within table captions.\nSolution. Redefine \\phantomsection to nothing (or \\relax) within the scope of this table. Note that we wrap the entire table within {...} to ensure that \\renewcommand only affects this table, not the rest of the document:\n::::: {.only-in-format .latex}\n\n\n\n\n\n``` {=latex}\n{\n\\renewcommand{\\phantomsection}{}\n\\begin{longtable}{ccc}\n```\n\n\n\n\n`\\caption{`{=latex}Numbers to prove [this idea]{#idea}.`}\\\\`{=latex}\n\n\n\n\n``` {=latex}\n \\hline\n    header & header & header \\\\\n  \\hline\n  ... table rows \\\\\n \\hline\n\\end{longtable}\n```\n\n\n\n\n:::::",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/27-cop-troubleshooting.html#a-list-of-things-that-cause-trouble",
    "href": "chapters/copyediting/27-cop-troubleshooting.html#a-list-of-things-that-cause-trouble",
    "title": "28  Trouble and troubleshooting",
    "section": "28.11 A list of things that cause trouble",
    "text": "28.11 A list of things that cause trouble\nSome hurdles that beginning copyeditors typically face.\n\n28.11.1 Visual editor RStudio\n\nDoes not preserve numbered examples code (all processed).\nTables: Doesn’t preserve code (not pipe format -&gt; loss of cell &gt; alignment)\nInterprets \\[ and \\] as display maths.\n\nSolution: do not escape the [ ]. Only possible problem: it &gt; picks up a section label. But I think you can change the title &gt; in section labels.\n\n\n\n\n28.11.2 Pandoc\n\nLaTeX encoding of tables is heavy (every cell is a minipage! &gt; Specifies detailed widths)\nTables: no colspan nor rowspan yet\nIndented blocks (statements, arguments, …) and AMS theorems\nHTML default encoding of formulas uses unicode + italics + “math &gt; inline” custom style class. Use --mathjax flag; adds a link to &gt; mathjax.js in the head so this should be present on the website &gt; (or unnecessary if the galley has its own head). See pandoc &gt; manual on maths in &gt; html &gt; .\n\n\n\n28.11.3 LaTeX\n\nStandard logic symbols: \\neg, \\lnot, \\land, \\lor, \\sim all well &gt; supported in MathML? (Not a big worry!)",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Trouble and troubleshooting</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/29-cop-markdown-cheatsheet.html",
    "href": "chapters/copyediting/29-cop-markdown-cheatsheet.html",
    "title": "29  Markdown Cheatsheet",
    "section": "",
    "text": "29.1 Inline elements",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Markdown Cheatsheet</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/29-cop-markdown-cheatsheet.html#inline-elements",
    "href": "chapters/copyediting/29-cop-markdown-cheatsheet.html#inline-elements",
    "title": "29  Markdown Cheatsheet",
    "section": "",
    "text": "I want\nI type\n\n\n\n\nAn emphasized word.\nAn *emphasized* word.\nAn _emphasized_ word.\n\n\nSome strong emphasis.\nSome **strong emphasis**.\nSome __strong emphasis__.\n\n\nA sub1 script and a sup1 script (when attached to plain text words).\nA sub~1~ script and a sup^1^ script.\n\n\nWith \\(p_1\\) and \\(p^2\\) the sub(sup)scripts are in math formulas.\nWith   $p_1$ and $p^2$ the ...",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Markdown Cheatsheet</span>"
    ]
  },
  {
    "objectID": "chapters/copyediting/29-cop-markdown-cheatsheet.html#block-elements",
    "href": "chapters/copyediting/29-cop-markdown-cheatsheet.html#block-elements",
    "title": "29  Markdown Cheatsheet",
    "section": "29.2 Block elements",
    "text": "29.2 Block elements\n\n\n\n\n\n\n\nParagraph\nLeave an empty line to separate two paragraphs\n\n\nUnindented paragraph (following equation, quotation)\n\\noindent This new paragraph...\n\n\n1. Section heading\n# Section title\nDo not put a number: the house style should add numbers.\n\n\n1.2 Subsection heading\n## Subsection title\n\n\n1.2.1 Subsubsection title\n\nlower titles\n### Subsection title\n####, #####, ######\n\n\nQuotations\nNote: only use this for genuine quotations, not to indent blocks.\n&gt; Start each line with `&gt;`\n&gt; This is a quotation\n&gt; with two lines\n\n\nStatement (indented block)\nThese lines are going to be indented\nFirst Principle (FP). Everything is what it is.\nSee below on how to cross-refer to statements.\n::: statement\nThese lines are going to\nbe indented.\n:::\n\n::: {.statement}\n*First principle* (**FP**).\nEverything is what\nit is.`\n:::\n\n\n\n\n29.2.1 Citations\nCitations are a more difficult aspect of markdown. You should read the chapter on copyediting citations before you use this cheatsheet.\nFor the following we assume that your document’s bibliography has keys (identifiers) Smith2012, Jones2017 for Smith’s 2012 article, Jone’s 2017 articles, and so on.\n\n\n\n\n\n\n\nI want\nI type\n\n\n\n\nBasic\n(Smith, 2012)\n(Smith, 2012, 2015)\n(Smith 2012; Jones 2015)\n(Smith 2012, 205)\n(see Smith 2012, 205)\n(Smith 2012, 205-210, 235)\n(Smith 2012, 28; Jones 2015, 2017)\n(see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58)\nNote: whether you get ‘;’ or ‘,’ or ‘:’ separators between several citations should be specified and handled automatically by the template.\n[@Smith2012]\n[@Smith2012; @Smith2015]\n[@Smith2012;@Jones2015]\n[@Smith2012, 205]\n[see @Smith2012, 205]\n[@Smith2012, 205\\--210, 235]\n[@Smith2012, 28; @Jones2015; @Jones2017]\nsee @Smith2018, 28; comp. @Jones2015, 28; also @Jones2017, 45\\--48]\n\n\nInline (note: should with latest RStudio visual mode, but read warning below)\nSmith (2012) says that\nSmith (2012, 205) says that\nInline several papers by same author, you format the first inline and the rest regular:\nSmith (2012; 2015, 205) says that\nPeregrin & Svoboda (2013, 2016, 2017, and also Read, 2018)\nAlternatively, you can type the name and use year-only:\nSmith (2012; 2015)\n@Smith2012 says that\n@Smith2012 [205] says that\n@Smith2012 [@Smith2015, 205] says that\n@peregrin-svoboda:2013a [@peregrin-svoboda:2016;\n@peregrin-svoboda:2017; and also @read_s:2000]\nSmith [-@Smith2012, @Smith2015]\n\n\nYear only\nSmith makes an outrageous claim (2015, 277).\nSmith keeps repeating himself (2012, 2013, 2014, 2015).\nSmith said this in a few places (2012, 20; 2013, 30)\nSmith makes an outrageous claim [-@Smith2015, 277].\nSmith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015]\nSmith said this in a few places [-@Smith2012, 20; @Smith2013, 30].\n\n\n\nCommon errors:\n\n\n\n\n\n\n\nBad\nGood\n\n\n\n\nCode:\n(See for instance [@Smith2015]).\n(See for instance @Jones2018).\nOutput:\n(See for instance (Smith, 2015)).\n(See for instance Jones (2018)).\nCode:\n[See for instance, @Smith2015]\nOutput:\n(See for instance Smith, 2015).\n\n\nCode:\nSee f o r instance @Smith2012; @Smith2015.\nOutput:\nSee for instance Smith (2012); Smith (2015).\nCode:\nSee for insta n ce Smith [-@Smith2012; @Smith2015]\nOutput:\nSee for instance Smith (2012, 2015).\n\n\nSpace after a formula marker $:\nCode:\n$ \\Delta \\rightarrow \\Phi $ | Output:\nError, missing $ at line…\nCode:\n$\\Delta \\rightarrow \\Phi$\nOutput:\n\\(\\Delta \\rightarrow \\Phi\\)",
    "crumbs": [
      "Copyediting",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Markdown Cheatsheet</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html",
    "title": "30  Dialectica new house style outputs",
    "section": "",
    "text": "30.1 Setting up your system\nDialectica outputs are compiled: from a markdown manuscript, image files, bibliography files and Dialectica’s template (itself a collection of files), it creates PDFs and HTML outputs. The compilation environment is the collection of software tools to do this: Pandoc, LaTeX, Quarto, and a few others. Instead of asking everybody to install these tools on their various Linux/Windows/Mac machines, and asking everybody to update them to the same version, we are using a “containerized” environment that is the same for all, no matter which machine you have.\nLet’s briefly explain how this works, including key terms. In the old days, computers came with an ‘installation disk/DVD/USB key’ that had your computer system (Windows, Mac, Linux) and perhaps some basic software (a text editor). Using the disk/DVD/USB key, you set up the system on the machine, and then used the computer. And in the old days, you’d give each copyeditor a computer of the same model, with the same installation disk/DVD/USB key. We’re doing to do exactly that, except that our company computer is virtual and will be simulated by your own computer. The Docker application is the software that enables to do that.\nThe Docker application works with images and containers. We’ll have:\nOnce your container (virtual company computer) is created, it can be started or stopped. This is just like turning the company computer on and off.\nThe container (virtual company computer) is isolated from your actual system and filesystem, so it doesn’t change anything in your system, it doesn’t crash your system if it crashes, and you won’t see its internal files on your file browser.\nThere is one exception though: the container will have access to the dialectica workshouse folder on your own filesystem. That allows it to read manuscript markdown files, bibliography files, etc. in order to generate outputs, and then to write the generated outputs (PDF or HTML files) in your filesystem so you can view them.\nMoreover, in the advanced text editor we’ll use (Visual Studio Code aka VSCode), you’ll be able to run a Terminal on the container (virtual company machine) itself. This allows you to tell the container to generate outputs.\nDialectica copyediting requires:\nBriefly put, to set up, you need to install git and docker, and then be able to connect to a running container.  In this guide, we’ll use VSCode  as it makes it very easy to work inside docker containers , but you’re free to work in a different editor and use the container directly from your terminal if you wish.\nHow to setup will depend on your specific Operating System. If you know how to install and configure git, docker and VSCode on your own, just skip this section and go chapter 3. Note that in this guide, VSCode replaces RStudio as an alternative better suited to interact with modern software tools (such as docker) and languages other than R (such as Markdown, LaTeX, and HTML).\nFor guidance or any problem not covered here, please contact Luis Bordo at luis.bordo@philosophie.ch.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Dialectica new house style outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#setting-up-your-system",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#setting-up-your-system",
    "title": "30  Dialectica new house style outputs",
    "section": "",
    "text": "Docker, to run a container containing the actual environment\nGit, to clone the repository of the script to download and start the compilation environment\nRecommended: VSCode, to comfortably connect and use the environment to edit articles\n\n\n\n\n\n\n30.1.1 Installing git, docker, VSCode\nThe following instructions need to be executed only once per machine. Here we will install and set up Docker, Git, and VSCode in your machine.\n\n30.1.1.1 Windows\n\nDownload and install git\nCheck that git is working in PowerShell. If you get no errors with the command below, then git is working correctly:\ngit --version\nDownload, install, and open Docker Desktop. When installing Docker, choose the option to use WSL 2.\nWhen you install Docker, you can use the recommended settings and select “Continue without signing in”.\nOpen PowerShell (you have it installed by default) and check that you have wsl version 2 or above with\nwsl --version\n\n\nIf you don’t, do wsl --install, wait, and do again wsl --version\nIf you still don’t have wsl version 2 or above, go to the Troubleshooting section below\n\n\nCheck that Docker is configured to run with WSL 2: open Docker Desktop, go to Settings, and mark the checkbox for using WSL 2 if it’s not marked already.\nAdditionally, in the settings, increase the CPU and memory limits of the containers to be at a minimum of 3/4 of your machine’s resources. For example, if you have an 8 core CPU and 16 GB of RAM, you could set the limits to 7 cores and 14 GB of RAM.\nNow, in PowerShell, check that docker is working with:\ndocker run hello-world\n\n\nIf you don’t get any errors, then docker is working in your machine\n\nInstall VSCode\n\n\n\n30.1.1.2 Mac\n\nInstall brew\n\n\nFor this, usually it’s a single command to execute in a terminal; just follow the instructions in the page\n\n\nInstall git using brew. In a terminal, do:\nbrew install git\nCheck that git is working, in a terminal. If you get no errors with the command below, then git is working correctly:\ngit --version\nDownload and install Docker Desktop. Make sure to pick your correct processor (Mac Intel Chip or Mac Apple Chip). 1\nWhen you install Docker, you can use the recommended settings and select “Continue without signing in”.\nConfigure Docker. Launch the Docker application and open “Settings”.\n\nIn the “General” tab, check that the following options are enabled: “VirtioFS”, “Use Virtualization framework”, and “Use Rosetta for x86/amd64 emulation on Apple Silicon”. (These settings may not appear on Intel Chip macs; if they don’t ignore this step.)\nIncrease the CPU and memory limits of the containers to be at a minimum of 3/4 of your machine’s resources. For example, if you have an 8 core CPU and 16 GB of RAM, you could set the limits to 7 cores and 14 GB of RAM.\n\nCheck that docker is working. In a terminal, run:\ndocker run hello-world\nIf you get no errors, Docker is working correctly. If you do, try running Docker (in Applications). Docker’s whale icon should appear in your system icon bar (i.e. alongside icons for Wifi, Bluetooth etc.).\nDownload and install VSCode\n\n\n\n30.1.1.3 Linux\n\nInstall git\n\n\nYou most likely have it by default already. You can test this by doing git --version in a terminal\nIf you don’t have it, install it using your distribution’s package manager. For example, in Debian and Ubuntu (and their derivatives), do sudo apt install git in a terminal\n\n\nFollow [the official installation instructions for Docker] (https://docs.docker.com/engine/install/#server) to install Docker Engine in your Linux distribution\n\n\nFollow the post-installation steps to use docker in your terminal without needing to write sudo everytime\nIf you opt out from following these post-installation steps, you will need to adapt the docker comands in this document (i.e., append sudo to all of them, everytime)\nYou can use Docker without siging in.\n\n\nCheck that docker is working, in a terminal. If you get no errors with the command below, then docker is working correctly:\ndocker run hello-world\nInstall VSCode\n\n\n\n\n30.1.2 Setup: pulling the docker image and starting a container\nOnce you have the necessary dependencies (git, docker, VSCode) are up and running on your machine, we proceed by using a script made to automatically download the latest version of the docker image containing the compilation environment, and start it.  The terminal commands below should work in any shell in any operating system (PowerShell in Windows, zsh in Mac, bash in Linux).\nNote that these instructions are the same as the ones in the repository’s README. Make sure that you have at least 10 GB of free space in your machine:\n\nUsing a terminal, first clone the git repository where the start script is:  \n# cd to your preferred location. For example:\n# mkdir ~/gitrepos\n# cd ~/gitrepos\ngit clone https://github.com/Philosophie-ch/dltc-env\ncd dltc-env\n\nNow copy the .env.template file into .env and edit its contents:\ncp .env.template .env\ncode .env\nThis will open the file .env in VSCode. In VSCode you may see a message “Git repositories were found… do you want to open them?”, you can close it or ignore it.\nNOTE: you can navigate with your usual file explorer to the “dltc-env” folder, which will be located where you cloned it in step 1 (namely, within your Github folder). If you use the file explorer, you will however not immediately see the .env. To see it in the file explorer, you need to enable viewing hidden files. The way to do this depends on which system you are using. On the other hand, if you are viewing the contents of dltc-env in the VSCode text editor (for isntance, if you typed the code .env command above), the file explorer within VSCode will show you the .env files. If you are viewing the files that way, you do not need to enable viewing hidden files.\nThe contents of .env look like this:\nARCH=\"amd64\"  # put \"arm64\" if on an Apple Silicon Mac (M1, M2, etc.; non-Intel)\nDLTC_WORKHOUSE_DIRECTORY=\"/YOUR/PATH/TO/Dropbox/philosophie-ch/dltc-workhouse\"\nDOCKERHUB_TOKEN=\"token_in_the_institutional_setup_page\"\nThis is a key-value file. ARCH, DLTC_WORKHOUSE_DIRECTORY, DOCKERHUB_TOKEN are keys, and the strings within quotes, amd64, /YOUR/PATH..., “token_in_the…” are their values. You need to put the values appropriate to your local system. You should set the values as follows, and save the file:\n2.1 ARCH: the “architecture” of your machine. If you are on a Windows machine, a Linux machine, or a Mac with Intel chips (not Apple Silicon), leave this to amd64. If you have a Mac with Apple Silicon chip, set it to arm64.\n2.2 DLTC_WORKHOUSE_DIRECTORY: the full path, on your local machine, to the dltc-workhouse folder inside Dropbox. Here’s one way to get it. Open a Terminal. Navigate (using cdcommands ) to that folder, and run the command pwd (‘present working directory’). It will display the full path to that folder, e.g. /Users/janedoe/Dropbox/Philosophie-ch/dltc-workhouse/ on a Mac.\n2.3 DOCKERHUB_TOKEN: the login token (not the “password”) for the dockerhub account. You can find it in the “Institutional set-up” page in our Google Drive, “Passwords” section.\nDo not forget to save .env when you have done this.\nNow you can execute the start script. From the folder dltc-env, in Linux and Mac run:\n./dltc-env-start.sh\n(Equivalently: sh dltc-env-start.sh. When a file is a script, for safety reasons it cannot be launched just by typing the file name, you have to either launch the shell script executor sh followed by the name of the script, or, you have to precede the script by its path. Since here, the script dltc-env-start.sh is in your current folder, the path to it is: ./. The dot is the current folder, and the slash separates the folder name, ., from the script file name, dltc-env-start.sh. This is why the full path is ./dltc-env-start.sh.)\nOn Windows, run:\n.\\dltc-env-start.ps1\n(The idea is as before, . is the current folder and \\ the (Windows-style) separator. There is probably an equivalent such as ps dltc-env-start.ps1 but I don’t know it.)\n\n\nThe last command downloads an “image” of Dialectica’s “compilation environment” (a mini Linux system containing Pandoc, LaTeX and other utilities), and it runs this image in a mini-machine simulated by your computer called a Docker “container”. The first time you execute this command it will take a while as it needs to download the image, which is about 5-10Gb. But this will only happen the first time it’s used, and where there are updates of the images online.\nIf the compilation environment starts correctly, you will see a message like the following:\nLogged in to Docker Hub as philosophiech\n\nlatest-arm64: Pulling from philosophiech/dltc-env\nce9ebea987c2: Pull complete \n42ca1070b43f: Pull complete \n3d93737c6ee5: Pull complete \n...\n61e48dddaaa9: Pull complete \nDigest: sha256:bc24161a6b997899ce3881246ee17a4aeae03e6885ab77e1b18cdb2092dc2248\nStatus: Downloaded newer image for philosophiech/dltc-env:latest-arm64\ndocker.io/philosophiech/dltc-env:latest-arm64\n\nSuccessfully pulled latest dltc-env image for arm64; now logged out of Docker Hub\n\nStarting dltc-env container, please wait...\n[+] Running 1/2\n⠴ Network dltc-env_default  Created                                     0.5s \n✔ Container dltc-env        Started                                     0.5s \n\n...success!\n\nCareful that the last line success may display even if there was an error! If you encounter one of the errors below, try to fix it and run the script again.\nErrors you may encounter when running the dltc-env-start script:\n\nThe error message: “dltc-env-start: No such file or directory”. Your terminal is not located in the dltc-env folder, itself in your GitHub repositories folder. Use cd commands to change its location to the dltc-env folder.\nThe error message: “DLTC_WORKHOUSE_DIRECTORY does not exist.”\nIf you get this error there must be something wrong with the path you put as the value of DLTC_WORKHOUSE_DIRECTORY in the .env file. If you’re not sure what’s wrong, try the steps of finding out the full path of Dialectica’s workhouse folder before, and check you have saved .env.\nThe following error:\n! dltc-env The requested image's platform (linux/amd64) does not match the detected host platform (linux/arm64/v8) and no specific platform was requested 0.0s \nThis is because the value for ARCH in the .env file is wrong, so the script has downloaded an image that cannot be ran on your machine. Double-check it. Once you have fixed it, you should (1) delete the container and its image and then (2) re-run the script. To delete the container and its image: open the Docker app, go the Containers tab (box-like icon on the left tab), look if the list contains an item named dltc-env, and click the Trash icon next to it; then go to the Images tab (empty cube icon on the left tab), look whether it contains an item named philosphie-ch/dtlc-env and click the Trash icon next to it. If these items don’t show up, you have nothing to delete. Once you’ve deleted any container/image remaining, you can start the script again.\nAn error like the following:\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n\nSuccessfully pulled latest dltc-env image for arm64; now logged out of Docker Hub\n\nStarting dltc-env container, please wait...\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n\n...success!\n(Note that the “success” messages are incorrect here.) This “Cannot connect to the Docker daemon error” is because Docker (the application that runs the compilation environment ‘image’ in a ‘container’) is not started. Launch the Docker application and try running the dltc-env-start script again.\nAn error message like the following:\nMacBook-Air:dltc-env sannahirvonen$ ./dltc-env-start.sh\nLogged in to Docker Hub as philosophiech\n\nlatest-amd64: Pulling from philosophiech/dltc-env\n29202e855b20: Pull complete \n04c6e9d3a90b: Pull complete \n...\nwrite /var/lib/docker/tmp/GetImageBlob1011053309: input/output error\n\nSuccessfully pulled latest dltc-env image for amd64; now logged out of Docker Hub\n\nStarting dltc-env container, please wait...\n[+] Running 1/1\n✘ Container dltc-env  Error while Removing                               10.3s \nError response from daemon: container 4ccdac99d0fb7b215bebca79fc1b752d14a1e78575efa547b9fd46a1a4dac282: driver \"overlay2\" failed to remove root filesystem: unlinkat /var/lib/docker/overlay2/4d90b7b3fe97f8cb8470efce26625765b4dcc6699b73ee56d041859dc9071f9b: read-only file system\n[+] Running 1/1\n✘ dltc-env Error                                                          0.1s \nError response from daemon: error creating temporary lease: write /var/lib/desktop-containerd/daemon/io.containerd.metadata.v1.bolt/meta.db: input/output error: unknown\n\n...success!\nWe don’t know why this happens. But if it does, try deleting the container and image and restarting the script. To do this, open Docker app. Go the Containers tab (box-like icon on the left tab), look if the list contains an item named dltc-env, and click the Trash icon next to it; then go to the Images tab (empty cube icon on the left tab), look whether it contains an item named philosphie-ch/dtlc-env and click the Trash icon next to it. If these items don’t show up, you have nothing to delete. Once you’ve deleted any container/image remaining, you can start the script again.\nAn error message like the following:\nError response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/host_mnt/Users/janedoe/.gitconfig\" to rootfs at \"/home/copyeditor/.gitconfig\": mount /host_mnt/Users/janedoe/.gitconfig:/home/copyeditor/.gitconfig (via /proc/self/fd/7), flags: 0x5000: not a directory: unknown: Are you trying to mount a directory onto a file (or vice-versa)? Check if the specified host path exists and is the expected type\nThis is because Git is badly configured. More precisely, you have a .gitconfig folder at the base of your user directory, while .gitconfig should be a file. (It won’t show up in the browser because ‘.xxx’ items are hidden, but you can see it with the option ‘show hidden files’ or by running the ls command in a terminal located at the root of your user directory). We have encoutered this error and we don’t know why it happens.\nWe solved it by removing the folder and creating an empty .gitconfig file. On Linux/MacOS, remove the folder with:\nrm -r ~/.gitconfig\nAnd create an empty .gitconfig file with:\ntouch ~/.gitconfig\n\n\n\n30.1.3 Starting and stopping the compilation environment container\nThe compilation environment that produces output runs in a ‘Docker container’ that can be started or stopped. It’ll stop if you close Docker or restart your computer. Optionally, you can stop the container when you finish working on your copyediting tasks and restart it when you start again. (If you don’t stop it, it won’t slow down your computer in any noticeable way but it’ll use a bit of memory but shouldn’t slow down your computer in a noticeable way.)\nStarting and stopping containers can be done from the terminal or from the Docker app. From the terminal, use:\ndocker stop dltc-env\n\nto stop it, and\ndocker start dltc-env\n\nto start it again.\nFrom the Docker app, go to Containers tab: a box icon on the top left. (Don’t forget to close the Settings if you haven’t.) In the list of containers you should see one called dltc-env. It’s greyed out if stopped, green if started. In the Actions column, there’s a play or stop icon you can use to start or stop it.\n\n\n30.1.4 Setup: VSCode\nWhile not strictly mandatory, it is highly recommended to use Visual Studio Code (VSCode) for the copyediting work. VSCode is a modern, general text editor suited for all tasks programming and writing. It has support for state-of-the-art software tools such as Docker, and through its vast market of extensions, provides great support for Markdown, LaTeX, HTML, and Quarto. It is lightweight, not tied to any specific programming or writing language, and doesn’t need specific programming languages installed.\nFor this subsection, it is recommended that you create a GitHub account, and then connect to it in VSCode.2\n\nCreate an account on GitHub.\n\n\nNow set up VSCode. VSCode has a “profile” functionality: you can create distinct profiles, where each profile has its own set of tools (“extensions”). Initially, there’s only the “default” profile. We recommend you create a specific “dialectica copyeditor” profile.\n\nCreate a ‘profile’ to manage the extensions you need for copyediting.\nIn the vertical toolbar to the left, click on the cogwheel (Settings) and choose Profiles &gt; Create profile…\nGive a name to your profile e.g., “dltc-copyediting” and use the default options\n\n\nYou can switch profiles by going to the Settings cogwheel &gt; Profiles.\nNext, we install useful Extensions in this profile.\n\nInstall the “Dev Containers” extension (by Microsoft). On the left toolbar, click on “Extensions” (the cube pile), and search for “Dev Containers”. It should show up with an “Install” button. Install it.\nInstall the “Remote Explorer” extension (by Microsoft). On the left toolbar, click on “Extensions” (the cube pile), search for “Remote Explorer” and install it. (If you don’t see an install button, that means it’s already been automatically installed at the previous step; you can move on to the next step.)\nConnect VSCode to the Dialectica container. This requires that the container is started (see above). On the left bar, you should see a Remote Explorer tab (a screen with the &gt;&lt; logo). Click on it, it display a navigation column on the left. You should find a “Dev Containers” section there, and within it, the dtlc-env container name. (If you don’t already see the name, click on “Dev Containers” to expand it. If after that you still don’t see it, make sure the container is started.) Hover on the dltc-env and click on the right arrow just next to it (“Attach in Current Window”). You get a warning that attaching to a container may execute arbitrary code: accept (“Got it”).\n\n\nThis has ‘connected’ the present VSCode window to the container (i.e., the virtual company computer that runs Dialectica’s compilation environment to generate output).\nFinally, install some extensions that are useful for copyediting in markdown and LaTeX and Quarto, and to preview outputs.\n\nOn the left toolbar, click “Extensions”. Search and install all of the following:\n\n\nLaTeX Workshop (by James Yu)\nMarkdown All in One (by Yu Zhang)\nQuarto (by Quarto)\nHTML Preview (by George Oliveira)\n\n\nOther recommended extensions are:\n\nError Lens (by Alexander)\n\n\n\n\n30.1.5 Optional extra setup: connect VSCode to GitHub\nOptionally, connect VSCode to GitHub. \n\nInstall “GitHub Pull Requests and Issues” extension. On the left toolbar, click on Extensions, and search and install the “GitHub Pull Requests and Issues” extension.\nConnect to your GitHub account. On the left toolbar, look down for ‘Accounts’, and connect to your GitHub account. (If you’re on a public Wifi this may not work; use a private one or your mobile hotspot.)\nThen, clicking again on ‘Accounts’, enable both ‘Settings Sync’ and ‘Turn on Cloud Changes’. This will synchronize your VSCode settings in any device you connect it to your account.\n\nRecommended. Tell VSCode not to report your activity to Microsoft (they spy us enough already). Click on the cogwheel icon at the bottom of the vertical toolbar on the left, and go to “Settings”. On the page that appears, use the search bar at the top to search for “telemetry”, and set the “Telemetry Level” to “off”.\n\n\n\nIf you have a GitHub pro account, we also recommend:\n\nGitHub Copilot (by GitHub)\nGitHub Copilot Chat (by GitHub)\n\n\nIf you have a university student account and email, you can be granted a GitHub pro account for free. Copilot is an AI assistant that can help you code in general, including help you with Markdown and LaTeX, both directly in VSCode when you edit files and in a chat button provided by the Chat extension (that will appear in the left toolbar).\n\n\n30.1.6 Checking that your setup is right\nWhenever you start VSCode:\n\nMake sure that you’re using the profile you created. If you did create a specific profile for dialectica copyediting, you should see an acronym for it (e.g. “DL”) on the Settings cogwheel at the bottom left. If you didn’t and are using the default profile, you’re fine.\nMake sure that the Extensions installed above are installed “inside” the container. This explained below.\nIf you have connected VSCode to GitHub, check that you’re connected to your GitHub account (in “Accounts”), and that you’re using the profile you created (in “Settings &gt;&gt; Profiles”).\n\n\nTo ensure that VSCode Extensions are installed “inside” the container:\n\nClick the “Extensions” button of the left toolbar. Clear any search in the search bar. Now, you will see a “Local - Installed” section that lists the extensions we’ve installed. (Note that this section is collapsible: if there’s a &gt; next to “Local Installed”, click on it to expand.) You might see that some extensions bear a blue label “Install in container”. If they do, click on the label to install these extensions “within” the container. If none shows that label, you’re fine. Beware that you might need to scroll down to review all extensions in the “Local - Installed” section.\nCheck that your current window is “attached” to Dialectica’s container. The bottom of VSCode’s window is a status bar. To its left there is a &gt;&lt; icon that tells what the window is connected to. If it shows &gt;&lt; Container philosophiech/dltc-env..., your window is attached to Dialectica’s container (the virutal company computer that will produce outputs). If it’s just a green &gt;&lt; symbol, it’s not attached. You need to attach it as follows:\n\nClick the “Remote Explorer” (screen with the &gt;&lt; logo) on the left toolbar. It opens a navigation column. At the top you should see a “Dev Containers” section. (It’s collapsible: if you see the &gt; symbol left of “Dev Containers”, click it to expand.) You should see the container named dtlc-env with a green badge. If there’s no green badge on it, the Dialectica container isn’t connected. Click the right arrow right next to dltc-env (it says “Attach in current window” if you hover the mouse pointer over it for a few seconds).\nIf all goes well, after the window reopens you should see &gt;&lt; Container philosophiech/dltc-env... in the bottom status bar, on the left.\n\n\n\n\n30.1.7 Working ‘inside’ a container\nOnce you attached a VSCode window in a container, you’re working inside that container. What does that mean? In VSCode you can run commands on a terminal. Normally, terminal commands are run on your own system. But when a VSCode window is attached to a container, its terminal runs commands on that container—that is, on the virtual company computer we’ve just created.\nThings you do inside the container stay in the container, so even if you broke it nothing bad would happen. The one exception is the dltc-workhouse folder. Within the container, there’s a user home folder than contains a folder called dltc-workhouse folder. That folder is the dialectica folder of your system. It’s shared between your own system and the container. You do not want to damage or delete them. Beware in particular of rm (remove) commands, which deletes files and folders without seeking confirmation.\nNow, let’s view the dltc-workhouse folder in VSCode. On the leftbar select the Explorer icon (a documents icon). You will see an “Open folder” button. It opens a search bar at the top, which should already list some options (namely, folders in the container), including dltc-workhouse. Click on that; the window will reopen and now the Explorer on the left should show you the files within the dltc-workhouse folder.\nThen, let’s try the terminal within VSCode. If you don’t already see the Terminal at the bottom of your VSCode window, go to the menu Terminal &gt; New Terminal. It’ll create one at the bottom. You’ll see a line:\ncopyeditor@dltc-env:~/dltc-workhouse$\n\nThis is a “prompt”: it waits for your to run a command. It consists of three parts: username, here copyeditor (that’s your identifier within the container), current location, here ~/dltc-workhouse and the $ sign (meaning ‘waiting for your command!’). What is the current location? A terminal is always ‘located’ in some folder, this is the place ‘where’ command are run. Here your location is within the container. The ~ is an abbreviation for the user’s home folder; here it is the home folder of the user copyeditor within the container.\nNote: your container is a virtual Linux machine. So, it’s terminal uses Linux / MacOS terminal commands (cd, ls, cp, rm), not the Windows ones (cd but otherwise dir, copy, del).\nSee Appendix A on how to use a terminal, in particular how to navigate to relocate it in a different folder. Note that you can always run:\npwd\n\nTo display the full path of your “present working directory”, that is, the folder the terminal is located at.\nLet’s now try generating an output. Relocate the terminal within an article folder. Choose an article in progress, not a finished one! The article folder should contain a proper master.md file (if you can’t find an article in progress with one, see details below on how to create one). Run:\ndltc-make off1html\n\nThis should generate a HTML output of the article in the same folder. (If in doubt, delete the current HTML output and run the command again.)\nTip. There are several ways you can relocate a VSCode terminal to a specific folder. You can use the cd commands. But you can also use the two following options. Note that these clear up the window, closing any files you might have open, so only use them if you want a clean window:\n\nUse the Explorer (click the Explorer icon on the leftbar), browse the folders, right-click a folder an select “Open in Integrated Terminal”. Note however that this creates a clean window, so it closes any files you have already open in VSCode.\nOpen the folder in question as root folder. Above we’ve opened the dltc-workshouse folder, so VSCode’s Explorer on the left shows you all the folders it contains. You could decide to open some specific issue or article folder as your base folder instead. In the menu select File &gt; Open Folder…. This opens a search bar when you can search and select a folder to open. When the window refreshes with that folder as base folder, your terminal is then located in that folder.\n\n\n\n30.1.8 A warning\nBe careful when you run commands in dltc-workhouse and its subfolders. While the container in general is isolated from your system (hence whatever you change or install in it doesn’t affect your sytem), the exception is the dltc-workhouse, which is the one containing the article files on your system. You do not want to damage or delete them. Beware in particular of rm (remove) commands, which deletes files and folders without seeking confirmation.\nWe can install new tools or modify existing ones in the environment depending on the needs of the copyediting team. Please contact Luis Bordo at luis.bordo@philosophie.ch for any such request.\n\n\n30.1.9 Advanced: using the container directly from a terminal\nAdditionally, if you know what you’re doing, you can start a shell within the container without using VSCode. With this, you can use the terminal directly to compile articles. Altough rather clumsy as an approach, this would allow you to, for example, keep using RStudio to work on copyediting tasks and then compiling the articles separatedly in a terminal using the container.\nFrom anywhere in your system, do:\ndocker exec -ti --volume=\"YOUR/PATH/TO/Dropbox/philosophie-ch/dltc-workhouse:/home/copyeditor/dltc-workhouse\" philosophiech/dltc-env:latest bash\n\nIf this worked properly, you should see your prompt change to copyeditor@dltc-env. Here, you can now navigate to ~/dltc-workhouse, where you will find the usual Dropbox files for copyediting.\nNote that you can execute the command above in an integrated terminal in any other editor (such as RStudio). This will give you a shell inside the container with access to all the tools you need for the copyediting work.\n\n\n30.1.10 Troubleshooting Installation\n\n30.1.10.1 Common issues\n\nProblem: In VSCode, connected to the container, you don’t see any file in ‘dltc-workhouse’ when you open it\n\n\nSolution: this is most likely due to not properly setting your .env file. Go to the folder in which you cloned the GitHub repository for the compilation environment, copy the .env.template file to a new file called .env. Now open this file, and change the value of “DLTC_WORKHOUSE_DIRECTORY” to the full path of where the dltc-workhouse folder (inside Dropbox) is.\nNote that, for Windows, you need to change “\\” for “/” in the path name. That is, if your folder is in “C:\\Users\\…”, you must change it to “C:/Users/…”.\n\nProblem: while working in the container, you see an error with code “-9”, or anything related to being “out of memory”\n\n\nSolution: you’re running a heavy task inside the container, and it’s eating up a lot of resources in your machine, so docker is killing the task. This could happen, for example, when compiling PDFs with the big bibliography file. Go to your Docker settings and allow your containers a higher limit on the CPU (or “cores”) and on “memory” (RAM). At least 3/4 of the highest limit should be enough in most cases, but if it’s not enough you can go up to 100%. Just note that if you do this (allowing 100% use of resources), the task is very intense and you’re on an old computer, your machine could crash.\n\n\n30.1.10.2 Installing WSL version 2 on Windows\nNote: if you don’t feel comfortable modifying the options of your machine’s BIOS or UEFI, get in contact with Luis Bordo at luis.bordo@philosophie.ch to guide you through personally. Otherwise, follow the instructions below.\n\nEnable ‘virtualization’. To do this, we need to go to the computer’s BIOS or UEFI. If you know how to do this, do it as you know and ignore the instructions below. Otherwise, follow these steps. WARNING: this will restart your computer:\n\nGo to Settings\nGo to Update and Security (or a setting with a similar name)\nGo to “Recovery”\nClick on Restart now in the section “Advanced start-up”\n\nClick on “Troubleshoot”\nClick on “Advanced Options”\nClick on on the option that mentions either “UEFI” or “BIOS”\nClick on “Restart”. This will restart your computer and automatically send you to the BIOS or UEFI settings\n\nNow this depends on your specific machine, but under some field called “Security”, you should find a sub-field called “Virtualization”. Inside this sub-field you should Enable all options\nSave and exit the BIOS or UEFI. IMPORTANT: you need to SAVE before exiting, otherwise you will need to redo the steps above\nTo check that virtualization is enabled, go to the Task Manager, to the Tab TODO\n\nEnable ‘wsl version 2’. Open PowerShell as Administrator, and then:\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\nwsl --set-default-version 2\n\n\nIf something goes wrong, follow the instructions given in PowerShell\nTo check if all of this worked, do wsl --version in Powershell",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Dialectica new house style outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#prepare-an-article-or-issue-folder",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#prepare-an-article-or-issue-folder",
    "title": "30  Dialectica new house style outputs",
    "section": "31.1 Prepare an article or issue folder",
    "text": "31.1 Prepare an article or issue folder\nYou’ll need to add the following file to your article working folder to be able to generate outputs.\n\nA master file, which contains issue-level metadata needed to generate your article outputs.\n\n\n31.1.1 Create a master file\nCopy a master.md file into your article folder. You can take one from another article in the same issue, or the template one at template/X.X/copyeditors-scripts. Beware: you can take the master file in the issue folder, but if you do so you’ll need to modify paths in the imports field (see below).\nOpen the file in text editor. It should already contain an imports metadata field that consists of a list of one or more files (each item on a single line starting with a dash), for instance:\nimports:\n- 01-author.md\n- 02-author.md\n\nYou should amend it to contain just one item referring to your file. If your markdown file is smith_j-2023.md you should make it:\nimports:\n- smith_j-2023.md\n\nNote on issue master files. Issues have master files too, where located in issue folders. Their imports field normally contain a list of all article files for that issue, including which subfolder they’re in, for instance:\nimports:\n- 01-jones/jones_s-2023.md\n- 02-smith/smith_j-2023.md\n- ...\n\nTherefore, if you copy an issue master file within an article folder, or the other way round, you should make sure you add (issue master file) or remove (article master file) the subfolders names as required.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Dialectica new house style outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#generate-outputs",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#generate-outputs",
    "title": "30  Dialectica new house style outputs",
    "section": "31.2 Generate outputs",
    "text": "31.2 Generate outputs\n\n31.2.1 Run a command in the terminal\nYou can generate outputs by running the dltc-make command in a terminal inside the container containing the compilation environment.\n\nIn VSCode (or RStudio), if you’ve created a project for your article, it’s best to use the integrated terminal (in the “Terminal” menu in VSCode, “Tools” in RStudio). Make sure that you are “located in” the project’s folder by executing pwd. If the path doesn’t correspond to your project’s, then navigate with cd to where your project is.\nIf you’re using a separate terminal application, you’ll need to navigate with cd to the folder where your article is.\n\n\nSee Appendix A for help.\n\n\n31.2.2 Short rendering commands\nRendering commands can be executed in a article’s folder or in an issue folder. All these commmands must be added to dltc-make, e.g.:\ndltc-make offprints\n\nSingle-article outputs will be named after the source file, e.g. smith_j-2020.pdf. Issue outputs will be named after the issue DOI, e.g. dial.v74.i1.pdf or dial.v75.i2-book.pdf.\n\nArticle folder rendering commands\n\n\n\n\n\n\nCommand\nOutput\n\n\n\n\n(empty)\narticle in HTML\n\n\noffpdf\noff1pdf\narticle in PDF\n\n\nofftex\noff1tex\narticle in LaTeX. Useful to debug when the PDF generation crashes: try lualatex smith_j-2020.tex to see error messages.\n\n\nrefs\ngenerate a list of references cited in the article. Saved as &lt;article_name&gt;.bib.txt. Only works when the references have been turned into citations and a bibtex file is provided.\n\n\n\n\nIssue folder rendering commands\n\n\n\n\n\n\nCommand\nOutput\n\n\n\n\n(empty)\nfirst article in HTML\n\n\nall\nissue pdf, all articles PDF + HTML\n\n\nallhtml\nall offprints (=articles) in HTML\n\n\noffprints\noff\nall offprints HTML and PDF\n\n\nvol\nvolpdf\nissue PDF\n\n\noff2\noff2html\nHTML of the second article (i.e. second item in the masterfile’s imports list).\n\n\noff2pdf\nPDF of the second article (i.e. second item in the masterfile’s imports list).\n\n\noff7tex\nLaTeX of seventh article\n\n\nvoltex\nLaTeX of the issue\n\n\nrefs\ngenerate list of references cited for each article. Saved as &lt;article_name&gt;.bib.txt. Only works when for articles where references have been turned into citations and given in bibtex files.\n\n\nbare\nbaretex\nIssue covers only, PDF (bare) or LaTeX (baretex). articles (also baretex). Useful for cover design.\n\n\n\n\n\n31.2.3 Rendering options\n\nProof mode\n\nAdd --proof or -p at the end of your command (separated by a space):\n\n\ndltc-make off2 --proof\ndltc-make off3pdf -p\n\n\nThis only affects PDF output.\n\nVerbose or quiet\n\nAdd --verbose or -v to get a detailed log of the rendering process. Useful for debug. You can save the output in a log file like so:\ndltc-make off2pdf -v 2&gt; out.log \nThe 2&gt; tells the computer to “redirect” the error/information output to a file named out.log.\nYou can make the output quieter with --quiet or -q. Though certain programs executed during the rendering process may still display error or output messages. If you don’t want to see anything just “redirect” the output to a file with sh make.sh … 2&gt; out.log.\n\n\n\nSingle letter options can be combined: -pv is short for --proof —verbose.\n\n\n31.2.4 Long rendering commands\nRendering commands can also be given in key-value form:\ndltc-make mode=offprint chapter=3 format=pdf\n\nmode includes “offprint” aka “off”, “vol” aka “issue”, “bare” , “refs”\nformat includes pdf, html, tex aka latex (also epub, jats but we don’t generate these yet)\nchapter includes chapter numbers.\n\n\nThe advantage is that you can specify multiple modes and formats separated by commas:\ndltc-make mode=off,refs chapter=3,4,5\n\nRendering options like --proof can be combined with long rendering commands.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Dialectica new house style outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#advice-on-html-vs-pdf",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#advice-on-html-vs-pdf",
    "title": "30  Dialectica new house style outputs",
    "section": "31.3 Advice on HTML vs PDF",
    "text": "31.3 Advice on HTML vs PDF\nHTML is best when you start working on an article because it’s much faster and less error-prone than PDF. HTML only fails to produce an output if your document’s metadata is ill-formed or if there’s a bug in the “filters” we use to format outputs.\nPDF is best for the latter typesetting stages when you need to check that the fine-grained outputs look right, that advanced LaTeX formulas or images work correctly, that there is no awkward page break and so on.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Dialectica new house style outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/61-dialectica-new-house-outputs.html#footnotes",
    "href": "chapters/dialectica/61-dialectica-new-house-outputs.html#footnotes",
    "title": "30  Dialectica new house style outputs",
    "section": "",
    "text": "To check which processor you have, click on the Apple icon in the top left corner of your screen and select “About This Mac” from the dropdown menu. Look for the “Processor” field in the window that opens.↩︎\nIf you encounter some issue with these instructions, check out the [official VSCode documentation instead][https://code.visualstudio.com/docs/sourcecontrol/github].↩︎",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Dialectica new house style outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html",
    "title": "31  Troubleshooting outputs",
    "section": "",
    "text": "31.1 Cannot run pandoc-crossref because it is not from a trusted developer\nMacOS-specific error. Solution: close the alert—don’t chose “Move to Bin”! In Finder, go to the template/X.X/filters folder, where X.X is the latest version of the template. ⌘-click the file pandoc-crossref (not pandoc-crossref.exe nor pandoc-crossref-nix). Chose “Open”. You will get the same alert but this time with the option to Open: select it. Nothing will happen but after that the system will trust the file and you’ll be able to generate outputs.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#html-empty-or-pdf-with-cover-only",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#html-empty-or-pdf-with-cover-only",
    "title": "31  Troubleshooting outputs",
    "section": "31.2 HTML empty or PDF with cover only",
    "text": "31.2 HTML empty or PDF with cover only\nThe maker hasn’t find your article source. You probably forgot to update the master file’s imports list with your source file name.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#warning-pandoc-crossref-was-compiled-with-pandoc-x.x.x-but-is-being-run-through-y.y.y-etc.",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#warning-pandoc-crossref-was-compiled-with-pandoc-x.x.x-but-is-being-run-through-y.y.y-etc.",
    "title": "31  Troubleshooting outputs",
    "section": "31.3 WARNING: pandoc-crossref was compiled with pandoc X.X.X but is being run through Y.Y.Y etc.",
    "text": "31.3 WARNING: pandoc-crossref was compiled with pandoc X.X.X but is being run through Y.Y.Y etc.\nIgnore this if the first two digits X.X and Y.Y are the same, e.g. “pandoc 3.1.2 but is being run through 3.1”. It’s small mismatch between the Pandoc version and the cross-references filter’s version, normally harmless. You may remind the workhouse administrator to update the cross-references filter, or check that your pandoc is up to date.\nIf the Y.Y number is 2 or more lower than the X.X, e.g. “pandoc 3.4 but being run through 3.1” then you need to update your Pandoc.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-message-about-stix-two",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-message-about-stix-two",
    "title": "31  Troubleshooting outputs",
    "section": "31.4 Error message about Stix TWO",
    "text": "31.4 Error message about Stix TWO\nPDF-specific. Means that you haven’t installed the Stix Two font.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-pdf-output-not-produced",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#error-pdf-output-not-produced",
    "title": "31  Troubleshooting outputs",
    "section": "31.5 Error: PDF output not produced",
    "text": "31.5 Error: PDF output not produced\nPandoc can’t generate a PDF. There are, unfortunately, many reasons why this can happen. Essential background first: PDF generation happens in two stages:\n\nPandoc converts Markdown to LaTeX.\nA LaTeX engine converts LaTeX to PDF.\n\n\nFirst we need to check that no crash occurs at stage 1.\n\nCheck first that you can generate a HTML of the article. If not, you have first to fix the error in HTML generation. See Section 31.6.\nThen generate a LaTeX file for the article. Section 31.2.2\n\n\nIf Pandoc generates HTML and LaTeX with no crash, then the error happens at the LaTeX stage.\nTypical causes for a LaTeX-stage error are:\n\nTypos in a math formulas.\nAn author’s LaTeX uses some packages or defined commands. These need to be provided to the article as header-includes. (Though sometimes you need to tell the author to simplify their LaTeX first!)\nRaw LaTeX code, either from the author or from you (e.g. added to handle fine-grained spacing) doesn’t work correctly\nAn author’s LaTeX code doesn’t interact well with our template.\nthere’s a bug in our filters or our template\n\n\nTo make progress you should look for the LaTeX error message. It’s displayed in the output when Pandoc fails to produce a PDF. It is on a line that starts with !, such as:\n! Undefined control sequence.\nl.512 \\llbracket\n          \n[1{/usr/local/texlive/2023/texmf-var/fonts/map/pdftex/updmap/pdftex.map}]\n(./smith_j.aux))\n(see the transcript file for additional information)\n... \n(more text)\n...\n\nOr:\n! LaTeX Error: File `image.png' not found.\n\nSee the LaTeX manual or LaTeX Companion for explanation.\nType  H &lt;return&gt;  for immediate help.\n ...                                              \n                                                  \nl.618 \\includegraphics{image.png}\n                        \n[1{/usr/local/texlive/2023/texmf-var/fonts/map/pdftex/updmap/pdftex.map}]\n(./test.aux))\n... \n(more text)\n...\n\nNote that you can get the log as a text file in two ways:\n\nRun the command to generate the pdf but add 2&gt; out.log at the end, e.g. make off1pdf 2&gt; out.log. This will save the log as out.log.\nRun the LaTeX engine on the LaTeX file itself. Make sure you’ve generated a LaTeX file (.tex) and that you have a terminal localed in that folder. Run:\nlualatex --interaction=nonstopmode smith_j-2020.tex 2&gt; out.log\nadapting to your LaTeX file name. If you omit --interaction=nonstopmode the engine will instead stop at any error encountered and ask you what to do; you can enter “x” for exiting. (You can also enter “i” for ignoring the error, but typically that generates further errors down the line, and anyway all LaTeX errors have to be fixed before final output.)\nIf you run the LaTeX engine you’ll get a few ‘artefact’ files: &lt;article-name&gt;.log , .synctex, .aux. You can later erase them; try the command latexmk -C &lt;article-name&gt; (assumes you have latexmk in your LaTeX installation), otherwise erase them but remember to keep your source file .md and any .bib files!\n\n\nThe file out.log is a plain text file, you can open it for inspection in any simple editor and you can send it by email for help.\nEven if you don’t know LaTeX, you can glean some pointers form the LaTeX error message.\n\nThe line number (e.g. l. 618) is the line number in the LaTeX file, not in your source markdown file. Generate the LaTeX output (if it’s not already done) and go to that line in it: you’ll probably be able to figure out which part of the article is generating the error. Note however that it’s not a sure shot: LaTeX error at a line are sometimes due to issues much earlier in the document.\nError messages are often followed by a line split in two, as in:\n! Undefined control sequence.\nl.618 $\\binom{n}{k} = \\fract\n                        {n!}{k!(n-k)!}$\nThis means LaTeX crashed just before the split. Here the split occurs between \\fract and {n!}, so LaTeX crashed at \\fract. Often that is where the error is: the correct command for fractions is \\frac not \\fract. Again, it’s not a sure shot: LaTeX error at a line are sometimes due to issues much earlier in the document.\n\n\nIf that doesn’t help solving the issue, you can still try the time-consuming method below. Otherwise get help from somebody who’s more familiar with LaTeX or the journal’s template coder. Tell them what article generated the error, and copy-paste or attach the error log (or at least the part where the error message is).\nA last resort. More time-consuming but guaranteed result. Isolate the error. Make a copy of your file and trim it down until you can generate a PDF, as follows:\n\nDisconnect the bibliography file. In the metadata block, put a # in front of the bibliography line:\n# bibliography = smith-paper-references.bib\nThis deactivates the line. Try producing a PDF; if you don’t get the error, you know that the source is something in your bibliography file. Otherwise continue.\nIsolate the error by halves. Remove the second half of the document. Try producing a PDF. If you get an error, you know the problem is in the first half; divide it in two, repeat. When you get to the point where you don’t get an error (at a given point), start re-adding parts of the text one by one, until you identify what addition generates the error.\nIn that process you may get “warnings” you didn’t get before, e.g. because you’ve cut out the footnotes associated with a paragraph. Don’t worry about them, they’ll disappear once the relevant bits are re-added.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#sec-house-outputs-html-errors",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#sec-house-outputs-html-errors",
    "title": "31  Troubleshooting outputs",
    "section": "31.6 Errors in HTML generation",
    "text": "31.6 Errors in HTML generation\nErrors in HTML generation should arise from three possible sources only:\n\nwrong formatting of the metadata block in your article source file. You will get a YAML Parse error or the like, possibly with a number indicating the line where Pandoc thinks the error is.\nError in the citation file. You will get a Citeproc error or the like, with possibly a number indicating the line in the .bib file where Pandoc thinks the error is.\nbug in Dialectica’s template. You get a Error running Lua filter or the like. The error message may give you some clue as to which filter is improved.\n\nEmail the template programmer. Include in your email: which source file generates the error, a copy/paste of the error.\nYou can experiment to find more about the error. If it comes from a particular filter and your article sets options for that filter, you may try changing those options.\n\n\n\nupdate the filename in master.md or master-win.md with your markdown source file’s name.\n\nIf you get a pdf file with a cover but no title or article content,\nIf it doesn’t create an html, your pandoc is not updated. Ask us for help if needed.\nIf you get an error message about Stix TWO, you haven’t installed the font in your computer. See above.\nIf you get an error message “Error: PDF output not produced”, Pandoc is probably able to generate html and LaTeX output (you can test with the options above), but the conversion from LaTeX to PDF (done by a LaTeX engine such as pdflatex, xelatex, lualatex) fails. In those cases it’s useful to use the debug option generated above. You will get a .log file that gives you more detail about the error. The file can be opened in RStudio and its structure is explained a bit in the\nTroubleshooting section below.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#a-brief-guide-on-pandocs-pdf-output-logs",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#a-brief-guide-on-pandocs-pdf-output-logs",
    "title": "31  Troubleshooting outputs",
    "section": "31.7 A brief guide on Pandoc’s PDF output logs",
    "text": "31.7 A brief guide on Pandoc’s PDF output logs\nWhen asking pandoc to produce a PDF you can produce an output log (see the sections on generating outputs to see how to do this with RStudio or the terminal).\nThe file begins with [INFO] messages about Pandoc’s source to LaTeX conversion. Typically this is just information about the `filters’ that Pandoc runs, e.g.:\n[INFO] Running filter ../../../resources/filters/abstract-to-meta.lua\n[INFO] Completed filter ../../../resources/filters/abstract-to-meta.lua in 70 ms\n\nThen, [makePDF] messages about the commands Pandoc executes to launch a LaTeX engine that converts the LaTeX to PDF. The “Command line” one tells you which LaTeX engine is used, here lualatex:\n[makePDF] Command line:\nlualatex \"-halt-on-error\" \"-interaction\" \"nonstopmode\" \"-output-directory\" \"&lt;TEMPDIR&gt;\" \"&lt;TEMPDIR&gt;/input.tex\"\n\nThe “Source” message copies the entire LaTeX file that Pandoc sends to the LaTeX engine. It can be useful for a quick look, but it’s more convenient to generate that LaTeX file separately (see how above). When you have LaTeX error messages that give a line number, that is the line number in the LaTeX file (hence it’s easier to find those when you open the separate LaTeX file in a text editor with numbered lines.)\n[makePDF] Source:\n% Options for packages loaded elsewhere\n\\PassOptionsToPackage{unicode}{hyperref}\n\\PassOptionsToPackage{hyphens}{url}\n\\PassOptionsToPackage{dvipsnames,svgnames*,x11names*}{xcolor}\n%\n... % more LaTeX code\n\nThe LaTeX source is usually very long (200-500 lines + at least the number of lines in your markdown source). To find the next section, you can search for [makePDF] Run in the file.\nThe “Run” messages ([makePDF] Run #1, [makePDF] Run #2…) give the LaTeX engine’s output messages. Generating PDFs from LaTeX typically requires several ‘runs’ of the LaTeX engine on the file: the first run generates various bits stored in an auxiliary file (e.g., which page a heading ends in, whether a citation is labelled Smith 2020 or Smith 2020a, …) and the second run uses them to finalize the PDF. Under each [makePDF] Run # you get the full LaTeX Log of the LaTeX engine. This is where you’ll find information, warnings and errors concerning PDF generation. For instance:\n[makePDF] Run #1\nThis is LuaHBTeX, Version 1.13.0 (TeX Live 2021) \n restricted system commands enabled.\n\n(/private/var/folders/j2/zp5ggjhx12xccgy5_wx32tfw0000gp/T/tex2pdf.-12ef5244637e\ndfd8/input.tex\nLaTeX2e &lt;2020-10-01&gt; patch level 4\n L3 programming layer &lt;2021-02-18&gt;\n(/usr/local/texlive/2021/texmf-dist/tex/latex/koma-script/scrbook.cls\nDocument Class: scrbook 2021/03/17 v3.33 KOMA-Script document class (book)\n(/usr/local/texlive/2021/texmf-dist/tex/latex/koma-script/scrkbase.sty\n...\n(/usr/local/texlive/2021/texmf-dist/tex/latex/amsfonts/amsfonts.sty))\n(/usr/local/texlive/2021/texmf-dist/tex/latex/stmaryrd/Ustmry.fd)\nLaTeX Font Warning: Font shape `U/stmry/m/n' in size &lt;5.5&gt; not available\n(Font)              size &lt;5&gt; substituted on input line 70.\n\n...\n...\n\nUnderfull \\hbox (badness 2469) in paragraph at lines 559--574\n[]\\TU/STIXTwoText(0)/m/n/10 I will also adopt the or-tho-dox ap-proach to meta-\nontology, \\TU/STIXTwoText(0)/m/it/10 neo-\n\nUnderfull \\hbox (badness 1158) in paragraph at lines 559--574\n\\TU/STIXTwoText(0)/m/it/10 Quineanism\\TU/STIXTwoText(0)/m/n/10 . Ac-cord-ing to\n neo-Quineanism, a the-ory’s on-to-log-i-cal\n[1]\n[2] [3] [4] [5] [6] [7]\n...\n\nLaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.\n\n)\n(see the transcript file for additional information)\n 780 words of node memory still in use:\n   6 hlist, 2 vlist, 2 rule, 18 glue, 4 kern, 1 glyph, 26 attribute, 72 glue_sp\nec, 26 attribute_list, 1 write, 1 user_defined nodes\n   avail lists: 2:495,3:199,4:152,5:788,6:105,7:7249,8:76,9:429,10:25,11:651\n\nOutput written on input.pdf (18 pages, 113569 bytes).\nTranscript written on input.log.\n\nThe above is a LaTeX log of a file that converts into PDF without error. The overal structure is:\n\nPDF engine: This is LuaHBTeX, Version 1.13.0 (TeX Live 2021)\nDocument class: Document Class: scrbook...\nLaTeX packages used and their own messages: (path/to/package.sty. Here the package Ustmaryrd (a font collection) issues a warning that it’s using a 5pt characters in the absence of 5.5pt characters. input line 70 refers to the line in the LaTeX file.\npages generated: [1] [2] [3] [4] ... indicate that the corresponding page is “shipped out” (generated and saved into the PDF). This means we have no error or warning at pages 1 to 4, yay!\nUnderfull and overfull \\hbox warnings, e.g. Underfull \\hbox (badness 2469). These indicate that LaTeX has generated a less-than-ideal horizontal line: an horizontal line with a bit too much, or not enough, text. Typically nothing to worry about: the text is just slightly more or less spaced than usual. However, very bad cases of overfull can be a table or long equation or image or some unbreakable large item that sticks out of your text block. The easiest is to check for them visually in the PDF output, but if you are after perfection you can check all the ones mentioned in the log. To know which pages they’re on, look for [n] page shipout indicators before and after the overfull message.\nIf compilation runs without error, the end messages. These includes the warning if a LaTeX rerun is needed (LaTeX Warning: Label(s) may   have changed. Rerun to get cross-references right.), which you don’t need to worry about because Pandoc takes care of this, and statistics about the output (Output written on input.pdf (18 pages, 113569 bytes).)\n\n\nIf the PDF building from LaTeX has failed, you will see LaTeX error messages. For instance:\n! Missing $ inserted.\n&lt;inserted text&gt; \n                $\nl.6 \n    \n!  ==&gt; Fatal error occurred, no output PDF file produced!\nTranscript written on dummy.log.\n\nThe error message starts with !, followed by a (more or less useful) description of the message, and an excerpt of the LaTeX code before and after the error occurred, and the line the engine was processing when the error occurred. Here the error was a missing $: in LaTeX $ is used to surround mathematical formulas, and each ‘opening’ dollar sign must be matched with a ‘closing’ one. The error was produced as the engine was processing line 6.\nImportant. The line at which the error occurred is not necessarily the line where the mistake is. For instance, with matching $ the error is at the point where the engine realizes that the number of $ isn’t matched. But typically the mistake was earlier on, where a $ sign should have been.\nTo diagnose and solve LaTeX error you need knwoledge and experience of LaTeX, which is beyond the scope of this guide. It often helps to make an internet search on the error message text.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-errorunknown-option-citeproc",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-errorunknown-option-citeproc",
    "title": "31  Troubleshooting outputs",
    "section": "31.8 pandoc says “Error”unknown option “citeproc””",
    "text": "31.8 pandoc says “Error”unknown option “citeproc””\nYour need to update pandoc to a newer version. “Citeproc” (the pandoc extension that prints bibliographies, and replaces BibTeX/BibLaTeX) is only in versions &gt;2.11 (september 2020). How to update depends on how you’ve installed it: download from pandoc page, or do brew –upgrade (if you’re using homebrew for MacOS), etc.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-pandoc-filename-openbinaryfile-file-not-found",
    "href": "chapters/dialectica/65-dialectica-troubleshooting-outputs.html#pandoc-says-pandoc-filename-openbinaryfile-file-not-found",
    "title": "31  Troubleshooting outputs",
    "section": "31.9 pandoc says pandoc: FILENAME: OpenBinaryFile: file not found",
    "text": "31.9 pandoc says pandoc: FILENAME: OpenBinaryFile: file not found\npandoc doesn’t find one of the files needed.\nThe instructions above work only if:\n\nyour execute the pandoc command while located in the folder that contains your markdown file and its bibliography while. (Learn how to navigate folders in the command line, and go where your markdown file is.)\nthat folder is located three folders down from the workhouse’s base folder (the folder where the processing, resources folders are located). So your markdown file can be in:\nprocessing/2020-01-special-issue/01-michels\nfinished/2020-02-issue/01-elzein\n…\n\n\nThe file resources/defaults.yaml contains our default settings for pandoc, and they also assume that your file is three folder down from the base. This is why we preface resources/defaults with ../../../ in our pandoc command (to indicate that the file is three folder up from where you are when you run pandoc).\nIf you want to run pandoc with our settings on a file that’s located elsewhere, you can use the full command. You can figure it out from resource/defaults.yaml. At present this would be:\npandoc --standalone --pdf-engine=xelatex --citeproc --csl=PATH/TO/dialectica.csl  --template=PATH/TO/dltc-template.tex SOURCE.md -o OUTPUT.pdf\n\nbut the details might change as we update our defaults. You may add any additional option you wish. PATH/TO/ should be replaced with the path from your folder to the templates. For instance, if the templates and style files are respectively in in:\n\njournal-new/design/templates\njournal-new/biblio/\n\n\nand your manuscript is in:\n\njournal-new/articles/issue-01/\n\n\nYou could try:\npandoc --standalone --pdf-engine=xelatex --citeproc --csl=../../biblio/biblio-style,csl  --template=../../design/templates/dltc-template.tex SOURCE.md -o OUTPUT.pdf\n\nThat is, ../../ going two folders up (hence at journal/new) and from there down biblio in one case and design/templates in the other.\nYou can also create your own defaults file mydefaults.yaml in a text editor, with contents like:\nstandalone: true\npdf-engine: xelatex\nciteproc: true\ncsl: ../../biblio/biblio-style,csl\ntemplate: ./../design/templates/dltc-template.tex\n\nSave it next to your manuscript and run pandoc with:\npandoc -d mydefaults SOURCE.md -o OUTPUT.pdf",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Troubleshooting outputs</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/70-dialectica-titles.html",
    "href": "chapters/dialectica/70-dialectica-titles.html",
    "title": "32  Title and subtitle",
    "section": "",
    "text": "32.1 Short title\nThe metadata fields title and, if the article has a subtitle, subtitle must be present. They may contain markdown formatting and special symbols, but no explicit linebreaks.1\nIn addition, you may provide:\nHere is an example using all the available fields. They are explained in detail in the sections below.\nIf the title is too long to fit in the header, you can specify a short title in addition:\nThis will be used in the table of contents too.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Title and subtitle</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/70-dialectica-titles.html#short-title",
    "href": "chapters/dialectica/70-dialectica-titles.html#short-title",
    "title": "32  Title and subtitle",
    "section": "",
    "text": "title: An extremely long-winded and verbose title about a range of topics including but not restricted to the weather\nshorttitle: A long-winded title about the weather\n\n\n\n32.1.1 Linebreaks in a title and subtitle\nRequires: dialectica templates.\nIn LaTeX/PDF output it is sometimes useful to manually specify a line break within the title and/or subtitle. There are two fields to provide this, title-latex and title-cover:\ntitle: A Very Long Title that Can be Broken in Various Places\ntitle-latex: |\n  A Very Long Title that \\\n  Can be Broken in Various Places\ntitle-cover: |\n  A Very Long Title that Can be\\\n  Broken in Various Places\n\nIn a metadata field, the \\ at then end of a line specifies a linebreak. Warning: it must be immediately followed by an end of line (no spaces!).\n\ntitle-latex controls the title on the first page (“chapter” title). It also sets the offprint cover page unless title-cover is also supplied.\ntitle-cover controls the title on the offprint’s cover page. If you want title-latex to modify the first page’s title only, simply insert title-cover with the same content as title.\n\n\nThe title field must be provided, even if title-cover and/or title-latex are given.\nBy default titles on the offprint’s cover are of LaTeX size \\Huge if they are less than 31 characters long, otherwise the slightly smaller size \\huge. You can specify a custom LaTeX size if needed (\\Huge, \\huge, \\LARGE, \\Large, \\large etc.) with the title-cover-size field. This only affects LaTeX/PDF output.\ntitle-cover-size: \\huge\n\nThe same options are available for subtitles: use subtitle-latex, subtitle-cover and subtitle-cover-size. The default size for subtitles on offprint covers is \\LARGE.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Title and subtitle</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/70-dialectica-titles.html#subtitle-in-the-table-of-contents",
    "href": "chapters/dialectica/70-dialectica-titles.html#subtitle-in-the-table-of-contents",
    "title": "32  Title and subtitle",
    "section": "32.2 Subtitle in the table of contents",
    "text": "32.2 Subtitle in the table of contents\nThe subtitle is used in three places. On the paper’s first page and on the offprint’s cover, it is printed below the title, in smaller font. It’s also used in the table of contents, where it’s printed after a column:\ntitle: Frankstein\nsubtitle: The Modern Prometheus\n\nOutput in the table of contents:\n\n\nFrankenstein: The Modern Promoetheus\n\n\nYou can override the colon by specifying a subtitle separator, e.g. a simple space:\ntitle: So What?\nsubtitle: My Quest for the Meaning of Life\nsubtitleseparator: ' '",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Title and subtitle</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/70-dialectica-titles.html#footnotes",
    "href": "chapters/dialectica/70-dialectica-titles.html#footnotes",
    "title": "32  Title and subtitle",
    "section": "",
    "text": "You may enter a long title or a title containing quotation marks as a text block, this does not constitute explicit line breaks. See Section 8.3 and Section 8.5.↩︎",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Title and subtitle</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/71-dialectica-authors.html",
    "href": "chapters/dialectica/71-dialectica-authors.html",
    "title": "33  Author information",
    "section": "",
    "text": "33.1 Et al. author for page headers and table of contents\nFor articles with multiple authors, you may need a shorter alternative for page headers and the table of contents. This is done using the author-header and author-toc fields:",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Author information</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/71-dialectica-authors.html#et-al.-author-for-page-headers-and-table-of-contents",
    "href": "chapters/dialectica/71-dialectica-authors.html#et-al.-author-for-page-headers-and-table-of-contents",
    "title": "33  Author information",
    "section": "",
    "text": "author:\n- name: Doe, Alice\n- name: Doe, Brit\n- name: Doe, Celia\n- name: Doe, Denis\n- name: Doe, Ethne\nauthor-header: Doe et al.\nauthor-toc: Doe A., Doe B., Doe C., Doe D., and Doe E.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Author information</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/71-dialectica-authors.html#sec-dial-multiple-short-institutes",
    "href": "chapters/dialectica/71-dialectica-authors.html#sec-dial-multiple-short-institutes",
    "title": "33  Author information",
    "section": "33.2 Multiple short institute names in the signature block",
    "text": "33.2 Multiple short institute names in the signature block\nProblem. An author’s affiliations consists of several short acronyms, e.g. “CRNS, ENS, EHESS”. If you enter them as three distinct institutes, they each appear on a single line in the signature block at the end of the article. This looks awkward. Treat them as a single institute instead, using a list item (e.g. on a line starting with a -):\n  institute:\n  - ENS, CRNS, EHESS",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Author information</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/72-dialectica-abstract.html",
    "href": "chapters/dialectica/72-dialectica-abstract.html",
    "title": "34  Abstracts",
    "section": "",
    "text": "Abstracts are strongly recommended. Most people who bump on the article will only read that.\nAbstracts must be at most 200 words or so and fit in the first article’s page in PDF output.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Abstracts</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/74-dialectica-reviews.html",
    "href": "chapters/dialectica/74-dialectica-reviews.html",
    "title": "35  Review articles",
    "section": "",
    "text": "35.1 Formatting a review article\nReview articles must have titles in the format “Review of Author (year)”.\nThey begin with a section titled “Review of” containing the full citation of the monograph reviewed, and followed by --- (a horizontal rule):\nAuthor last names in the citation are in small caps: they must be surrounded by [...]{.smallcaps} as above. Book titles are emphasized, surrounded by *...* as above. The full citation must contain a publisher place, e.g. “Oxford: Oxford University Press”.\nIf you prefer you can instead enter the full citation in the document’s metadata block:\nIf you do so you don’t need a “Review of” section; the manuscript should start directly with the review’s text.\nReviews normally don’t have section headings.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Review articles</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/74-dialectica-reviews.html#formatting-a-review-article",
    "href": "chapters/dialectica/74-dialectica-reviews.html#formatting-a-review-article",
    "title": "35  Review articles",
    "section": "",
    "text": "# Review of\n\n[Antonelli]{.smallcaps}, Mauro. 2018. *Vittorio Benussi in the History\nof Psychology: New Ideas of a Century Ago*,  Studies in the History of\nPhilosophy of Mind 21, Cham: Springer.\n\n---\n\n\n\nreview-of: |\n    [Antonelli]{.smallcaps}, Mauro. 2018. *Vittorio \n    Benussi in the History of Psychology:\n    New Ideas of a Century Ago*,  Studies in the \n    History of Philosophy of Mind 21, Cham: Springer.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Review articles</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/74-dialectica-reviews.html#make-sure-the-reviewed-monograph-appears-in-the-reference",
    "href": "chapters/dialectica/74-dialectica-reviews.html#make-sure-the-reviewed-monograph-appears-in-the-reference",
    "title": "35  Review articles",
    "section": "35.2 Make sure the reviewed monograph appears in the reference",
    "text": "35.2 Make sure the reviewed monograph appears in the reference\nThe monograph reviewed should appear in the review’s references. If the review doesn’t explicitly cite the monograph, you should add it as an uncited reference. See Section 25.4.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Review articles</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/75-dialectica-article-structure.html",
    "href": "chapters/dialectica/75-dialectica-article-structure.html",
    "title": "36  Article structure",
    "section": "",
    "text": "36.1 Appendices\nIn Dialectica articles, appendices are normal sections. Just prefix the heading with “Appendix:”.\nIf an article has several appendices, put them as subsections of an “Appendices” section:",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Article structure</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/75-dialectica-article-structure.html#appendices",
    "href": "chapters/dialectica/75-dialectica-article-structure.html#appendices",
    "title": "36  Article structure",
    "section": "",
    "text": "# Appendix: Uniqueness Theorem {#sec:app-uniqueness-theorem}\n\n\n\n# Appendices {#sec:appendices}\n\n## Uniqueness Theorem {#sec:app-uniqueness-theorem}",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Article structure</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/80-dialectica-bibliography.html",
    "href": "chapters/dialectica/80-dialectica-bibliography.html",
    "title": "37  Bibliography",
    "section": "",
    "text": "37.1 Bibliography files\nWe use BibTeX bibliography files (.bib).\nTo be checked: it is ok to use the same bibliography file name for several articles in the same issue?",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/80-dialectica-bibliography.html#interface-with-dialecticas-main-bibliography",
    "href": "chapters/dialectica/80-dialectica-bibliography.html#interface-with-dialecticas-main-bibliography",
    "title": "37  Bibliography",
    "section": "37.2 Interface with dialectica’s main bibliography",
    "text": "37.2 Interface with dialectica’s main bibliography\nMore information on the bibliography is in the bibliography-section of the overleaf-document.\nJD some experiments:\n\nTried simply adding the main bib file (biblio-check.bib) as the &gt; bibliography file of an article in RStudio. Problems:\n\nIt takes circa 15-30sec to ’Read the bibliography” when opening &gt; the article, and 10-20sec again when opening the &gt; insert-citation window.\nBut the bibliographies entries don’t show up in the &gt; ‘Bibliography’ tab.\nIt looks as if either RStudio can’t read it (bug / unusual code &gt; somewhere?), or just gives up above a certain number of &gt; entries\n\n\n\nJD thought: We need either:\n\nsome way of either generating a sub-selection of the main &gt; bibliography for the article. Automated? Something like Sandro’s / &gt; crossref bibtex convertor, but for this bibliography? (Suggestion: &gt; linking via DOIs?)\nSome way of having the main biblio as one of the source in RStudio &gt; citation-insertion popup, the way Zotero appears. However: risk &gt; that it is slow because of the size.\nSome way of searching the main biblio as one of the sources in &gt; RStudio, the way CrossRef appears in the citation-insertion popup.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Bibliography</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/85-dialectica-missing-unicode-characters.html",
    "href": "chapters/dialectica/85-dialectica-missing-unicode-characters.html",
    "title": "38  Missing Unicode characters",
    "section": "",
    "text": "38.1 Adding a character obtained by combination\nSome characters might be missing in the template’s fonts. In HTML output the browser may find a fallback solution. In PDF output you get a LaTeX warning message such as:\nThere are three ways to solve this.\nMethods 1 and 2 are easy and should be tried first.\nRequires: Pandokoma template.\nConsider the character ‘à’, for instance. A LaTeX warning message would give its Unicode number in hexadecimal format: 00E0. (Hexadecimal means that A,B, … F are used in addition to digits 0…9. Unicode numbers are typically written U+xxx, i.e. U+00E0.) Search for “Unicode 00E0” online, and go to one of the websites that have a detailed page on each Unicode character. Look for a “decomposition mapping” such as:\nThis shows that the Unicode character can be created by combining the a character with the character number 0300. 0300 is a special modifier or combining character, who combines with the preceding character. It should not be confused with the self-standing character ` (code 0060) that does not combine with the previous character.\nIn the template folder, open settings/common-latex.yaml. Search for the newunicodechar section:\nAdd an entry for your character. The char value should be the missing character itself (copy/paste it). The command value is the combination used to recreate it:\nThe combination should be entered in the same order as you found on the reference webpage: here we have a first then ```. (In Unicode combinations, the added diacritics come after the letter.)\nThe combining characters can be entered either directly (here, the a) or with \\symbol{\"...} command, where ‘…’ is the hexadecimal Unicode number (here, the modifier ` is entered with \\symbol{\"0300}.) So the above is equivalent to:\nbecause the Unicode number of a is 0061. You would normally enter modifier Unicode characters by number because they do not display well in text editors.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Missing Unicode characters</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/85-dialectica-missing-unicode-characters.html#adding-a-character-obtained-by-combination",
    "href": "chapters/dialectica/85-dialectica-missing-unicode-characters.html#adding-a-character-obtained-by-combination",
    "title": "38  Missing Unicode characters",
    "section": "",
    "text": "Decomposition mapping:    a (U+0061)    ` (U+0300)\n\n\n\n\n# Unicode chars\nnewunicodechar:\n- char: ǐ\n  command: i\\symbol{\"030C}\n- char: ȧ\n  command: a\\symbol{\"0307}\n- ...\n\n\nnewUnicodechar:\n- char: à\n  command: a\\symbol{\"0300}\n- char: ǐ\n  command: i\\symbol{\"030C}\n- ...\n\n\n\n- char: à\n  command: \\symbol{\"0061}\\symbol{\"0300}",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Missing Unicode characters</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/85-dialectica-missing-unicode-characters.html#adding-a-character-from-a-math-font",
    "href": "chapters/dialectica/85-dialectica-missing-unicode-characters.html#adding-a-character-from-a-math-font",
    "title": "38  Missing Unicode characters",
    "section": "38.2 Adding a character from a math font",
    "text": "38.2 Adding a character from a math font\nRequires: Pandokoma template.\nFor some characters, they are not available in the text font but they are available as math symbols. You can look them up in the Comprehensive LaTeX Symbol List (if you have a LaTeX installation, entering the command texdoc symbols in a terminal should display it; otherwise use the link).\nAdding them to the template is similar to the combination method above. In the template, open settings/common-latex.yaml. Look for the unicodefrommath section. Here’s an example:\n# Unicode symbols from math\nunicodefrommath:\n- char: '&there4;'\n  is: \\therefore\n\nIn the char field, I’ve entered the character. Instead of copying/ pasting it, I’ve used its HTML entity name, between quotation marks. (See section Chapter 13 on HTML entities. The quotation marks ensure that HTML entities are treated as such.) In the is field, I enter the LaTeX command that prints the desired characters.\nThe is field should be a LaTeX command that works in math mode. If it’s a text mode command, use \\text{...}.\nIn HTML output, the LaTeX command is passed to MathJAX. Check your HTML output to see whether MathJAX displays it. If not, you’ll see red text with a yellow background where the character should be. Your only option then, the last resort, is to declare an alternative font for that character.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Missing Unicode characters</span>"
    ]
  },
  {
    "objectID": "chapters/dialectica/85-dialectica-missing-unicode-characters.html#declaring-an-alternative-font-for-a-certain-unicode-range",
    "href": "chapters/dialectica/85-dialectica-missing-unicode-characters.html#declaring-an-alternative-font-for-a-certain-unicode-range",
    "title": "38  Missing Unicode characters",
    "section": "38.3 Declaring an alternative font for a certain Unicode range",
    "text": "38.3 Declaring an alternative font for a certain Unicode range\nThis method requires changing both the LaTeX and HTML (CSS) templates and adding the relevant fonts to the template folder and website. You need to ask the template managed to do this.",
    "crumbs": [
      "Dialectica",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Missing Unicode characters</span>"
    ]
  },
  {
    "objectID": "chapters/design/52-pub-the-structure-of-volumes.html",
    "href": "chapters/design/52-pub-the-structure-of-volumes.html",
    "title": "39  The structure of a book and a journal",
    "section": "",
    "text": "39.1 The structure of a book\nThe cover is typically designed separately. It has five components: front cover, inside front cover, inside back cover, back cover, and spine.\nThe book is divided in three parts: front, main and back matter.\nFollowing Wddingham (2014, 3) and Chicago Press (2010, sec. 1.4) the frontmatter contains:\nThen (Hart):\nOr (Chicago):\nBack matter\nFollowing Wddingham (2014, 17)\nFollowing Chicago Press (2010, sec. 1.4):",
    "crumbs": [
      "Design",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>The structure of a book and a journal</span>"
    ]
  },
  {
    "objectID": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-book",
    "href": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-book",
    "title": "39  The structure of a book and a journal",
    "section": "",
    "text": "Front cover. Author and title, optionally publisher.\nSpine. Author and title, optionally publisher, series, volume, year….\nBack cover. Title, blurb, credits for the cover image, barcode or QR code, publisher.\nInside front and back cover. Could be empty.\n\n\n\n\n\nhalf-title, recto\nverso of the half-title: empty, series title, frontispiece\ntitle page, recto\nverso of the title page: empty, copyright\ndedication\n\n\n\n\nforeword\npreface\nacknowledgments\ntable of contents\nlists:\n\nillustrations,\nfigures,\nmaps,\ntables,\ntable of cases and legislation (law books)\nabbreviations\ncontributors\n\nnote to the reader\nepigraph\n\n\n\n\nepigraph\ncontents\nlists\n\nillustrations\ntables\n\nforeword\nPreface\nAcknowledgements (if not in preface)\nIntroduction (it not part of text)\nAbbreviations (if not in back matter)\nChronology (if not in back matter)\n\n\n\n\n\nappendix\nglossary\nendnotes\nbibliography\nnotes on contributors\nindexes\n\n\n\n\nacknowledgments (if not in front matter)\nappendices\nchronology (if not in front)\nabbreviations (if not in front)\nendnotes\nglossary\nbibliography\nnote on contributors\nillustration credits\nindexes",
    "crumbs": [
      "Design",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>The structure of a book and a journal</span>"
    ]
  },
  {
    "objectID": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-journal",
    "href": "chapters/design/52-pub-the-structure-of-volumes.html#the-structure-of-a-journal",
    "title": "39  The structure of a book and a journal",
    "section": "39.2 The structure of a journal",
    "text": "39.2 The structure of a journal\nTypical order of pages.\n\nFront matter\n\neditorial board\ntitle\nimprint\n\nMain matter\n\narticle",
    "crumbs": [
      "Design",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>The structure of a book and a journal</span>"
    ]
  },
  {
    "objectID": "chapters/design/52-pub-the-structure-of-volumes.html#non-english-conventions",
    "href": "chapters/design/52-pub-the-structure-of-volumes.html#non-english-conventions",
    "title": "39  The structure of a book and a journal",
    "section": "39.3 Non-English conventions",
    "text": "39.3 Non-English conventions\n\n39.3.0.1 Français\nCouverture: - première de couverture: - seconde de couverture: - troisième de couverture: - quatrième de couverture: - épine (dos): auteur, titre, maison d’édition (logo), …\nSuivant Collectif (2002):\nCouvertures intérieures ou rabats de la jaquette: autres ouvrages de la même maison, présentation de l’auteur.\nFacultatif: un feuillet blanc en début et fin de volume.\nEn tête de volume, pagination en chiffres romains:\n\nle faux titre, recto. Titre et sous-titre\nverso du faux titre: illustration de frontispice ou liste des oeuvres de l’auteur.\ntitre: recto. Titre, sous-titre auteur, copyright; eventuellement ISBN ou ISSN, édition, tirage, sommaire.\ndédicace: recto, après le titre.\navis ou avertissement: en verso de l’une des premières pages.\nchapitres en tête d’ouvrage, dans l’ordre:\n\navant-propos,\npréface,\nintroduction (cas exceptionnel, voir ci-dessous),\nnotice (par ex., notice sur les auteurs, ou sur l’utilisation de l’ouvrage, par exemple une liste d’abbréviations),\n(exceptionellement) bibliographie.\n\n\n\nEn corps de volume, les chapitres, pagination en chiffres arabes.\n\nl’introduction est normalement en corps de volume. Elle est placée en tête seulement si ne fait pas partie du corps: introduction du traducteur, de l’éditeur d’un texte historique, etc.\n\n\nEn fin de volume, pagination en chiffre arabe continuant celle du corps:\n\npostface,\nbibliographie (exceptionellement placée en tête),\nindex,\ntable des matières,\ncolophon: tirage, achevé d’imprimé, mention du dépôt légal, mention de l’imprimeur sur la dernière page.\n\n\n\n\n\nChicago Press, University of. 2010. The Chicago Manual of Style: The Essential Guide for Writers, Editors and Publishers. 16th edition. Chicago: University of Chicago Press.\n\n\nCollectif. 2002. Lexique des règles typographiques en usage à l’Imprimerie nationale. Paris: Imprimerie nationale.\n\n\nWddingham, Anne. 2014. New Hart’s Rules: The Oxford Style Guide. 2nd edition. New York, NY: OUP Oxford.",
    "crumbs": [
      "Design",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>The structure of a book and a journal</span>"
    ]
  },
  {
    "objectID": "chapters/design/55-pub-technical-howtos.html",
    "href": "chapters/design/55-pub-technical-howtos.html",
    "title": "40  Technical How-Tos",
    "section": "",
    "text": "40.1 Missing Unicode characters\nMarkdown manuscript are in unicode, which allow us to enter many languages directly and a range of special symbols.\nLaTeX issues a warning if a character is missing from your chosen font, for instance:\nIn LaTeX/PDF output there are three solutions for this:\nMethods 1-2 rely on the newunicodechar package. Method 3 on fontspec.\nIt’s good to have a character table for your font. See for instance STIX font docs: the character table indicates which characters can be built from others.",
    "crumbs": [
      "Design",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Technical How-Tos</span>"
    ]
  },
  {
    "objectID": "chapters/design/55-pub-technical-howtos.html#missing-unicode-characters",
    "href": "chapters/design/55-pub-technical-howtos.html#missing-unicode-characters",
    "title": "40  Technical How-Tos",
    "section": "",
    "text": "Missing character: There is no ὀ (U+1F40) (U+1F40) in font STIXTwoText:mode=node;script\n\n\n\ngenerate missing characters by combining other characters of the same font (typically a diacritic plus a character)\ngenerate missing characters by using a math symbol command (typical for symbols)\nuse a different font for specific Unicode ranges\n\n\n\n\n\n40.1.1 Unicode from math\nYou could use use LaTeX’s (inputenc’s) DeclareUnicodeChar command, if you know the character’s UTF-8 number:\n\\DeclareUnicodeCharacter{2234}{\\ensuremath{\\therefore}}\n\\DeclareUnicodeCharacter{2713}{\\ensuremath{\\checkmark}}\n\nOr the newunicodechar package, which allows you to use the character itself:\n\\usepackage{newunicodechar}\n\\newunicodechar{∴}{\\ensuremath{\\therefore}}\n\\newunicodechar{✓}{\\ensuremath{\\checkmark}}\n\nEither option requires a header-includes or a modification of your LaTeX template.\nWe use a metadata variable instead. This allows us to enter the desired character directly or as a HTML entity (which Pandoc converts to the desired char before passing it on to our LaTeX template):\nunicodefrommath:\n- char: '&there4;'\n  is: \\therefore\n- char: ✓\n  is: \\checkmark\n\nThis is supported as follows in our Pandokoma template:\n$if(unicodefrommath)$\n\\usepackage{newunicodechar}\n$for(unicodefrommath)$\n  $if(it.char)$\n    $if(it.is)$\\newunicodechar{$it.char$}{\\ensuremath{$it.is$}}$endif$\n  $endif$\n$endfor$\n$endif$\n\n\n40.1.2 Provide Unicode characters\nFor LaTeX/PDF, use \\DeclareUnicodeCharacter or newunicodechar.\nWe use pandokoma’s yaml declaration. Here is our declaration for the Greek extended block.\nnewunicodechar:\n- char: ἀ\n  command: α\\symbol{\"0313\"}\n- char: ἁ\n  command: α\\symbol{\"0314}\n- char: ἂ\n  command: α\\symbol{\"0313}\\symbol{\"0300}\n- char: ἃ\n  command: α\\symbol{\"0314}\\symbol{\"0300}\n- char: ἄ\n  command: α\\symbol{\"0313}\\symbol{\"0301}\n- char: ἅ\n  command: α\\symbol{\"0314}\\symbol{\"0301}\n- char: ἆ\n  command: α\\symbol{\"0313}\\symbol{\"00342}\n- char: ἇ\n  command: α\\symbol{\"0314}\\symbol{\"00342}\n- char: Ἀ\n  command: Α\\symbol{\"0313}\n- char: Ἁ\n  command: Α\\symbol{\"0314}\n- char: Ἂ\n  command: Α\\symbol{\"0313}\\symbol{\"0300}\n- char: Ἃ\n  command: Α\\symbol{\"0314}\\symbol{\"0300}\n- char: Ἄ\n  command: Α\\symbol{\"0313}\\symbol{\"0301}\n- char: Ἅ\n  command: Α\\symbol{\"0314}\\symbol{\"0301}\n- char: Ἆ\n  command: Α\\symbol{\"0313}\\symbol{\"0342}\n- char: Ἇ\n  command: Α\\symbol{\"0314}\\symbol{\"0342}\n- char: ἐ\n  command: ε\\symbol{\"0313}\n- char: ἑ\n  command: ε\\symbol{\"0314}\n- char: ἒ\n  command: ε\\symbol{\"0313}\\symbol{\"0300}\n- char: ἓ\n  command: ε\\symbol{\"0314}\\symbol{\"0300}\n- char: ἔ\n  command: ε\\symbol{\"0313}\\symbol{\"0301}\n- char: ἕ\n  command: ε\\symbol{\"0314}\\symbol{\"0301}\n- char: Ἐ\n  command: Ε\\symbol{\"0313}\n- char: Ἑ\n  command: Ε\\symbol{\"0314}\n- char: Ἒ\n  command: Ε\\symbol{\"0313}\\symbol{\"0300}\n- char: Ἓ\n  command: Ε\\symbol{\"0314}\\symbol{\"0300}\n- char: Ἔ\n  command: Ε\\symbol{\"0313}\\symbol{\"0301}\n- char: Ἕ\n  command: Ε\\symbol{\"0314}\\symbol{\"0301}\n- char: Ἆ\n  command: Α\\symbol{\"0313}\\symbol{\"0342}\n- char: Ἇ\n  command: Α\\symbol{\"0314}\\symbol{\"0342}\n- char: ἠ\n  command: η\\symbol{\"0313}\n- char: ἡ\n  command: η\\symbol{\"0314}\n- char: ἢ\n  command: η\\symbol{\"0313}\\symbol{\"0300}\n- char: ἣ\n  command: η\\symbol{\"0314}\\symbol{\"0300}\n- char: ἤ\n  command: η\\symbol{\"0313}\\symbol{\"0301}\n- char: ἥ\n  command: η\\symbol{\"0314}\\symbol{\"0301}\n- char: ἦ\n  command: η\\symbol{\"0313}\\symbol{\"00342}\n- char: ἧ\n  command: η\\symbol{\"0314}\\symbol{\"00342}\n- char: Ἠ\n  command: Η\\symbol{\"0313}\n- char: Ἡ\n  command: Η\\symbol{\"0314}\n- char: Ἢ\n  command: Η\\symbol{\"0313}\\symbol{\"0300}\n- char: Ἣ\n  command: Η\\symbol{\"0314}\\symbol{\"0300}\n- char: Ἤ\n  command: Η\\symbol{\"0313}\\symbol{\"0301}\n- char: Ἥ\n  command: Η\\symbol{\"0314}\\symbol{\"0301}\n- char: Ἦ\n  command: Η\\symbol{\"0313}\\symbol{\"0342}\n- char: Ἧ\n  command: Η\\symbol{\"0314}\\symbol{\"0342}\n- char: ἰ\n  command: ι\\symbol{\"0313\"}\n- char: ἱ\n  command: ι\\symbol{\"0314}\n- char: ἲ\n  command: ι\\symbol{\"0313}\\symbol{\"0300}\n- char: ἳ\n  command: ι\\symbol{\"0314}\\symbol{\"0300}\n- char: ἴ\n  command: ι\\symbol{\"0313}\\symbol{\"0301}\n- char: ἵ\n  command: ι\\symbol{\"0314}\\symbol{\"0301}\n- char: ἶ\n  command: ι\\symbol{\"0313}\\symbol{\"00342}\n- char: ἷ\n  command: ι\\symbol{\"0314}\\symbol{\"00342}\n- char: Ἰ\n  command: Ι\\symbol{\"0313}\n- char: Ἱ\n  command: Ι\\symbol{\"0314}\n- char: Ἲ\n  command: Ι\\symbol{\"0313}\\symbol{\"0300}\n- char: Ἳ\n  command: Ι\\symbol{\"0314}\\symbol{\"0300}\n- char: Ἴ\n  command: Ι\\symbol{\"0313}\\symbol{\"0301}\n- char: Ἵ\n  command: Ι\\symbol{\"0314}\\symbol{\"0301}\n- char: Ἶ\n  command: Ι\\symbol{\"0313}\\symbol{\"0342}\n- char: Ἷ\n  command: Ι\\symbol{\"0314}\\symbol{\"0342}\n- char: ὀ\n  command: ο\\symbol{\"0313}\n- char: ὁ\n  command: ο\\symbol{\"0314}\n- char: ὂ\n  command: ο\\symbol{\"0313}\\symbol{\"0300}\n- char: ὃ\n  command: ο\\symbol{\"0314}\\symbol{\"0300}\n- char: ὄ\n  command: ο\\symbol{\"0313}\\symbol{\"0301}\n- char: ὅ\n  command: ο\\symbol{\"0314}\\symbol{\"0301}\n- char: Ὀ\n  command: Ο\\symbol{\"0313}\n- char: Ὁ\n  command: Ο\\symbol{\"0314}\n- char: Ὂ\n  command: Ο\\symbol{\"0313}\\symbol{\"0300}\n- char: Ὃ\n  command: Ο\\symbol{\"0314}\\symbol{\"0300}\n- char: Ὄ\n  command: Ο\\symbol{\"0313}\\symbol{\"0301}\n- char: Ὅ\n  command: Ο\\symbol{\"0314}\\symbol{\"0301}\n- char: ὐ\n  command: υ\\symbol{\"0313\"}\n- char: ὑ\n  command: υ\\symbol{\"0314}\n- char: ὒ\n  command: υ\\symbol{\"0313}\\symbol{\"0300}\n- char: ὓ\n  command: υ\\symbol{\"0314}\\symbol{\"0300}\n- char: ὔ\n  command: υ\\symbol{\"0313}\\symbol{\"0301}\n- char: ὕ\n  command: υ\\symbol{\"0314}\\symbol{\"0301}\n- char: ὖ\n  command: υ\\symbol{\"0313}\\symbol{\"00342}\n- char: ὗ\n  command: υ\\symbol{\"0314}\\symbol{\"00342}\n- char: Ὑ\n  command: Υ\\symbol{\"0314}\n- char: Ὓ\n  command: Υ\\symbol{\"0314}\\symbol{\"0300}\n- char: Ὕ\n  command: Υ\\symbol{\"0314}\\symbol{\"0301}\n- char: Ὗ\n  command: Υ\\symbol{\"0314}\\symbol{\"0342}\n- char: ὠ\n  command: ω\\symbol{\"0313\"}\n- char: ὡ\n  command: ω\\symbol{\"0314}\n- char: ὢ\n  command: ω\\symbol{\"0313}\\symbol{\"0300}\n- char: ὣ\n  command: ω\\symbol{\"0314}\\symbol{\"0300}\n- char: ὤ\n  command: ω\\symbol{\"0313}\\symbol{\"0301}\n- char: ὥ\n  command: ω\\symbol{\"0314}\\symbol{\"0301}\n- char: ὦ\n  command: ω\\symbol{\"0313}\\symbol{\"00342}\n- char: ὧ\n  command: ω\\symbol{\"0314}\\symbol{\"00342}\n- char: Ὠ\n  command: Ω\\symbol{\"0313}\n- char: Ὡ\n  command: Ω\\symbol{\"0314}\n- char: Ὢ\n  command: Ω\\symbol{\"0313}\\symbol{\"0300}\n- char: Ὣ\n  command: Ω\\symbol{\"0314}\\symbol{\"0300}\n- char: Ὤ\n  command: Ω\\symbol{\"0313}\\symbol{\"0301}\n- char: Ὥ\n  command: Ω\\symbol{\"0314}\\symbol{\"0301}\n- char: Ὦ\n  command: Ω\\symbol{\"0313}\\symbol{\"0342}\n- char: Ὧ\n  command: Ω\\symbol{\"0314}\\symbol{\"0342}\n- char: ὰ\n  command: α\\symbol{\"0300}\n- char: ά\n  command: α\\symbol{\"0301}\n- char: ὲ\n  command: ε\\symbol{\"0300}\n- char: έ\n  command: ε\\symbol{\"0301}\n- char: ὴ\n  command: η\\symbol{\"0300}\n- char: ή\n  command: η\\symbol{\"0301}\n- char: ὶ\n  command: ι\\symbol{\"0300}\n- char: ί\n  command: ι\\symbol{\"0301}\n- char: ὸ\n  command: ο\\symbol{\"0300}\n- char: ό\n  command: ο\\symbol{\"0301}\n- char: ὺ\n  command: υ\\symbol{\"0300}\n- char: ύ\n  command: υ\\symbol{\"0301}\n- char: ὼ\n  command: ω\\symbol{\"0300}\n- char: ώ\n  command: ω\\symbol{\"0301}\n- char: ᾀ\n  command: α\\symbol{\"0313}\\symbol{\"0345}\n- char: ᾁ\n  command: α\\symbol{\"0314}\\symbol{\"0345}\n- char: ᾂ\n  command: α\\symbol{\"0313}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾃ\n  command: α\\symbol{\"0314}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾄ\n  command: α\\symbol{\"0313}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾅ\n  command: α\\symbol{\"0314}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾆ\n  command: α\\symbol{\"0313}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾇ\n  command: α\\symbol{\"0314}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾈ\n  command: Α\\symbol{\"0313}\\symbol{\"0345}\n- char: ᾉ\n  command: Α\\symbol{\"0314}\\symbol{\"0345}\n- char: ᾊ\n  command: Α\\symbol{\"0313}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾋ\n  command: Α\\symbol{\"0314}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾌ\n  command: Α\\symbol{\"0313}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾍ\n  command: Α\\symbol{\"0314}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾎ\n  command: Α\\symbol{\"0313}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾏ\n  command: Α\\symbol{\"0314}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾐ\n  command: η\\symbol{\"0313}\\symbol{\"0345}\n- char: ᾑ\n  command: η\\symbol{\"0314}\\symbol{\"0345}\n- char: ᾒ\n  command: η\\symbol{\"0313}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾓ\n  command: η\\symbol{\"0314}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾔ\n  command: η\\symbol{\"0313}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾕ\n  command: η\\symbol{\"0314}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾖ\n  command: η\\symbol{\"0313}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾗ\n  command: η\\symbol{\"0314}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾘ\n  command: Η\\symbol{\"0313}\\symbol{\"0345}\n- char: ᾙ\n  command: Η\\symbol{\"0314}\\symbol{\"0345}\n- char: ᾚ\n  command: Η\\symbol{\"0313}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾛ\n  command: Η\\symbol{\"0314}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾜ\n  command: Η\\symbol{\"0313}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾝ\n  command: Η\\symbol{\"0314}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾞ\n  command: Η\\symbol{\"0313}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾟ\n  command: Η\\symbol{\"0314}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾠ\n  command: ω\\symbol{\"0313}\\symbol{\"0345}\n- char: ᾡ\n  command: ω\\symbol{\"0314}\\symbol{\"0345}\n- char: ᾢ\n  command: ω\\symbol{\"0313}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾣ\n  command: ω\\symbol{\"0314}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾣ\n  command: ω\\symbol{\"0313}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾥ\n  command: ω\\symbol{\"0314}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾦ\n  command: ω\\symbol{\"0313}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾧ\n  command: ω\\symbol{\"0314}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾨ\n  command: Ω\\symbol{\"0313}\\symbol{\"0345}\n- char: ᾩ\n  command: Ω\\symbol{\"0314}\\symbol{\"0345}\n- char: ᾪ\n  command: Ω\\symbol{\"0313}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾫ\n  command: Ω\\symbol{\"0314}\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾬ\n  command: Ω\\symbol{\"0313}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾭ\n  command: Ω\\symbol{\"0314}\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾮ\n  command: Ω\\symbol{\"0313}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾯ\n  command: Ω\\symbol{\"0314}\\symbol{\"0342}\\symbol{\"0345}\n- char: ᾰ\n  commmand: α\\symbol{\"0306}\n- char: ᾱ\n  commmand: α\\symbol{\"0304}\n- char: ᾲ\n  command: α\\symbol{\"0300}\\symbol{\"0345}\n- char: ᾳ\n  command: α\\symbol{\"0345}\n- char: ᾴ\n  command: α\\symbol{\"0301}\\symbol{\"0345}\n- char: ᾶ\n  command: α\\symbol{\"0342}\n- char: ᾷ\n  command: α\\symbol{\"0342}\\symbol{\"0345}\n- char: Ᾰ\n  command: Α\\symbol{\"0306}\n- char: Ᾱ\n  command: Α\\symbol{\"0304}\n- char: Ὰ\n  command: Α\\symbol{\"0300}\n- char: Ά\n  command: Α\\symbol{\"0301}\n- char: ᾼ\n  command: Α\\symbol{\"0345}\n- char: ι\n  command: ι\n- char: ῂ\n  command: η\\symbol{\"0300}\\symbol{\"0345}\n- char: ῃ\n  command: η\\symbol{\"0345}\n- char: ῄ\n  command: η\\symbol{\"0301}\\symbol{\"0345}\n- char: ῆ\n  command: η\\symbol{\"0342}\n- char: ῇ\n  command: η\\symbol{\"0342}\\symbol{\"0345}\n- char: Ὲ\n  command: Ε\\symbol{\"0300}\n- char: Έ\n  command: Ε\\symbol{\"0301}\n- char: Ὴ\n  command: Η\\symbol{\"0300}\n- char: Ή\n  command: Η\\symbol{\"0301}\n- char: ῌ\n  command: Η\\symbol{\"0345}\n- char: ῐ\n  command: ι\\symbol{\"0306}\n- char: ῑ\n  command: ι\\symbol{\"0304}\n- char: ῒ\n  command: ι\\symbol{\"0308}\\symbol{\"0300}\n- char: ΐ\n  command: ι\\symbol{\"0308}\\symbol{\"0301}\n- char: ῖ\n  command: ι\\symbol{\"0342}\n- char: ῗ\n  command: ι\\symbol{\"0308}\\symbol{\"0342}\n- char: Ῐ\n  command: Ι\\symbol{\"0306}\n- char: Ῑ\n  command: Ι\\symbol{\"0304}\n- char: Ὶ\n  command: Ι\\symbol{\"0300}\n- char: Ί\n  command: Ι\\symbol{\"0301}\n- char: ῠ\n  command: υ\\symbol{\"0306}\n- char: ῡ\n  command: υ\\symbol{\"0304}\n- char: ῢ\n  command: υ\\symbol{\"0308}\\symbol{\"0300}\n- char: ΰ\n  command: υ\\symbol{\"0308}\\symbol{\"0301}\n- char: ῤ\n  command: ρ\\symbol{\"0313}\n- char: ῥ\n  command: ρ\\symbol{\"0314}\n- char: ῦ\n  command: υ\\symbol{\"0342}\n- char: ῧ\n  command: υsymbol{\"0308}\\symbol{\"0342}\n- char: Ῠ\n  command: Υ\\symbol{\"0306}\n- char: Ῡ\n  command: Υ\\symbol{\"0304}\n- char: Ὺ\n  command: Υ\\symbol{\"0300}\n- char: Ύ\n  command: Υ\\symbol{\"0301}\n- char: Ῥ\n  command: Ρ\\symbol{\"0314}\n- char: ῲ\n  command: ω\\symbol{\"0300}\\symbol{\"0345}\n- char: ῳ\n  command: ω\\symbol{\"0345}\n- char: ῴ\n  command: ω\\symbol{\"0301}\\symbol{\"0345}\n- char: ῶ\n  command: ω\\symbol{\"0342}\n- char: ῷ\n  command: ω\\symbol{\"0342}\\symbol{\"0345}\n- char: Ὸ\n  command: Ο\\symbol{\"0300}\n- char: Ό\n  command: Ο\\symbol{\"0301}\n- char: Ὼ\n  command: Ω\\symbol{\"0300}\n- char: Ώ\n  command: Ω\\symbol{\"0301}\n- char: ῼ\n  command: Ω\\symbol{\"0345}\n\n\n40.1.3 Background on LaTeX / unicode\nTo print Unicode chars by number use \\symbol{} or \\char. For omicron (Unicode decimal 959, hexadecimal OxO3BF):\n\\symbol{\"03BF}\n\\symbol{959}\n\\char\"03BF\n\\char959\n\nTo combine a character with a diacritic use the character directly followed by the combining diacritic. For instance, you can create Greek small omicron with psili (Unicode U+1F40) by combining Greek small omicron (ο, U+03BF) with the combining Greek koronis (U+0343). Any of these work:\nο\\symbol{\"0343}\nο\\char\"0343\n\\char\"03BF\\char\"0343\n\\symbol{\"03BF}\\char\"0343\n\\symbol{\"03BF}\\symbol{\"0343}\n\\char\"03BF\\symbol{\"0343}\n\nThe combining Greek Koronis is usually the same as the combining comma above (U+0313), so you could use that instead.",
    "crumbs": [
      "Design",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Technical How-Tos</span>"
    ]
  },
  {
    "objectID": "chapters/publishing/42-ojs-advice.html",
    "href": "chapters/publishing/42-ojs-advice.html",
    "title": "(PART) Open Journal Systems",
    "section": "",
    "text": "Publishing with Open Journal Systems\nSome advice when using Open Journal Systems to publish. For more general questions about OJS see its support page.",
    "crumbs": [
      "Publishing",
      "(PART) Open Journal Systems"
    ]
  },
  {
    "objectID": "chapters/publishing/42-ojs-advice.html#uploading-reference-lists",
    "href": "chapters/publishing/42-ojs-advice.html#uploading-reference-lists",
    "title": "(PART) Open Journal Systems",
    "section": "Uploading reference lists",
    "text": "Uploading reference lists\nDialectica specific. When publishing an article on OJS we fill in the “References” metadata field with a text version of the articles’ references. Run the following in the issue folder:\nmake refs\n\nThis generates a article_name.bib.txt file for each article in an issue.\nNote: if you get an ’no target to make “refs”error, you need to renew the  Makefile. Runsh generatemakefile.shin the issue folder. If the scriptgeneratemakefile.shis missing, copy it again from the template folder'sEXTRAS/copyeditors-scripts-issue`.\nWindows user: these need to be run in a Linux terminal (using Windows Subsystem for Linux.)\nBackground: the text references are in American Psychological Association style. This ensures that multiple entries by the same author all start with the author’s name (rather than a long dash as in the Chicago style).",
    "crumbs": [
      "Publishing",
      "(PART) Open Journal Systems"
    ]
  },
  {
    "objectID": "chapters/publishing/42-ojs-advice.html#uploading-html-article-with-images-or-imagified-latex",
    "href": "chapters/publishing/42-ojs-advice.html#uploading-html-article-with-images-or-imagified-latex",
    "title": "(PART) Open Journal Systems",
    "section": "Uploading HTML article with images or imagified LaTeX",
    "text": "Uploading HTML article with images or imagified LaTeX\nIf your article has images or imagified LaTeX as separate files, simply upload them as dependent files. OJS takes care of modifying the HTML to ensure they appear on the page.\nIllustration. Suppose that your galley file is author_2020.html with its images located in a media/ and its imagified LaTeX in imagify/:\n./\n- author_2020.html\n- media/\n    |- image1.svg\n- imagify/\n    |- 5e57052914c8be3062d7efe2237160c1e3c5bc11.svg\n    |- 834aba06fd119cd000555eac54ad1f6126400419.svg\n\nOn OJS, upload author_2020.html as article text and the svg files as dependent files (images). No need to worry about the directory structure.",
    "crumbs": [
      "Publishing",
      "(PART) Open Journal Systems"
    ]
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html",
    "href": "chapters/publishing/51-pub-why-markdown.html",
    "title": "(PART) Publishing",
    "section": "",
    "text": "Why publish a journal in markdown",
    "crumbs": [
      "Publishing",
      "(PART) Publishing"
    ]
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#why-use-a-markdown-workflow",
    "href": "chapters/publishing/51-pub-why-markdown.html#why-use-a-markdown-workflow",
    "title": "(PART) Publishing",
    "section": "Why use a markdown workflow",
    "text": "Why use a markdown workflow\nA journal needs to produce outputs in different formats: html, PDF, possibly Epub. The aim is to generate all automatically from a single source. There are two ways to do this:\n\nXML.\nmarkdown.\n\n\nXML is the industry standard. But it is costly to work with (proprietary tools). markdown is a lighter-weight, popular authoring language.\npandoc is a powerful converter that turns a large number of formats into markdown and conversely. It can be harnessed to produce outputs in all formats, including XML.",
    "crumbs": [
      "Publishing",
      "(PART) Publishing"
    ]
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#ms-word---google-docs-workflow",
    "href": "chapters/publishing/51-pub-why-markdown.html#ms-word---google-docs-workflow",
    "title": "(PART) Publishing",
    "section": "MS Word - Google docs workflow",
    "text": "MS Word - Google docs workflow\n(to be elaborated on!)\n\n\nClean the MS word document using our tool: https://dialectica-philosophy.herokuapp.com/pandoc\n\n\n\nClean the MS word document\nImport it in Google Docs and edit it there, keeping all and only the meaningful elements (there’s a list in the document I’ll share). Don’t bother with fixing references at this stage.\nSave a snapshot of your document before you send it to the author.\nShare the edited document with the author, ask whether they’re happy with any modifications. You can activate the ‘track changes’ in google docs to make any major modifications visible to the author.\nReview the author changes, and once you and they are happy pass it on to the markdown team.\n\n\nTo check: what edits are preserved in markdown:\n\nCross References done with link & bookmark in google doc",
    "crumbs": [
      "Publishing",
      "(PART) Publishing"
    ]
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#markdown-workflow",
    "href": "chapters/publishing/51-pub-why-markdown.html#markdown-workflow",
    "title": "(PART) Publishing",
    "section": "Markdown workflow",
    "text": "Markdown workflow\nThe accepted papers will be in either .doc, .docx (Word) or .tex (LaTeX) format.\n\nFirst we convert doc and tex files to markdown files (.md).\nThen we do all the editing using RStudio, a visual markdown editor (for steps on editing, see next paragraph).\nOnce the edits are done, the file is converted into a pdf which is sent back to the author for questions and / or for a final approval.\nIf there are more changes, they are done again in the markdown file, and the final version is again converted into a pdf, then sent to the author for final approval.\nOnce the final version is approved, we use Pandoc to convert the markdown file into a pdf (via LaTeX, which will have the determined style template) and html.\n\n\nEditing consists of:\n\nEditing the language (correct typos, bad English, strange sentences)\nPreserve and implement meaningful elements: headings, block quotations, formulas, … .\nCheck that the bibliography is correct: that every citation has a reference in the bibliography.\nReplace manually added citations by automatic ones (for Word files, the bibliography needs to be converted into a Bibtex file with a website that is yet to be developed. Latex papers will already have a Bibtex file).\nOnce all the changes are done, send the paper to the author for possible questions and to have their approval of the changes.",
    "crumbs": [
      "Publishing",
      "(PART) Publishing"
    ]
  },
  {
    "objectID": "chapters/publishing/51-pub-why-markdown.html#interaction-with-authors",
    "href": "chapters/publishing/51-pub-why-markdown.html#interaction-with-authors",
    "title": "(PART) Publishing",
    "section": "Interaction with authors",
    "text": "Interaction with authors\n\nTitle + abstract. Remind authors that most online searches will only &gt; return title and abstract. Most potential readers won’t get &gt; further. They are advised to choose their title and abstract well.",
    "crumbs": [
      "Publishing",
      "(PART) Publishing"
    ]
  },
  {
    "objectID": "chapters/appendices/terminal-help.html",
    "href": "chapters/appendices/terminal-help.html",
    "title": "Appendix A — Terminal help",
    "section": "",
    "text": "A.1 Running a command\nSome instructions in this book mention the terminal. Here’s all you need to know about it; you can learn it in 20 minutes or less.\nA terminal, aka shell or command line is a tool for text-based interaction with a computer, as opposed to graphical user interfaces (“GUI”, mouse, trackpad or touch-based). There are some things you can only do with a terminal (e.g. running Pandoc), and others that can be done very quickly if you know how to use a terminal. Using it is a throwback to the 80s and will make you feel like a hacker.\nYou can use a dedicated terminal application. But note that editors like RStudio or Visual Code conveniently embed a terminal application.\nTo open a terminal on its own:\nTo open a terminal in your editor:\nWhen you open the terminal a line shows up waiting for your input, e.g.:\nor\nThis is called the command prompt because it prompts you to enter a command.\n“Entering” or “running” or “executing” a “command” on the terminal means typing some text and press the “Enter” key. For instance, type the following and press “Enter”:\nIf you get an error message, this means that pandoc is not installed —not somewhere your system finds it, at any rate. If you get instead something like:\nthen congratulations, you have just “run” or “executed” the command pandoc with the option --version. The program Pandoc has replied by printing out its version number.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Terminal help</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#running-a-command",
    "href": "chapters/appendices/terminal-help.html#running-a-command",
    "title": "Appendix A — Terminal help",
    "section": "",
    "text": "pandoc --version\n\n\npandoc 3.1.2\nFeatures: +server +lua\nScripting engine: Lua 5.4\nUser data directory: /Users/julien/.local/share/pandoc\nCopyright (C) 2006-2023 John MacFarlane. Web:  https://pandoc.org\nThis is free software; see the source for copying conditions. There is no\nwarranty, not even for merchantability or fitness for a particular purpose.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Terminal help</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#copying-and-pasting-commands",
    "href": "chapters/appendices/terminal-help.html#copying-and-pasting-commands",
    "title": "Appendix A — Terminal help",
    "section": "A.2 Copying and pasting commands",
    "text": "A.2 Copying and pasting commands\nIn most terminals the usual copying-paste shortcuts (e.g. Ctrl + C, Ctrl + V) don’t work. But you should be able to copy/paste by using menus or right-clicking and chose “Paste”.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Terminal help</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#sec-terminal-help-navigation",
    "href": "chapters/appendices/terminal-help.html#sec-terminal-help-navigation",
    "title": "Appendix A — Terminal help",
    "section": "A.3 Navigation",
    "text": "A.3 Navigation\nYour terminal is always “at” or “in” some folder or other. We call it the “current folder” of the “present working directory”. On Windows’ CMD the folder you’re “in” is displayed at the beginning of the line:\nC:Users\\MyName&gt;\n\nOn Linux and MacOS you might only see the name of the folder you are in (myfolder), not the full path; and it might just be ~, which is a shorthand for your main user folder. You can run the pwd (“present working directory”) command to display its full name.\nWhere you are located matters to the execution of most commands. Suppose you run the command:\npandoc article.md -o article.pdf\n\nThis asks pandoc to convert the file article.md into article.pdf in the current folder. If you don’t run that command while being located in the folder where the file article.md is, you will get an error message telling you that there is no file of that name.\nSo basic terminal usage requires you to know which folder you are currently in, and how to change folder, and to refer to files in different folders. The commands you need are:\n\nList contents of current folder with ls (Linux/MacOS) or dir (Win).\ncd change directory. If your current folder contains a subfolder called MyFolder, you can get into it with cd MyFolder. You can use cd .. go “up” to the folder that contains yours. Several folders can be combined with the directory separator / (Linux MacOs) or \\ (Windows): cd MyFolder/article/example to go down three folders, cd ../.. to go up two.\n\n\nThat’s it! If you need more, you can learn in a few minutes using an online tutorial. Here are some, as of time of writing:\n\nLinux / MacOS: Command Line for Beginners. The Linux and MacOS terminals are essentially the same, so tutorials will work for both.\nMacOS: Navigating files and folders .\nWindows: How to use the Windows command line (cmd) Note that these instructions work with Powershell too.\n\n\nTry searching for “command line tutorial &lt;Win/Linux/MacOS” for more.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Terminal help</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/terminal-help.html#life-saving-tips",
    "href": "chapters/appendices/terminal-help.html#life-saving-tips",
    "title": "Appendix A — Terminal help",
    "section": "A.4 Life-saving tips",
    "text": "A.4 Life-saving tips\nIf you don’t use those tips you’ll find the command line frustrating. If you do use them you’ll probably get to like it.\n\nA.4.1 Don’t type file and folder names, use auto-completion\nIn the terminal you almost never need to type an entire file or folder name. Instead, type the first few letters and hit the “Tab” key one or two times.\n\nOn Linux/MacOS terminals, the first “Tab” hit will auto-complete if there’s only one way to complete. If there are several, nothing happens but a second “Tab” hit will list you the possible completions.\nOn Windows, the first “Tab” hit gives you one auto-complete possibility, hit again to see others.\n\n\nThis only applies to file and folder names. The terminal won’t guess which command you type (pand plus Tab won’t be completed to pandoc).\nAuto-completion is also a good way to avoid typos. If no completion shows up, you’ve probably mis-typed the beginning.\n\n\nA.4.2 File and folder names with spaces need quotation marks\nWhen you type file and folder names that contain spaces, you should enclose them in quotation marks (either single ' or double \"):\npandoc -s \"my article 2022.md\" -o \"output april 24th.pdf\"\n\nOn Linux and MacOS if you use auto-completion on Linux or MacOS, you’ll notice that the system places \\ before the spaces. This is called “escaping” the spaces and works too, but only in those systems:\npandoc -s my\\ article\\ 2022.md -o output\\ april\\ 24th.pdf \n\nOn Windows, \\ is used to separate folders, so you can’t use it. You have to use quotes.\nYou’re better off without spaces in your file and folder names, to be honest. Linux typically uses “kebab case”, skewering words with dashes: my-article-april-24th.pdf. “Snake case” with slithering underscores is good too: my_article_april_24th.pdf.\n\n\nA.4.3 Don’t retype commands, use up arrow\nExample: run the command ls (or dir on Win). Then, at the new prompt, type the Up arrow on your keyboard: you’ll see ls (or dir) displayed again, and you only need to type “Enter” to run it again.\nType the arrow several times to see the commands you’ve entered before last, before before last and so on.\n\n\nA.4.4 Move the cursor with quick arrows\nYou’ll find that in the terminal you can’t reposition the cursor with a mouse click. Instead, you have to move it with the left and right arrows. This can be frustratingly slow. The solution is to use quick arrows that move ‘word’ per ‘word’ (where a ‘word’ is any chunk of text separated by spaces):\n\nLinux: Alt + Left/Right arrow\nMacOS: option + Left/Right arrow\nWin: Ctrl + Left/Right arrow\n\n\nFor instance, if you typed a long command like this and got an error. You realize you need to replace “procesing” with “processing”:\npandoc -s procesing/new/articles/2020/issue-02/02-article.md --defaults mydefaultsfile.md -t outputs/recent/articles/2020/issue-02/02.article.pdf \n\n(See, you should have used auto-completion to avoid the typo!) So you hit the Up arrow, the command shows again. If you hit the Left arrow, you’ll need to press the key 137 times to get to the typo. You can keep it pressed instead, but that’s still very slow. If you use Alt/Option/Ctrl + Left arrow, you’re there in 5 times. Get used to it!\n\n\nA.4.5 Ctrl + C if a command hangs\nIf you run a command and it hangs, or takes too much time to run, you can (normally) interrupt it by hitting Ctrl + C (on all systems, MacOS included).",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Terminal help</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/resources.html",
    "href": "chapters/appendices/resources.html",
    "title": "Appendix B — Further resources",
    "section": "",
    "text": "B.1 Style and copyediting manuals",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Further resources</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/resources.html#style-and-copyediting-manuals",
    "href": "chapters/appendices/resources.html#style-and-copyediting-manuals",
    "title": "Appendix B — Further resources",
    "section": "",
    "text": "B.1.1 In English\n\nNew Hart’s Rules, the Oxford style guide. Short compared to the others, and it’s good on the British vs American options.\n\nFor copyeditors: see esp. chaps 2-12 and 17-18. In all those chapters there are of course many bits that are irrelevant for you but they are easy to skip.\n\n\nThe Chicago Manual of Style. The one we preferably refer to if needed, very thorough and good for humanities, but 1000 pages long.\nPublication Manual of the American Psychological Association. Like the Chicago manual, more geared towards science, and more prescriptive. The website gives free access to simplified version of the rules for authors. But these are not useful for copyeditors (they’ll tell you to your word processor’s automatic bullet points styles, for instance).\nButcher’s Copy-editing, the Cambridge Handbook for Editors, Copy-Editors and Proofreaders. A classic too, but different in scope from the others three. Unlike them doesn’t get into specific rules of punctuation, capitalization, spelling and the like. Rather, it maps out all the things a professional copyeditor has to do. A lot are things taken care of by our templates (how you can structure a book, how you can present various bits of it). Others are more general: which aspects of the author manuscripts should be changed or not, how to communicate these changes to the author, how to communicate instructions to typesetters, etc. Gives a good sense of how professional academic copyediting is like.\nMLA Handook. The style hanbook published by the Modern Languages Association of America.\n\n\n\nB.1.2 In French\n\n[Le Ramat de la typographie](http://www.ramat.ca/], par Aurel Ramat et Anne-Marie Benoit, franco-canadien. Voir aussi le Ramat européen de la typographie. Bien structuré, complet. Inclut des comparaisons entre styles français, canadien, Chicago.\nLe Guide du typographe, par le Groupe de Lausanne de l’Association suisse des typographes (AST) et publié par l’Association Suisse des Correcteurs d’Imprimerie. Difficile à se procurer (commander directement auprès de l’association).\n\n\nEn France, il y a une pluralité de livres écrits par des auteurs individuels. Nous ne savons pas lesquels sont les plus communément utilisés.\n\nDictionnaire orthotypographique moderne (Colignon 2019). Par Jean-Pierre Colignon, publié par l’une des principales écoles de journalisme en France (CFPJ).\nAbrégé du code typographique à l’usage de la presse, par Louis Guéry. (126 pages)\nDictionnaire des règles typographiques, par Louis Guéry. (287 pages)\nOrthotypo, par Jean-Pierre Lacroux, posthume, distribué en ligne sous licence Creative Commons (Lacroux 2010). Organisation alphabétique, ne couvre pas tous les sujets systématiquement.\nLes règles typographiques, Richard Herlin.\n\n\nOuvrages qui étaient largement utilisés par le passé:\n\nCode Typographique (France, 1928-1997). Inactif.\nLexique des règles typographiques en usage à l’Imprimerie nationale, par l’Imprimerie nationale de France. Inactif (dernière édition 2002). A usage limité: organisé par ordre alphabétique, avec un choix d’entrées qui semble arbitraire (ex, “Assemblée Nationale”, “Astérisque”), sommaire (une seule page sur la structure des ouvrages). Utile sur quelques points de détails (“particule patronymique”). 200 pages.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Further resources</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/resources.html#interface-with-dialecticas-main-bibliography",
    "href": "chapters/appendices/resources.html#interface-with-dialecticas-main-bibliography",
    "title": "Appendix B — Further resources",
    "section": "B.2 Interface with dialectica’s main bibliography",
    "text": "B.2 Interface with dialectica’s main bibliography\nMore information on the bibliography is in the bibliography-section of the overleaf-document.\nJD some experiments:\n\nTried simply adding the main bib file (biblio-check.bib) as the &gt; bibliography file of an article in RStudio. Problems:\n\nIt takes circa 15-30sec to ’Read the bibliography” when opening &gt; the article, and 10-20sec again when opening the &gt; insert-citation window.\nBut the bibliographies entries don’t show up in the &gt; ‘Bibliography’ tab.\nIt looks as if either RStudio can’t read it (bug / unusual code &gt; somewhere?), or just gives up above a certain number of &gt; entries\n\n\n\nJD thought: We need either:\n\nsome way of either generating a sub-selection of the main &gt; bibliography for the article. Automated? Something like Sandro’s / &gt; crossref bibtex convertor, but for this bibliography? (Suggestion: &gt; linking via DOIs?)\nSome way of having the main biblio as one of the source in RStudio &gt; citation-insertion popup, the way Zotero appears. However: risk &gt; that it is slow because of the size.\nSome way of searching the main biblio as one of the sources in &gt; RStudio, the way CrossRef appears in the citation-insertion popup.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Further resources</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/glossary.html",
    "href": "chapters/appendices/glossary.html",
    "title": "Appendix C — Glossary",
    "section": "",
    "text": "Block\n\nA block element of a document, such as a paragraph. Blocks include paragraphs, headings, block quotes, lists, code blocks.\nBlock elements are distinguished from inline elements (arranged horizontally in lines within a block, like words) and float elements (that don’t have a fixed position in the text flow, like figures and tables).\nSome elements have both block and inline versions (images, formulas). Some have both block and float versions (images, tables).\nSome blocks may contain other blocks: block quotes can consist of several paragraphs.\nDivs are arbitrary ‘container’ blocks. They are used to group blocks into units to which special typesetting rules can be applied.\n\nDiv\n\nAn arbitrary container blocks. Divs can have a unique identifier, classes and attributes. Classes are types of Divs, attributes are features that can take various values.\nDivs are used to group blocks into a unit to which special typesetting rules can be applied. How Divs are typeset is determined by your house template and the extensions it uses.\nFor instance, this bit of markdown places a paragraph in a Div uniquely identified as firstpostulate, of type (class) statement, with a style attribute of value theorem:\n::: {#firstpostulate .statement style=\"theorem\"}\n\nA line can be drawn from a point to any other point.\n\n:::\n\nInline\n\nAn inline element, such as a word. Inlines include words, emphasized text, citations, inline formulas, inline code.\nInlines elements are distinguished from block elements (arranged vertically one after another, like paragraphs) and float elements (that don’t have a fixed position in the text flow, like figures and tables).\nSome elements have both inline and block versions (e.g. formulas, images, quotations, code).\nSpans are arbitrary ‘container’ inlines. They are used to group inlines into units to which special typesetting rules can be applied.\n\nTerminal\n\nA tool to interact with your computer via text commands. Also called “command line interface”, “shell”.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Glossary</span>"
    ]
  },
  {
    "objectID": "chapters/appendices/references.html",
    "href": "chapters/appendices/references.html",
    "title": "Appendix D — References",
    "section": "",
    "text": "Chicago Press, University of. 2010. The Chicago Manual\nof Style: The Essential Guide for\nWriters, Editors and\nPublishers. 16th edition. Chicago:\nUniversity of Chicago Press.\n\n\nColignon, Jean-Pierre. 2019. Dictionnaire orthotypographique\nmoderne. 1er édition. EFE - CFPJ Editions.\n\n\nCollectif. 2002. Lexique des règles typographiques en usage à\nl’Imprimerie nationale. Paris: Imprimerie\nnationale.\n\n\nDoe, Jane. 2019. “Another Imaginary Article.” Review of\nIdeas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\n———. 2020. “An Imaginary Article.” Review of Ideas\n10: 13–27. https://doi.org/10.0000/123456789.\n\n\nDoe, John. 2018. “Introduction.” In An Imaginary\nBook, by John Smith. Mainville: Ideas Press.\n\n\nJones, Jane. 2019. “Yet Another Imaginary Article.”\nReview of Ideas 9: 7–47. https://doi.org/10.0000/123456789.\n\n\nLacroux, Jean-Pierre. 2010. ORTHOTYPO - Dictionnaire raisonné\northographe et typographie Française. 2e édition.\nParis: La Maison du Dictionnaire.\n\n\nSmith, John. 2018. An Imaginary Book. Mainville: Ideas Press.\n\n\nWddingham, Anne. 2014. New Hart’s Rules:\nThe Oxford Style Guide. 2nd edition. New York,\nNY: OUP Oxford.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>References</span>"
    ]
  }
]