[["index.html", "The Open Manual of Markdown Style Chapter 1 Preface 1.1 Background 1.2 How to edit this book", " The Open Manual of Markdown Style Julien Dutant and the dialectica team 2022-03-22 Chapter 1 Preface The Open Manual of Markdown Style is a open access, open source manual of style. It is focused on a markdown-based publishing process. Its aims at enabling open access publishers, copyeditors and authors to produce modern publications with high-quality typesetting. 1.1 Background This manual was created to help the transition to open access of Dialectica, an international journal in philosophy. 1.2 How to edit this book The book is written in markdown. It usesbookdown, an extension of RStudio, to produce the book from markdown files. The files to generate the book are at: dialectica-workhouse/guide 1.2.1 Two methods for editing You can edit the book in two ways: with RStudio, or with a simple text editor. The first method is comfortable for writing large parts, the second best suited to small changes. Only the first allows you to regenerate the book with your updates. 1.2.1.1 Editing with RStudio Install RStudio, if you don’t have it already. Select Tools &gt; Install packages…, enter bookdown, install. Go to dialectica-workhouse/guide. Open the project file dialectica-guide.Rproj. You’ll see the chapter files and you can edit them. To regenerate the book with your changes, make sure you have one of the chapters open in the Rstudio editor. Go to the menu “Build” and click either “Build all” or “Install and restart” (or use the shortcut, Shift Cmd B on MacOS or Shift Ctrl B on Windows).1 1.2.1.2 Edit with a text editor You can edit and add .Rmd files with any editor you use for markdown (Notepad, Emacs, Atom, Sublime, RStudio, etc.). Without RStudio and its bookdown add-on you can’t generate the book. 1.2.2 Tips for editing 1.2.2.1 Basic tips The files have the extension .Rmd. You can edit them like ordinary markdown files.2 Avoid naming footnotes [^1], [^2] as these are likely to be duplicates across the book. Rather use some short chapter id or custom name, [^bib-1] or [^howtofixtables]. The editor in RStudio has a “content outline” button at the top right (next to the visual mode button). Use it to navigate the markdown files. 1.2.2.2 Structure Chapters are level 1 heading, coded # or with a ==== underline in markdown. Files named 01 should start with a chapter heading. The chapters are organized into parts: publishing, copyediting. These are indicated at the beginning of a chapter with the code: # (PART) Publishing {-} 1.2.2.3 New files, filenames Files are included in the book in numerical order: 01, 02, 021, 022, 03, … etc. Note that 021 is printed between 02 and 03. This makes it easy to create sub-parts. The numbers don’t need to, and typically won’t correspond to chapter numbers in the generated output. We can leave gaps between numbers to easily interleave new chapters. Create new files with a text editor or by saving an old one under a new names. Files must have the .Rmd extension or they won’t be printed. File naming conventions 01, 02 are used for files that start a chapter. 021, 022 are used for subparts of a chpater. the book is divided into parts: authoring (aut), copyediting (cop), publishing (pub). We use these at the beginning of file names: 01-pub-why-markdown.Rmd. Authoring has numbers 00 to 09, copyediting 10 to 29, publishing 30 to 49. The preface is in index.Rmd. "],["introduction.html", "Chapter 2 Introduction", " Chapter 2 Introduction This part gives instructions for authors. "],["preparing-a-ms-word-manuscript.html", "Chapter 3 Preparing a MS Word manuscript", " Chapter 3 Preparing a MS Word manuscript Use styles: Heading 1, Heading 2 etc for headings Title for the title (optional) Author for author (requires creating a style called “Author) If the document contains complex mathematical symbols or formulas, make sure that these are put in “equation mode”. This ensures that pandoc converts them to LaTeX code and spares you the need to re-encode them. "],["preliminaries.html", "Chapter 4 Preliminaries 4.1 What you need 4.2 Working folder", " Chapter 4 Preliminaries This chapter explains what you need to set up a markdown production chain. 4.1 What you need 4.1.1 Skills Use a text editor (RStudio will do). Optionally, how to use the command line interface.3 The very basics are enough: navigate to a directory, run a command. 4.1.2 Software All the software needed is free. Pandoc (converts tex files to Markdown files). Installations instructions here. MacOS users: optionally, install using homebrew, a command-line tool that can be used to install almost anything, esp. open-source tools (e.g. LaTeX), and more importantly to keep them all updated. RStudio (visual Markdown editor where the papers will be edited). Download RStudio 1.4 beta’s latest version. a LaTeX installation. RStudio installs one if needed, or you may already have one installed if you use LaTeX already. To check whether you have it installed, after you’ve installed pandoc you can run pandoc \\--version on the command line and it will tell you whether TeX is installed. 4.2 Working folder Create a working folder for your journal. This may be shared between copyeditors if you’re a team. Suggested folder structure: archive/ vol-12/ issue-01/ smith-et-al/ singh/ originals vol-13/ issue-02/ doe/ fernandez/ issue-03 wang-li/ processing vol-13/ issue-02/ doe/ fernandez/ issue-03 wang-li/ finished vol-12/ issue-01/ smith-et-al/ singh/ resources Each article has its own folder, e.g. vol-13/issue-02/doe. These structures folders are moved or copied across different top folders: originals contains the author’s submitted files. processing the files you’re currently copyediting. If collaborating, treat each article folder here as the workspace of that article’s copyeditor: they can use it as they see fit, creating multiple versions, running tests and so on. finished contains the copyeditor’s finished products. archive can be used to archive the processing files, if needed. resources stores templates, configuration files, fonts, etc. "],["generate-outputs.html", "Chapter 5 Generate outputs 5.1 House style outputs 5.2 Troubleshooting", " Chapter 5 Generate outputs Some of the instructions in this section are specific to the setup of folders of Dialectica’s working team. 5.1 House style outputs 5.1.1 Pre-requistes You need: Pandoc version 2.17+. A LaTeX installation. (LaTeX is not a single software but a large collection of programs, or “packages”, that work together to generate PDFs. This is why we call it an “installation”.) The STIX Two fonts and Libertinus (incl. Libertinus Display) fonts, available in dialectica-workhouse/resources/fonts. If you don’t install them, the PDFs will still be generated but with some default fonts. On MacOS, Apple’s “Command line tools for Xcode”. Optional. If you’re unsure whether Pandoc and LaTeX are already installed in your system, open a terminal and enter the following commands. See “Using the terminal” below on how to do this. For Pandoc: pandoc -v For LaTeX: pdflatex -version If you get error messages, they are not installed. If you get version numbers, they are installed. This works on all systems. 5.1.1.1 Windows To install Pandoc, see instructions on Pandoc’s website. I recommend using the installer; the Chocolatey package manager is complicated to install and doesn’t always provide the latest versions. To install a LaTeX installation, use MikTeX or TexLive). I recommend MikTeX. * For MikTeX: download the installer, launch it. Select “install only for this user”, and for installing packages on the fly, select “Ask me first”. * For TexLive: download the network installer, launch it. When/if offered the choice, choose to install “all” or “everything”. This can take ~30 minutes depending on download speed. The advantage of MikTeX is that it will only install basic packages and download any additional needed packages on the fly. So be aware that if you have chosen MikTeX, your first conversions to PDFs will open a window asking you to confirm the download of packages and will do some installation processing (e.g. for special symbols fonts); all this will take time. But don’t worry, once all is progressively installed subsequent PDF generation will be much faster. To install fonts, open the Explorer and navigate to the folder where the fonts are located (dialectica-workhouse\\resources\\fonts). Open the folder of the desired font (for Stix Two, STIX Two fonts\\OTF).. Select all the files in that folder (regular, italic, bold, …), right-click and chose “Install font”. 5.1.1.2 MacOS To install Apple’s Command Line Tools. This is necessary even if you’re not going to use the command line your self: it installs the software needed to run the Makefile file. Open the Terminal (in Applications &gt; Utilities). Type the following and hit Enter: xcode-select --install This will download and install the software from Apple (~100Mb, a few minutes). When that is done close the Terminal window. If you get an error “command line tools already installed”, the software is already installed. You can close the window and proceed. Optional. If you are happy to use the command line, I recommend installing Homebrew, a software manager that allows you to manage and update your software from the command line. It is installed by pasting a one-line command in the terminal, see the instructions on Homebrew’s webpage. Once it is installed: - Enter brew install pandoc to install Pandoc - Enter brew install --cask mactex to install a LaTeX distribution. - Enter brew install font-stix to install the Stix fonts, brew install font-tex-gyre-termes to install the TeX Gyre Termes font. The font QTBasker must still be installed in by clicking its file (see below). Without Hombrew, follow the instructions below. To install Pandoc, download the installer on Pandoc’s website. To install a LaTeX installation, download the installer on MacTeX’s webpage. This the Mac version of TexLive. (Alternatively, use MikTeX, but for some reason it is less popular on Mac and I haven’t tried it.) To install fonts, open the Finder and navigate to the folder where the fonts are located (dialectica-workhouse/resources/fonts). Open the folder of the desired font (for Stix Two, STIX Two fonts/OTF). Double-click each file there (regular, italic, bold, …), and in the windows that appear, select “Install font”. You can check that the fonts are installed by opening the Font Book (in the Applications folder, or Cmd + Space and search for Font Book) and selecting the User tab. 5.1.1.3 Linux To be added. 5.1.2 Single article: generating outputs from RStudio Create a RStudio project for the article you are working on. This is explained in the next chapter of the guide. Copy the script and master files in your article’s project folder. The files needed are: MacOS/Linux: master.md, Makefile Windows: master-win.md, make.bat Dialectica-specific. These can be found in the workhouse folder at template/VVV/extras/copyeditor-scripts, where VVV is the latest version of the template (e.g. 1.1). It’s good to copy all in case someone working on a different system than yours needs to regenerate your article’s output. (These are very tiny files.) Edit the master file(s) to indicate your source file name. Open master.md (MacOS/Linux) and/or master-win.md. Find the lines: imports: - source.md Replace source.md with the name of your article’s markdown file, save. In RStudio, open your article’s project and go to the menu Build &gt; Configure Build Tools. Enter the following choices: Project build tools: “Makefile” Makefile directory: leave as default (Project Root). Additional argument: one of the following: leave empty to generate both html and PDF outputs in final style. html to generate only html, final style. pdf to generate only PDFs, final style. tex or latex to generate LaTeX files, final style. proof to generate a PDF in proof style. debug to attempt to generate a PDF file, and create a log file of the LaTeX processing output. Useful to find where things go wrong when you get an Error producing PDF error. The log file can be opened in RStudio, see the Troubleshooting section below for some explanation. Note: there are two reasons why you may want to use the html option here when starting to copyedit an article. PDF generation is slow, and it is often buggy and can break down with no output at all. By contrast, html generation is quick and always produces an output (in the worst case you get garbage). Once that is done, you can generate outputs in one click. in Rstudio you either go to menu -&gt; build -&gt; build all, or use the shortcut shift-cmd-B (on Windows shift-ctrl-B). It creates an html and pdf in the article folder, or whatever you “Additional arguments” option generates. Note: the script will generate outputs for all the .md files in the folder. This should be harmless, but can take time. If you want one markdown file to be skipped, you have to move it in a subfolder or change its extension to .mkd for instance. Troubleshooting: On MacOS, you get and alert “Cannot run pandoc-crossref because it is not from a trusted developper”. Solution: close the alert (don’t chose “Move to Bin”!). In Finder, go to the folder dialectica-workhouse/resources/filters. Cmd-click the file pandoc-crossref (not pandoc-crossref.exe), and chose “Open”. You will get the same alert but this time with the option to Open. Select it, nothing should happen but after that you should be able to build the outputs in RStudio. If you get a pdf file with a cover but no title or article content, you probably forgot to update the filename in master.md or master-win.md with your markdown source file’s name. If it doesn’t create an html, your pandoc is not updated. Ask us for help if needed. If you get an error message about Stix TWO, you haven’t installed the font in your computer. See above. If you get an error message “Error: PDF output not produced”, Pandoc is probably able to generate html and LaTeX output (you can test with the options above), but the conversion from LaTeX to PDF (done by a LaTeX engine such as pdflatex, xelatex, lualatex) fails. In those cases it’s useful to use the debug option generated above. You will get a .log file that gives you more detail about the error. The file can be opened in RStudio and its structure is explained a bit in the Troubleshooting section below. 5.1.3 Using the terminal (optional, feel free to skip) Some instructions below refer to the “Terminal”. By this we mean the command line interface (CLI), a.k.a. Terminal in MacOS, Command Prompt or PowerShell in Windows, Terminal or Shell in Linux. In the RStudio instructions, they are optional (for information only), so you don’t need to use the command line. But the basics are simple: On Win, enter “PowerShell” or “cmd” in the search bar next to the start menu. Alternatively, open start menu look for Windows Accessories &gt; PowerShell or Windows Accessories &gt; Command Prompt or Windows Accessories &gt; Command Prompt. On MacOS, hit Cmd + Space to open Spotlight search and search for Terminal, or look for Utilities &gt; Terminal in your applications folder. On Linux, you probably already know how to do this. In Ubuntu, for instance, hit Ctrl+Alt+t, or search for ‘terminal’ in the Dash menu (top left corner). When you open the terminal a line shows up waiting for your input, e.g.: user@my-pc-laptop ~ % or C:Users\\MyName&gt; “Entering” or “running” or “executing” a “command” on the terminal means typing some text and press the “Enter” key. (Or copying / pasting it: note that in some terminals the usual copying / pasting shortcuts don’t work and you need instead to right-click and chose “Paste”). For instance, type the following and press enter: pandoc --version If you get an error message, this means that pandoc is not installed (not somewhere your system finds it, at any rate). If you get instead something like: pandoc 2.17.1.1 Compiled with pandoc-types 1.22.1, texmath 0.12.4, skylighting 0.12.2, citeproc 0.6.0.1, ipynb 0.2 Then you have just “run” or “executed” the command “pandoc” with the option “--version”; the programm pandoc has replied by printing out its version number. For most terminal tasks you also need to be able to change folders (aka “directories”) and list the files contained in a folder. When you open the terminal you are located “in” or “at” a given location in your system’s file - normally, your starting location is your user’s main folder. On Windows the full path of the folder you are “in” is displayed at the beginning of the line: C:\\Users\\MyUserName&gt; On Linux and MacOS you might only see the name of the folder you are in (MyUserName), not the full path; and it might just be ~, which is a shorthand for your home user folder. Now where you are located matters to the execution of most commands. For instance, if you entered: pandoc article.md -o article.pdf This asks pandoc to convert the file article.md into article.pdf in the current folder. If you don’t run that command while being located in the folder where article.md is, you will get an error message telling you that there is no file article.md. So basic terminal usage requires you to know which folder you are currently in, and how to change folder, and to refer to files in different folders. You can learn this in a few minutes using some tutorial like: MacOS: see first navigating files and folders and then see this list of terminal commands. Windows: see the section on “working with files and directories” in this tutorial. Linux: see this tutorial. Note the Linux and MacOS terminals are pretty much the same, so tutorials for one will work for another. 5.1.4 Single article: generating outputs from the terminal with make commands Copy the script and master files in your article’s project folder. The files needed are: MacOS/Linux: master.md, Makefile Windows: master-win.md, make.bat Dialectica-specific. These can be found in the workhouse folder at template/VVV/extras/copyeditor-scripts, where VVV is the latest version of the template (e.g. 1.1). It’s good to copy all in case someone working on a different system than yours needs to regenerate your article’s output. (These are very tiny files.) Edit the master file(s) to indicate your source file name. Open master.md (MacOS/Linux) and/or master-win.md. Find the lines: imports: - source.md Replace source.md with the name of your article’s markdown file and save. Generate outputs with a make command. Once the files are in the article’s folder, you can generate outputs with the simple terminal commmands below. Open a terminal and navigate to your article’s folder. Enter one of the following commands: make: default, generates html and final style PDFs. make proof: generates html and proof style PDFs. make html: generates html only. make pdf: generates pdf only. make tex or make latex: generates LaTeX file only. 5.1.5 Single article: generating custom outputs from the terminal The commands below don’t require you to have the Makefile or make.bat file, but you’ll need a master.md (MacOS/Linux) or master-win.md (Win) file. 5.1.5.1 simple PDF Go the folder of your article, say processing/2020-01-special-issue/01-smith. Enter: pandoc -L ../../../template/1.1/filters/collection.lua master.md -d ../../../template/1.1/offprint.yaml -M offprint-mode=1 -o article.pdf On Windows, replace master.md with master-win.md. Explanation of the parameters: ../../../template/1.1/filters/collection.lua the Collection filter that generates outputs from a master.md file. master.md your master file, indicating where the source is and various parameters and metadata needed for a house style output. -d ../../../template/1.1/offprint.yaml the pandoc defaults (i.e.  parameters) file for single-article output. -M offprint-mode=1 tells Collection to print the first source in the imports list from master.md. -o article.pdf name of the output you want to create. Change to NNN.tex for LaTeX output. You can add pandoc parameters to that line, notably: --verbose for verbose output, giving you information about what Pandoc does as it processes the article and any errors it encounters. This includes the LaTeX log, which is useful for LaTeX debugging. Tip. once that’s done, entering the following will normally open the output file in whatever software opens PDFs by default in your system: On MacOS / Linux: open OUTPUT.pdf On Win: start OUTPUT.pdf 5.1.6 Issue outputs Ensure the issue folder has a Makefile and master file. Dialectica-specific: these can be found in workhouse folder at template/VVV/extras/copyeditor-scripts-issue, where VVV is the latest version of the template (e.g. 1.1). Careful not to confuse copyeditor-scripts and copyeditor-scripts-issue: you want the latter. Alternatively, copy the master.md file and create a custom Makefile (see below). Edit the master file. Open master.md and check its imports field. This should specify the list of source files for the issue, in the order desired. For instance: imports: - 01-michels/michels.md - 02-benyami/benyami.md - 03-dicher/dicher.md - 04-kim/kim.md - 05-reinmuth/reinmuth.md - 06-sagi/sagi.md - 07-cook/cook.md - 08-djordjevic/djordjevic.md Use a make command to generate an issue or offprint output. Open a terminal and navigate to the issue folder. The following commands will generate issue outputs: make, or make pdf whole issue pdf. make tex or make latex issue LaTeX file. make off1 pdf of the first paper in imports, and similarly for make off2, make off3 etc. make off1tex for the first paper in imports in LaTeX version. make bare empty issue (cover, backmatter) (for design purposes). Also make baretex for the LaTeX version. By default the issue output is name issue.pdf and offprint outputs are named offprint1.pdf, offprint2.pdf etc (and similarly for LaTeX outputs). If you want them to be named after the doi and source files names instead, generate a custom Makefile (see below). Generate a custom Makefile (optional). Open a terminal and navigate to the issue folder. Enter the following command (where 1.1 is replaced by the template’s latest version number): pandoc -L ../../template/1.1/filters/makemakefile.lua master.md -t plain -o Makefile This will generate a Makefile with the same commands (off1, off1tex) but whose offprint outputs will take the name of the respective sources (djordjevic.pdf, etc). The issue output will be named after the doi if one is specified, e.g. dial.v74.i1.pdf. Warning. The custom Makefile must be regenerated each time a source’s path or filename is changed or the issue doi modified. 5.2 Troubleshooting 5.2.1 Error producing PDF Problem. When trying to produce a PDF, you get a message such as: Error producing PDF. ! Undefined control sequence. l.354 ... Meaning. Something in your markdown article or your bibliography file causes an error in the pdf engine. The second line is a short description of the kind of error the engine encounters. The third line tells you at which line number it occurs but not in your markdown document (explanations below). Explanation. pandoc produces PDFs in two steps: md -&gt; TeX (done by pandoc itself) and TeX -&gt; PDF (delegated to a TeX processor programme, pdflatex or xelatex). This message is for errors in the second step, in the pdflatex or xelatex programme. What to do to fix it depends on whether you’re familiar with TeX. Low tech fixes? If you’re not familiar with TeX, a few things to try: You should still be able produce other outputs than PDFs. If you’re not familiar with TeX, you should produce an HTML output, and see if you can spot a point where the manuscript goes wrong. You should produce a LaTeX log. (This can be done from RStudio or the command line, cf above.) The log file can be opened in a text editor (including RStudio). If you encountered a LaTeX error this typically appears towards the end of the log. But it’s very long and arcane. See the section on the log file below for some explanations. More time-consuming but guaranteed result. Isolate the error. Make a copy of your file and trim it down until you can generate a PDF, as follows: Disconnect the bibliography file. In the metadata block, put a # in front of the bibliography line: # bibliography = smith-paper-references.bib This deactivates the line. Try producing a PDF; if you don’t get the error, you know that the source is something in your bibliography file. Otherwise continue. Isolate the error by halves. Remove the second half of the document. Try producing a PDF. If you get an error, you know the problem is in the first half; divide it in two, repeat. When you get to the point where you don’t get an error (at a given point), start re-adding parts of the text one by one, until you identify what addition generates the error. In that process you may get “warnings” you didn’t get before, e.g. because you’ve cut out the footnotes associated with a paragraph. Don’t worry about them, they’ll disappear once the relevant bits are re-added. Hi-tech fixes. Output a .tex version of your document, OUTPUT.tex. Open it. * you can check the line indicated in the error message. Do you see a TeX mistake there? * run lualatex on the file. You can do so from a TeX editor such as TeXshop or simply from the command line: ``` lualatex OUTPUT.tex ``` This generates a bunch of auxiliary files, including a `OUTPUT.log` and terminates in the same error `pandoc` reported. Now open the `.log` file and scroll towards the end to read the error messages. * If that&#39;s not enough to show what&#39;s wrong with the original markdown file (or your pandoc template for LaTeX output), you can try and modify the LaTeX file until it compiles correctly. Good luck! 5.2.2 A brief guide on Pandoc’s PDF output logs When asking pandoc to produce a PDF you can produce an output log (see the sections on generating outputs to see how to do this with RStudio or the terminal). The file begins with [INFO] messages about Pandoc’s source to LaTeX conversion. Typically this is just information about the `filters’ that Pandoc runs, e.g.: [INFO] Running filter ../../../resources/filters/abstract-to-meta.lua [INFO] Completed filter ../../../resources/filters/abstract-to-meta.lua in 70 ms Then, [makePDF] messages about the commands Pandoc executes to launch a LaTeX engine that converts the LaTeX to PDF. The “Command line” one tells you which LaTeX engine is used, here lualatex: [makePDF] Command line: lualatex &quot;-halt-on-error&quot; &quot;-interaction&quot; &quot;nonstopmode&quot; &quot;-output-directory&quot; &quot;&lt;TEMPDIR&gt;&quot; &quot;&lt;TEMPDIR&gt;/input.tex&quot; The “Source” message copies the entire LaTeX file that Pandoc sends to the LaTeX engine. It can be useful for a quick look, but it’s more convenient to generate that LaTeX file separately (see how above). When you have LaTeX error messages that give a line number, that is the line number in the LaTeX file (hence it’s easier to find those when you open the separate LaTeX file in a text editor with numbered lines.) [makePDF] Source: % Options for packages loaded elsewhere \\PassOptionsToPackage{unicode}{hyperref} \\PassOptionsToPackage{hyphens}{url} \\PassOptionsToPackage{dvipsnames,svgnames*,x11names*}{xcolor} % ... % more LaTeX code The LaTeX source is usually very long (200-500 lines + at least the number of lines in your markdown source). To find the next section, you can search for [makePDF] Run in the file. The “Run” messages ([makePDF] Run #1, [makePDF] Run #2…) give the LaTeX engine’s output messages. Generating PDFs from LaTeX typically requires several ‘runs’ of the LaTeX engine on the file: the first run generates various bits stored in an auxiliary file (e.g., which page a heading ends in, whether a citation is labelled Smith 2020 or Smith 2020a, …) and the second run uses them to finalize the PDF. Under each [makePDF] Run # you get the full LaTeX Log of the LaTeX engine. This is where you’ll find information, warnings and errors concerning PDF generation. For instance: [makePDF] Run #1 This is LuaHBTeX, Version 1.13.0 (TeX Live 2021) restricted system commands enabled. (/private/var/folders/j2/zp5ggjhx12xccgy5_wx32tfw0000gp/T/tex2pdf.-12ef5244637e dfd8/input.tex LaTeX2e &lt;2020-10-01&gt; patch level 4 L3 programming layer &lt;2021-02-18&gt; (/usr/local/texlive/2021/texmf-dist/tex/latex/koma-script/scrbook.cls Document Class: scrbook 2021/03/17 v3.33 KOMA-Script document class (book) (/usr/local/texlive/2021/texmf-dist/tex/latex/koma-script/scrkbase.sty ... (/usr/local/texlive/2021/texmf-dist/tex/latex/amsfonts/amsfonts.sty)) (/usr/local/texlive/2021/texmf-dist/tex/latex/stmaryrd/Ustmry.fd) LaTeX Font Warning: Font shape `U/stmry/m/n&#39; in size &lt;5.5&gt; not available (Font) size &lt;5&gt; substituted on input line 70. ... ... Underfull \\hbox (badness 2469) in paragraph at lines 559--574 []\\TU/STIXTwoText(0)/m/n/10 I will also adopt the or-tho-dox ap-proach to meta- ontology, \\TU/STIXTwoText(0)/m/it/10 neo- Underfull \\hbox (badness 1158) in paragraph at lines 559--574 \\TU/STIXTwoText(0)/m/it/10 Quineanism\\TU/STIXTwoText(0)/m/n/10 . Ac-cord-ing to neo-Quineanism, a the-ory’s on-to-log-i-cal [1] [2] [3] [4] [5] [6] [7] ... LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right. ) (see the transcript file for additional information) 780 words of node memory still in use: 6 hlist, 2 vlist, 2 rule, 18 glue, 4 kern, 1 glyph, 26 attribute, 72 glue_sp ec, 26 attribute_list, 1 write, 1 user_defined nodes avail lists: 2:495,3:199,4:152,5:788,6:105,7:7249,8:76,9:429,10:25,11:651 Output written on input.pdf (18 pages, 113569 bytes). Transcript written on input.log. The above is a LaTeX log of a file that converts into PDF without error. The overal structure is: PDF engine: This is LuaHBTeX, Version 1.13.0 (TeX Live 2021) Document class: Document Class: scrbook... LaTeX packages used and their own messages: (path/to/package.sty. Here the package Ustmaryrd (a font collection) issues a warning that it’s using a 5pt characters in the absence of 5.5pt characters. input line 70 refers to the line in the LaTeX file. pages generated: [1] [2] [3] [4] ... indicate that the corresponding page is “shipped out” (generated and saved into the PDF). This means we have no error or warning at pages 1 to 4, yay! Underfull and overfull \\hbox warnings, e.g. Underfull \\hbox (badness 2469). These indicate that LaTeX has generated a less-than-ideal horizontal line: an horizontal line with a bit too much, or not enough, text. Typically nothing to worry about: the text is just slightly more or less spaced than usual. However, very bad cases of overfull can be a table or long equation or image or some unbreakable large item that sticks out of your text block. The easiest is to check for them visually in the PDF output, but if you are after perfection you can check all the ones mentioned in the log. To know which pages they’re on, look for [n] page shipout indicators before and after the overfull message. If compilation runs without error, the end messages. These includes the warning if a LaTeX rerun is needed (LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.), which you don’t need to worry about because Pandoc takes care of this, and statistics about the output (Output written on input.pdf (18 pages, 113569 bytes).) If the PDF building from LaTeX has failed, you will see LaTeX error messages. For instance: ! Missing $ inserted. &lt;inserted text&gt; $ l.6 ! ==&gt; Fatal error occurred, no output PDF file produced! Transcript written on dummy.log. The error message starts with !, followed by a (more or less useful) description of the message, and an excerpt of the LaTeX code before and after the error occurred, and the line the engine was processing when the error occurred. Here the error was a missing $: in LaTeX $ is used to surround mathematical formulas, and each ‘opening’ dollar sign must be matched with a ‘closing’ one. The error was produced as the engine was processing line 6. Important. The line at which the error occurred is not necessarily the line where the mistake is. For instance, with matching $ the error is at the point where the engine realizes that the number of $ isn’t matched. But typically the mistake was earlier on, where a $ sign should have been. To diagnose and solve LaTeX error you need knwoledge and experience of LaTeX, which is beyond the scope of this guide. It often helps to make an internet search on the error message text. 5.2.3 pandoc says “Error”unknown option “citeproc”” Your need to update pandoc to a newer version. “Citeproc” (the pandoc extension that prints bibliographies, and replaces BibTeX/BibLaTeX) is only in versions &gt;2.11 (september 2020). How to update depends on how you’ve installed it: download from pandoc page, or do brew –upgrade (if you’re using homebrew for MacOS), etc. 5.2.4 pandoc says pandoc: FILENAME: OpenBinaryFile: file not found pandoc doesn’t find one of the files needed. The instructions above work only if: your execute the pandoc command while located in the folder that contains your markdown file and its bibliography while. (Learn how to navigate folders in the command line, and go where your markdown file is.) that folder is located three folders down from the workhouse’s base folder (the folder where the processing, resources folders are located). So your markdown file can be in: processing/2020-01-special-issue/01-michels finished/2020-02-issue/01-elzein … The file resources/defaults.yaml contains our default settings for pandoc, and they also assume that your file is three folder down from the base. This is why we preface resources/defaults with ../../../ in our pandoc command (to indicate that the file is three folder up from where you are when you run pandoc). If you want to run pandoc with our settings on a file that’s located elsewhere, you can use the full command. You can figure it out from resource/defaults.yaml. At present this would be: pandoc --standalone --pdf-engine=xelatex --citeproc --csl=PATH/TO/dialectica.csl --template=PATH/TO/dltc-template.tex SOURCE.md -o OUTPUT.pdf but the details might change as we update our defaults. You may add any additional option you wish. PATH/TO/ should be replaced with the path from your folder to the templates. For instance, if the templates and style files are respectively in in: journal-new/design/templates journal-new/biblio/ and your manuscript is in: journal-new/articles/issue-01/ You could try: pandoc --standalone --pdf-engine=xelatex --citeproc --csl=../../biblio/biblio-style,csl --template=../../design/templates/dltc-template.tex SOURCE.md -o OUTPUT.pdf That is, ../../ going two folders up (hence at journal/new) and from there down biblio in one case and design/templates in the other. You can also create your own defaults file mydefaults.yaml in a text editor, with contents like: standalone: true pdf-engine: xelatex citeproc: true csl: ../../biblio/biblio-style,csl template: ./../design/templates/dltc-template.tex Save it next to your manuscript and run pandoc with: pandoc -d mydefaults SOURCE.md -o OUTPUT.pdf "],["about-markdown-copyediting.html", "Chapter 6 About Markdown copyediting 6.1 Aims 6.2 Style 6.3 What to encode 6.4 About Markdown 6.5 Advance warnings", " Chapter 6 About Markdown copyediting NOTE TO SELF: this chapter should be reorganized. and probably divided. It has three components: - the aims of markup editing, what markdown is, and the like. Not hands-on, best moved to the publishing part. - basics of markdown syntax, ‘advance warnings’, using RStudio. This is hands-on, should be here. There should also a roadmap to the copyediting chapters ahead. - detailed prescriptions about what to encode or not. Not sure where to fit that. 6.1 Aims In an automated copyediting workflow, the job of the copyeditor isn’t to fine-tune the appearance of the output (fonts, spacing, etc.) Rather, the copyeditor’s job is to encode all, and only, the manuscript’s features that the automatic converter needs to know about. Typical manuscripts (MS Word documents, LaTeX file) contain both too much and too little information for a publisher’s purposes. A MS Word file contains information about font use and margin size, which the publisher must get rid of since they’re applying their own font and margins. It also typically fails to encode crucial information in in a machine-readable way. For instance, an author may: use mere boldface to indicate their section titles: 1. Methods. A human reader understands that they mean a section heading. But an automatic converter needs to know that this is section title, and not a simple bold text, to typeset it correctly. manually write ‘(Dupuis 2020, pp. 29-42)’ for their citations. If an automatic converter knows that this is a citation of a given paper, at a given page range, it can turn it into a link, format it consistently throughout the journal (instead of ‘2020: 29–42’ in some papers and ‘2019, pp.12-15’ in others), and check that all and only references cited appear in the bibliography. manually write internal cross-references (“see fn. 6”, “see page 8”). If an automatic converter knows that these are meant to refer to other parts of the text, they can turn them into links and adjust them if the numbering changes. Our copyediting task is to remove unnecessary formatting, and turn important features into codes that the automatic processor can pick up and deal with. Markdown is a light-weight, intuitive way of encoding meaningful features. For instance: a *simple* solution encodes a word that needs to be emphasized (typically, italics, but it’s for the automatic converter to decide). # Methodology encodes a heading titled “Methodology”. [@Doe2019, 22-29] encodes a citation of the pages 22 to 29 of an article that the converter will find under the name Doe2019 in the article’s associated bibliography file. 6.2 Style We will rely on the Chicago Manual of Style in most cases, except where we state otherwise. 6.3 What to encode Here is a list of features we need to encode in a way that our automatic processor understand. The list is in progress; and not everything on that list can be handled yet. Feature Syntax? Imple men-tation? Note Headings [ x] [x] Paragraphs [ x] [x] Footnotes [ x] [x] Emphasis (italics, bold) [ x] [x] Superscripts and subscripts [ x] [x] Citations [ x] [x] Cross-reference: heading [ x] [x] Cross-reference: footnote [ x] [ ] Cross-reference: specific location [ x] [ ] Must be handled separately in PDF vs HTML. Cross-reference: image, figure, table [ x] [ ] Cross-reference: theorem, statement Quotations: block quotations [ x] [x] Encoding the source too? Quotations: inline [ x] [x] Unnecessary. Ordinary ’ or ” is enough. Lists: numbered, unnumbered [ x] [x] Lists: continuously numbered throughout the text [ x] [x] Lists: ad-hoc numbers ((9’), (a*)…) [] [ ] Statements: simple indented blocks [ x] [x] Tables [ x] [x] Tables: column alignment [ x] [x] Tables: cells spanning several rows or cols [] [x] handled by pandoc but not documented yet Tables: custom borders [] [ ] Formulas [ x] [x] Images [ x] [x] Links [ x] [x] as bib entries or footnotes Columns (incl. formulas side by side) [ x] [x] Here are some features not to be preserved: Feature Note Links in the text Preferably as bibliography entries, otherwise in footnotes Curly quotes handled by pandoc Special positioning of formulas, tables, … To be avoided as much as possible Note on special symbols: Special symbols must typically be preserved. For instance, the double square brackets should not be entered as [[ and ]] but with their LaTeX codes \\\\llbracket and \\rrbracket. 6.4 About Markdown Markdown is a syntax enhance plain tex with machine-readable information, a.k.a. ‘markup’. More specifically, we’ll use pandoc’s Markdown - the variant of that syntax that is most suited to academic texts and that is fully understood by our automatic converter, pandoc. The copyediting files we work on are thus in pandoc’s Markdown format (extension .md). These are just plain text documents, which can be edited with any text editor (Notepad, TextEdit, …), but where we use a certain codes to encode information needed by our automatic document converter (pandoc). For instance, a document may contain the line: In this article, I will prove that the *metaphysical* question is not nonsense. where the * encode the fact that the word “metaphysical” is emphasised. The automatic converter can pick up on that information and typeset the word accordingly in the PDF and HTML outputs. Typically, emphasized words are typeset in italics, but we could decide to typeset them with small caps or letter spacings as well. So we only encode the fact that the word is to be emphasized, using the * notation, and leave the rest to the converter. The official documentation of pandoc’s Markdown can be used to supplement the instructions below. 6.5 Advance warnings 6.5.1 Watch out for special characters Used in certain ways, characters below (and some others) are treated as formatting instructions by Markdown: \\ &amp; * $ [ ] _ @ Normally, you shouldn’t have to worry about them. But if they aren’t visible or your markdown file generates error when turned into PDF, they may be the culprit. Typically the error can be avoided by ‘escaping’ the character, i.e. preceding it with a backslash. Hence: \\&amp; means &amp; (nb, mandatory in BibTeX files!) \\* means * \\\\ means \\ \\$ means $ Etc. The one exception is the square brackets. Markdown syntax allows \\[ ... \\] to be used to mark display formulas (mathematical or symbolic formulas that are shown on their own line) and \\( ... \\) inline formulas (formulas in the middle of the text). We prefer using the other syntax to write formulas, $$ ... $$ for display formulas and $ ... $ for inline one. Unfortunately, RStudio’s visual editor uses the former convention. So if you try and escape square brackets or parentheses this might fail and your escape bracket may be wrongly understood as an equation marker (more on this below). Besides that escaping works well. Here are some problem cases you might encounter: A reference cited is titled Fear &amp; Loathing in Las Vegas. You have the title with &amp; in your BibTeX file, and it generates an error. The problem is that in LaTeX/BibTeX &amp; is a special character (to indicate tabs). Solution: ‘escape’ the ampersand in your BibTeX file: title = {Fear \\&amp; Loathing in Las Vegas} Your text has a pair of asterisks: Principle (*) is strong. Principle (*) is stronger than Principle (**). The text between the asterisks is wrongly interpreted as emphasized: Principle () is strong. Principle () is stronger than Principle (**). Solution: escape the asterisks: Principle (\\*) is strong. Principle (\\*) is stronger than Principle (\\*\\*). Principle (*) is strong. Principle (*) is stronger than Principle (**). If two $ appear in a paragraph, the in-between text will be wrongly treated as a formula if there is no space to the right of the first and to the left of the second. This can happen in rare cases: she gave him notes of $10 and $20, it&#39;ll be all right. she gave him notes of $10 and $20, it’ll be all right. Solution: escape the $: she gave him notes of \\$10 and \\$20, it&#39;ll be all right. she gave him notes of $10 and $20, it’ll be all right. Square brackets for elided texts in citations. In practically all cases they’ll be fine. The following markdown code will display as intended, for instance: The [simple] models [...] are useful There’s only trouble in a rare case: the elided text matches a section header. For instance, suppose you have: The simple [models] are useful. ## Models This is wrongly interpreted as a link: The simple models are useful. Why? Pandoc automatically assign the header “Models” a link identifier: models (see the chapter on cross-referencing). And if this identifier is present, [models] becomes a link to it. And one of the section headings is “Models”. Solutions: If you’re working in markdown code, leave it as is. We run pandoc with an option that disables these links. If you’re working in the RStudio visual mode, the editor will replace these by an explicit link, encoded [models](#models) You have to manually remove that link when you’re finished editing. 6.5.2 RStudio visual markdown editor: source vs visual mode When you open a .md file in RStudio, you’ll see it in ‘source’ (or pure text) mode. By clicking the A-like grey icon on the top right (see image below), you can switch to ‘visual’ (visually formatted) mode. When switching to the visual editor for the first time with a given file, it will ask you about “Line wrapping”. Select the last option, “Use the current global default line wrapping for this document”. Warning. At present the visual editor breaks down numbered examples. "],["metadata.html", "Chapter 7 Metadata 7.1 Title (and other one-line fields) 7.2 Title with linebreaks for LaTeX/PDF output 7.3 Subtitle 7.4 Short title 7.5 Author(s) information 7.6 Author in page header and table of contents 7.7 Abstract and thanks 7.8 Keywords (and other lists) 7.9 Bibliography 7.10 And more generally…", " Chapter 7 Metadata Your markdown document should start with a ‘metadata’ block. This contains information about the document that isn’t part of the body of the article, namely: Title Author Affiliation Acknowledgements Abstract Keywords It also contains information about the resources needed to generate the PDF file: Bibliography (name of the .bib file) Latex packages needed It’s used for search engine indexing, generating PDF bookmarks and the title and author page of the article. The metadata block is at the beginning of your markdown file, and it starts and ends with lines consisting of three hyphens ---. Here is a template - you can add this at the beginning of the markdown file. (In RStudio, add this in text mode, not in visual mode.) --- title: The Solution to the Problem that has Plagued Many People in the Past shorttitle: The Solution to the Problem author: Max Mustermann affiliation: University of Wisemen thanks: | The author would like to thank Jane Doe and Erika Mustermann as well as audiences at the Universities of Shallow Objections. abstract: | In this paper I explain that the *problem* is more difficult to solve that the equation $4x^2 = 8$ and more complicated than the formula $(P \\land \\lnot P) \\rightarrow Q$. Thankfully, I have found the solution. keywords: - problem - solution - symbols bibliography: references.bib header-includes: &#39;&#39;&#39;{=latex} \\\\usepackage{bussproofs} &#39;&#39;&#39; --- The block consists of fields and their value. For example, one of the fields is named title and its value is the title of the paper (say, The Greatest Paper this Year). Another field is named bibliography and its value is the name of the bibliography file, say mybiblio.bib. The field names are mostly self-explanatory: title is for the title, thanks for the acknowledgments, etc. If you use the template above, simply remove any field that is not relevant to your article (e.g. keywords or thanks). Only header-includes is not obvious: it is used when an article relies on special LaTeX packages (or HTML scripts), otherwise it should be omitted. These are written in the form fieldname: value, in one line. Note the space after the colon. You can enclose the value in single (') or double (\") quotation marks. BAD GOOD title:An interesting fact title:'An interesting fact' title: An interesting fact title: 'An interesting fact' In case the value of a field occupies more than one line, you indicate this with the | character, and enter it as follows. Each of these new lines must be indented. In this form, you do not enclose the value in quotation marks (if you do, they will be printed too). BAD GOOD title: A longish phrase title: A longish phrase title: | A longish phrase abstract: | In this paper I explain that the *problem* is more difficult to solve that the equation $4x^2 = 8$ and more complicated than the formula $(P \\land \\lnot P) \\rightarrow Q$. Thankfully, I have ound the solution. abstract: | In this paper I explain t hat the *problem* is more difficult to solve that the equation $4 x^2 = 8$ and more complicated than the formula $(P \\land \\lnot P) \\rightarrow Q$. Thankfully, I have found the solution. Tip. On most editors (e.g. RStudio), you can indent several lines at a time: select the lines you want to indent and press Tab. (You can also de-indent by selecting them and pressing Shift+Tab.) 7.1 Title (and other one-line fields) Can be inserted as they are, and may include markdown codes and/or maths formulas. But they should occupy one line only; if you need several lines, use the | character as indicated above. Quotation marks (’ … ’, or “…”) are optional; if you add them they won’t be printed. Markdown Printed title title: An Interesting Fact title: 'An Interesting Fact' title: \"An Interesting Fact\" An Interesting Fact Quotation marks must be used if the title itself contains a colon followed by a space (as in Formalization: a dummy's guide) or quotation marks (as in The Meaning of 'meaning'). Unless your enter your title as several lines using |: in that case, it should not be surrounded by quotation marks. When the title contains quotation marks (' or \"), you should enclose it with the other style of quotation marks. BAD GOOD title: A \"good\" friend title: A 'good' friend title: My Life: a Long Story title: 'A \"good\" friend' title: \"A 'good' friend\" title: \"My Life: A Long Story\" A common source of error: you break a line in a middle of a field’s value and continue on the next line. Then pandoc interprets the next line not as part of the value, as you intended, but as a new field altogether, and can’t make sense of the rest of your block. For instance, the following will generate an error: title: &#39;Introduction: The Formalization of arguments with various applications&#39; author: Robert Michels Why? Because the second line starts with ‘arguments’, which pandoc takes to be the name of a metadata field, which it doesn’t understand and complains about. Instead, there should be no manual line-break within the title: title: &#39;Introduction: The Formalization of arguments with various applications&#39; author: Robert Michels Genuine vs apparent linebreak. Your text editor is likely set up to “soft wrap” long lines. This means that a very long line is in apparence broken and displayed as several lines. In the file though, and most importantly in the eyes of the computer, it remains a single line.4 When a text editor displays line numbers, you can tell that a line is soft-wrapped by the fact that doesn’t introduce a new line number. Another way to tell that your editor is soft-wrapping is to resize the windows: if the linebreaks are rearranged so that your text is showing, your editor is soft-wrapping and hence what looks like a new line could just be the continuation of a previous line. (To check that this happens, reduce the size of your windows: are the line breaks changed to fit the new window? if yes, then your display is “soft-wrapped”.) If your editor as line numbers on the left (e.g. RStudio, sublime), you can tell which are the genuine If you aren’t sure whether there’s a line-break in the middle of your title (between various and applications in the title above, say), you can: widen your editor’s window and see whether the text moves back up to the original line, or otherwise go to the beginning of the second line, hit backspace to ‘glue’ the two words (variousapplications), and hit the space key to make sure that they’re separated by a space and not a line-break. 7.2 Title with linebreaks for LaTeX/PDF output Requires: dialectica templates. In LaTeX/PDF output it is sometimes useful to manually specify a line break within the title You can do so by providing a title-latex key in addition to the subtitle one. In a metadata field, you can specify a linebreak by placing an \\ immediately followed by an end of line (no spaces!): title: A Very Long Title that Can be Broken in Various Places title-latex: A Very Long Title that\\ Can be Broken in Various Places 7.3 Subtitle You can provide a subtitle with the subtitle key: title: Frankenstein subtitle: The Modern Prometheus Requires: dialetica templates. Dialectica’s template typeset the subtitle thus: On the paper’s title page, it is printed below the title, in smaller font. In the table of contents, it is printed after a colon: Frankenstein: The Modern Promoetheus You can override the colon by specifying a subtitle separator, e.g. a simple space: title: So What? subtitle: My Quest for the Meaning of Life subtitleseparator: &#39; &#39; As with title, you can use an additional subtitle-latex key to manually specify a linebreak within the subtitle. You must still provide the subtitle key. title: So What? subtitle: My Quest for the Meaning of Life subtitle-separator: &#39; &#39; subtitle-latex: My Quest\\ for the Meaning of Life 7.4 Short title If the title is too long to fit in the header, you can specify a short title in addition: title: An extremely long-winded and verbose title about a range of topics including but not restricted to the weather shorttitle: A long-winded title about the weather 7.5 Author(s) information Requires. The scholarly-metadata and scholarly-format filters. We specify author information as follows. author: - name: Susan Stebbing email: s.stebbing@kcl.ac.uk correspondence: true institute: &quot;King&#39;s College London&quot; Note that there is a dash (-) before the first line (name field), and that all the other lines begin with a couple of spaces. correspondence: true is needed to indicate that the email address should be printed. Here we have put the affiliation in \" quotes because it contains a special symbol (the ' quote sign). When we have several authors, each gets a block that starts with a dash: author: - name: Susan Stebbing email: s.stebbing@kcl.ac.uk correspondence: true institute: &quot;King&#39;s College London&quot; - name: Cecil Day-Lewis institute: Cambridge University You can specify several affiliations for an author: author: - name: Susan Stebbing email: s.stebbing@kcl.ac.uk correspondence: true institute: - &quot;King&#39;s College London&quot; - Bedford College, London You can also specify a list of affiliations separately, and associate each author to their affiliations. This is most useful when several authors share the same affiliation: institute: - kcl: &quot;King&#39;s College London&quot; - bedford: Bedford College, London author: - name: Susan Stebbing institute: [kcl, beford] - name: &quot;Jane Q. Doe&quot; institute: bedford Here kcl, bedford are used as internal keys to associate each author with their affiliations - they won’t be printed. Note that if an author has several affiliations, they should be listed in brackets, separated by commas: [kcl, bedford]. Where there is only one the brackets are optional: for Jane Q. Doe above we could have written institute: [bedford] as well. You can do without keys too, by listing the affiliations in some order and using numbers to refer to them. The metadata below is equivalent to the above: institute: - &quot;King&#39;s College London&quot; - Bedford College, London author: - name: Susan Stebbing institute: [1, 2] - name: Jane Doe institute: [2] See the scholarly-metadata filter page for more options and information. 7.6 Author in page header and table of contents Requires. The dialectica template. You may sometimes need to typset the authors differently in the page header and table of contents. This is done using the author-header and author-toc keys: author: - name: Doe, Alice - name: Doe, Brit - name: Doe, Celia - name: Doe, Denis - name: Doe, Ethne author-header: Doe et al. author-toc: Doe A., Doe B., Doe C., Doe D., and Doe E. 7.7 Abstract and thanks Fields like abstract and thanks usually spread over several lines. If so, the field starts with a “I” and the content is written below. Each line should start with a space (so that the computer knows it’s still the abstract, and not a new metadata field). For instance, this would break down: abstract: | The purpose of this introduction is to give a rough overview of the discussion of the formalization of arguments, focusing on deductive arguments. Because “discussion” is at the beginning of a line, so the computer assumes it’s a new field rather than the continuation of the multiline text. Instead you should have a space at the beginning of every line: abstract: | The purpose of this introduction is to give a rough overview of the discussion of the formalization of arguments, focusing on deductive arguments. Dialectica guidelines. Abstract are strongly recommended. Most people who bump on the article will only read that. Maximum word length? 7.8 Keywords (and other lists) In some cases the content is a list, and in those case the syntax is as with a list of authors: keywords: - speculative metaphysics - nonsense 7.9 Bibliography The name of the associated .bib file. 7.10 And more generally… More generally format is simple, each entry is of the form: field : content List entries are: field : - item 1 - item 2 List within lists are sometimes used field : - first list - item 1 - item 2 - another list - object 1 - object 2 Multiline fields start with |, followed by one or more lines that each start at least one space: field : | This very verbose field contains a bunch of text that spans over a few lines to allow the author to vent a few grudges. "],["inline-elements.html", "Chapter 8 Inline elements 8.1 Punctuation 8.2 Emphasis and bold 8.3 Subscripts and superscripts 8.4 Hyphens and dashes 8.5 Quotations 8.6 Special symbols 8.7 Formulas 8.8 Schematic letters in the text 8.9 Split fractions 8.10 Acronyms 8.11 Foreign words 8.12 Line break 8.13 Prevent line breaks", " Chapter 8 Inline elements A traditional document consists of lines of text organized into blocks. A markdown document is likewise organized into inline elements that are put together into blocks. Inline elements words and spaces, a few words in italics, a formula in the flow of the text, such as \\(x+y=c\\). Block elements paragraphs section headings images, figures, tables display formulas … This chapter deals with copyediting inline elements. It also deals with formulas, which can be treated as both inline and blocks. 8.1 Punctuation 8.1.1 Punctuation and brackets: If only part of the sentence is in parentheses, put the final punctuation outside of the parenthesis: I enjoy breakfast (sometimes). If the entire sentence is in parenthesis, put the punctuation inside the parenthesis. I enjoyed breakfast. (I always do.) 8.1.2 Punctuation and quotation marks There are two traditions, the traditional British and the US/modern British. (TO BE DETAILED) Note. Pandoc’s Citeproc filter will apply the US convention, even in the main text. For instance it will convert the following markdown: She never said the word &#39;traitor&#39;. to She never said the word ‘traitor.’ This can be avoided globally by setting the document’s language to en-GB. It can be avoided on a case-by-case basis by using a “zero-width joiner” characters, markdown code &amp;zmj;: She never said the word &#39;traitor&#39;&amp;zmj;. She never said the word ‘traitor’&amp;zmj;. Dialectica guidelines Dialectica adopts the US/Chicago convention, unless authors insist otherwise or the results are particularly problematic. 8.2 Emphasis and bold Emphasized text is marked with surrounding asterisks or underscores. Bold is marked with double asterisks or underscores, emphasized bold with three: This *word* and _that word_ are emphasized. This **word** and __that word__ are strongly emphasized. ***This sentence is extra strongly emphasized.*** Emphasis is printed in italics when surrounded with normal text. But when the surrounding text is itself in italics, this is the opposite. Dialectica guidelines Use simple emphasis only. Avoid strong emphasis (bold), which stands out too much on the page. Simple emphasis (italics, one asterisk or underscore) is used: - for emphasis, - for labels of principles in statements: Principle of Compositionality. for mentioned words (e.g. in philosophy of language papers): The verb know has two meanings for simple symbols (when the paper doesn’t use formulas otherwise): S knows that p. Bold should be only used in limited cases: some acronyms for a principle (PC), a system of logic (S4). 8.3 Subscripts and superscripts Subscripts and superscripts in markdown text are coded as follows: I want I type A sub1 script and a sup1 script (when attached to plain text words). A sub~1~ script and a sup^1^ script. Water is H2O. Water is H~2~O. The no 1 activity The n^o^\\ 1 activity Most often, though, superscripts and subscripts are part of LaTeX formulas. The code is then entered as follows. I want I type With \\(p_1\\) and \\(p^2\\) the sub(/super)scripts are in formulas. With $p_1$ and $p^2$ the... With \\(p_{12}\\) and \\(p^{**}\\) the sub(/super)scripts are several characters long. With $p_{12}$ and $p^{xy}$ the... Note that in LaTeX, when your sub(/super)script is more than one character longs, it needs to be enclosed in curly braces. 8.4 Hyphens and dashes The hyphen - is used between words: An eye-popping headline. En-dashes -- between numbers: Pages 17–19. Em-dashes for inserts: He bailed out—and never came back. In standard English typesetting, the latter should not be surrounded by spaces. GOOD: They---or their friends---weren't having it. BAD: They --- or their friends --- weren't having it. Note that end of lines in markdown are treated as spaces by Pandoc, so to avoid surrounding spaces the --- dash should not be at the beginning or end of a line. Dialectica guidelines Em-dashes are not surrounded by spaces. 8.5 Quotations This is for inline quotations. Cf. the block chapter for block quotations. Dialectica guidelines For inline quotations use double quotation marks: What they call “best practice” is a hack. 8.6 Special symbols Latin characters with diacritics (å, é, è, ü, ø, etc.) should be entered as such, not in LaTeX codes. Greek text (not: Greek letters in maths) should be entered as such, provided your font covers Greek as well as Latin. Try to use LaTeX formulas for maths, and only maths. Examples: § should be simply entered §, because it’s a fairly basic character available on your keyboard and most fonts. Not its LaTeX equivalent, $\\S$. \\(\\rightarrow\\), when used outside of a logical formula (say “the appearance\\(\\rightarrow\\)reality principle”) could be inserted as a (unicode) character. But there are many unicode characters for a rightarrow and your font may not have the one you choose. If that happens you’ll get warnings when creating a PDF. A safer alternative is to use the LaTeX code instead, $\\rightarrow$. This is less than ideal since we’re in effect saying that this is a formula while it isn’t, but it’s good enough. Logical negation: favour \\lnot or \\neg (\\(\\lnot\\)). Avoid ~, \\sim. 8.7 Formulas If the author’s manuscript includes formulas, make sure they are in MS Word / Google Docs Equation mode before converting to markdown. pandoc will then convert them in LaTeX formulas, which will greatly simplify your work. An “inline” formula, that is a formula within the flow of the text, is delimited by $ signs. For instance, this: The principle of non-contradition, \\(\\lnot (\\phi \\land \\lnot \\phi)\\) is Leibniz’s… is coded: The principle of non-contradition, $\\lnot (\\phi \\land \\lnot \\phi)$ is Leibniz&#39;s... A “display” formula, one that occupies more than one line, is delimited by $$ signs. For instance, this: Leibniz’s law, \\[\\forall x \\forall y (x=y \\rightarrow \\forall X (Xx \\leftrightarrow Xy))\\] is … is coded: Leibniz&#39;s law, $$\\forall x \\forall y (x=y \\rightarrow \\forall X (Xx \\leftrightarrow Xy))$$ is ... Do not leave a space after the first $ or before, otherwise markdown thinks its an ordinary dollar sign. GOOD: $\\forall x (Fx \\rightarrow Gx)$ BAD: $ \\forall x (Fx \\rightarrow Gx) $ Format each single formula as one formula in markdown. For instance, this: The formulas \\(\\exists x(Fx \\rightarrow Gx)\\), \\(\\forall x\\neg\\text{Gx}\\) are quantified formulas. Should be entered in markdown as: The formulas $\\exists x(Fx \\rightarrow Gx)$, $\\forall x\\neg\\text{Gx}$ are quantified formulas. Not as: The formulas $\\exists$ x (Fx $\\rightarrow$ Gx), $\\forall$ x$\\neg$Gx are quantified formulas. Do not merge the two formulas into one. This will prevent them to be put in different lines in the output: GOOD: $\\exists x (Fx \\rightarrow Gx)$, $\\forall x \\lnot Gx$. BAD: $\\exists x (Fx \\rightarrow Gx), \\forall x \\lnot Gx$. Exception: if you have lists of numbers as in \\(1, 2, \\ldots ,n\\), no need to split those into many equations: GOOD: $1, 2, \\ldots, n$5 ALSO GOOD: $1$, $2$, ..., $n$. Elements of formulas repeated in the text are entered as formulas too. For instance this: In the formula \\(\\exists xFx\\) the variable \\(x\\) is bound. is coded thus: GOOD: In the formula $\\exists xFx$ the variable $x$ is... BAD: In the formula $\\exists xFx$ the variable x is... BAD: In the formula $\\exists xFx$ the variable *x* is... Note that *x* is not in formula mode and not a suitable replacement for $x$ here. While both would be displayed in italics, their meaning is different (on indicates emphasis, the other indicates an element of a formula) and they are subtle differences in typesetting (different font and spacing for formulas). Similarly: If a subject \\(S\\) has property \\(P\\) GOOD: If a subject $S$ has property $P$... BAD: If a subject S has property P... BAD: If a subject *S* has property *P*... BAD: If a subject **S** has property **P**... Can pandoc confuse ordinary dollar signs and formula delimiters? In general, pandoc does pretty well at telling apart the two uses. And if in doubt, when you intend an ordinary dollar sign you can “escape” it to indicate that it’s meant literally as a dollar sign: Amounts of $20,000 and $30,000 are… Can be coded as either of: Amounts of $20,000 and $30,000 are... Amounts of \\$20,000 and \\$30,000 are... Even in the first case, pandoc will not print out “20,000 and” as a formula. It tells them apart using the following rule: for the formula delimiter use, the opening $ must have a non-space character immediately to its right, while the closing $ must have a non-space character immediately to its left, and must not be followed immediately by a digit. But if for some reason you need to enclose text in literal $ characters, backslash-escape them and they won’t be treated as math delimiters. 8.8 Schematic letters in the text Schematic letters in the main text should normally be typeset as formulas: I want I type \\(S\\) knows that \\(p\\) $S$ knows that $p$ \\(n\\)-ary predicate $n$-ary predicate \\(F\\)-ness $F$-ness \\(\\mathrm{F}\\)-ness $\\mathrm{F}$-ness Remark. If there are few, e.g \\(S\\), \\(p\\), and they don’t appear in formulas proper such as \\(K_Sp\\), then it can be tolerated to enter them as is (S) or with emphasis to obtain italics (*p*). We advise against this because *...* indicates emphasis and not a symbol or italics. For instance, if the markdown source is later fed into text-to-speech software the read out will wrongly stress *p* wherever it’s used. Some mathematic texts use upright uppercase letters and lowercase italicized letters.6 To get upright letters with math mode use the \\mathrm{...} LaTeX command. All letters within {...} will be typset as upright serif letters (“roman” is another name for serif): I want I type \\(\\mathrm{MA}p\\) $\\mathrm{MA}p$ \\(\\mathrm{M}Ap\\) \\mathrm{M}Ap \\(\\mathrm{A+B}\\) \\mathrm{A+B} If the predicates are referred to in the text around, I would make sure there are in dollar signs too: Predicate \\(F\\) is unary, predicate \\(G\\) binary. GOOD Predicate $F$ is unary, predicate $G$ binary. NOT ADVISED Predicate F is unary, predicate G binary. NOT ADVISED Predicate *F* is unary, predicate *G* binary. 8.9 Split fractions Fractions like 2/3, 1/2, can (and are often better) be printed out as split fractions, with the first number slightly up and left and the lower slightly down and right. This is best achieved with the LaTeX xfrac package. Add the following to the header-includes metadata field: header-includes: | \\usepackage{xfrac} and enter the fractions in formulas like so: $\\sfrac{2}{3}$ Downside: these are not handled by mathjax in HTML output, so they will have to be converted to images by your template. 8.10 Acronyms Cf “Abbreviations” chapter in the Chicago manual. Acronyms are in caps, not bold. Exception: logic contexts, where axiom schemas, systems of logic, etc. may be labelled in bold. 8.11 Foreign words Cf “Italics, Capitals, and Quotation Marks” of the Chicago manual. In summary: Not italics if they are “familiar”, i.e. appear in the Webster’s dictionary. Italics otherwise. Exception: if you have two nearby each other and one is unfamiliar, make both italics for consistency (e.g. mise en scène and mise en bouteille). Some common cases: Familiar. A priori, a posteriori, ceteris paribus, inter alia, ad hominem, modus ponens Unfamiliar. Salva veritate, ex falso quodlibet, … 8.12 Line break Exceptionally you may need a line break that does not start a new paragraph. This is encoded by finishing a line with a backlash. Thus the following: This line ends here and a new one starts. is encoded as follows: This line ends here \\ and a new one starts. 8.13 Prevent line breaks Sometimes you need to prevent line breaks. If you use suppressed-author references, they are awkard at the beginning of lines as in: … Smith’s great theory (1972). On the other … The code for this would be: ... Smith&#39;s great theory [-@Smith1972]. On the other hand To prevent this use non-breakable spaces, which can be introduced with a backclashed-escaped space \\ or with the HTML code &amp;nbsp;, as follows: ... Smith&#39;s great theory\\ [-@Smith1972]. On the other hand ... Smith&#39;s great theory&amp;nbsp;[-@Smith1972]. On the other hand Don’t use this to fine-tune how the long the lines are or the like; only when it makes sense in terms of the content: when it’s a matter of sticking say a citation year to what’s going with it, “i.e.” to what follows, and the like. "],["block-elements.html", "Chapter 9 Block elements 9.1 Paragraphs 9.2 Headings 9.3 Footnotes and endnotes 9.4 Quotations 9.5 Lists 9.6 Crossreferencing and captioning tables, figures, images, equations 9.7 Tables 9.8 Equations 9.9 Images 9.10 Statements (propositions, principles, axioms, arguments …) and indented blocks in general 9.11 Multiple columns 9.12 Arguments and proofs 9.13 Raw code if all else fails", " Chapter 9 Block elements A traditional document consists of lines of text organized into blocks. A markdown document is likewise organized into inline elements that are put together into blocks. Inline elements words and spaces, a few words in italics, a formula in the flow of the text, such as \\(x+y=c\\). Block elements paragraphs section headings images, figures, tables … This chapter deals with copyediting block elements. Footnotes are dealt with here with block elements. Formulas with inline elements, even if they are sometimes displayed as blocks. NOTE TO SELF: formula content is in the previous chapter, but equation blocks are dealt with here. Idea: treat formula content and LaTeX encoding in the previous chapter, but treat displaying formula and numbering here (with a reference to the previous chapter.) 9.1 Paragraphs New paragraphs are indicated in markdown by leaving an empty line. That is, an empty line separates two paragraphs. In typography paragraphs can be separated from each other in two ways: indentation of the first line (common in books) or vertical spacing (common on the web). In the first-line ident style, in some traditions (English) paragraphs don’t have a first-line ident after headings, in others (French) they do. Which style you adopt should be controlled by your template and not require special formatting in your markdown manuscript. Exceptionally you may need a line break that does not start a new paragraph. See the inline elements chapter. 9.1.1 First-line indentation after quotes, lists, etc. Requires: the first-indent-line filter. (If you don’t use it, see the alternative solution below.) Note: The advice of this section only matters if your journal uses the first-line indentation style for separating paragraphs. If the vertical spacing style is used instead, following the advice will do no harm but will not visibly affect the output. Problem. Text that directly follows a list, quote, figure, table or other indented material (statement) may either be a continuation of the previous paragraph or the beginning of a new one. That is a matter of meaning (is the text finishing the previous idea, or beginning a new idea?) and may not be clear-cut in all cases. If your journal uses first-line indentation to separate paragraphs, continuations should not be typset with an indented first line, but new paragraphs should. Solution. When the text below a quote, list etc. is a new paragraph, begin it with the code \\indent. If it’s a continuation, no need to add anything. (Though you may insert \\noindent at the beginning of the continuation text to remind yourself you have examined it and classified it as continuation.) If it is not clear whether the following text is a paragraph or not, you may ask the author or simply pick one way or the other. Example. In the text below, the text after the quote is a continuation of the paragraph before the quote, but the text after the table is a new paragraph, so we insert the \\indent code. The first study on that topic was @Obscureapaer. In detailing their results the authors concluded: &gt; It&#39;s unclear what is going on here. And we agree that this is was the data suggests, as shown by the fatality rates in the table below. Test group Control group ----------- ---------------- .9 .9 \\indent The second study on that topic was @Anotherobscure paper... Optionally, we could have inserted the code \\noindent at the beginning of the line And we agree that..., to remind ourselves that we treat this as a continuation of the previous paragraph. See the first-line-indent filter’s page for more options and information. Dialectica guideline. Our template uses the first-line indentation style of separating paragraph, and the first-line-indent filter. Text that is below a list, quote, figure, statement, … will be typeset as a continuation of the paragraph before unless it starts with the \\indent code. We add the \\indent code when it is a new paragraph. If in doubt, ask the author or typeset either way. Alternative solution. If your journal does not use the first-line-indent filter, you can only control first-line indentation for the LaTeX/PDF output, and the defaults are the opposite, namely: if the text after a quote, list etc. is a new paragraph, no need to add anything. (You may add \\indent if you wish.) if it is the continuation of the previous paragraph, add \\noindent at the beginning. Example: 9.1.2 Special first-line indentation cases Requires: first-line indent filter. If for some reason the first-line indentation needs to be added to or removed from a specific paragraph, just begin this paragraph with the corresponding code: \\noindent or \\indent. If you do not have the first-line indent filter, the codes \\noindent and \\indent will only affect LaTeX/PDF outputs. This should only be used in exceptional cases. If you need to add these codes regularly (e.g. to control first-line indentation after headings), your journal template is not set up correctly. Dialectica guideline. Except in the cases discussed in the previous section (text following a quote, list, statement or other indented material), we do not expect to need to adjust first-line indentation manually. 9.2 Headings Headings of different levels (section, subsection, subsubsection) are encoded as a line starting with #, ##, ### followed by the title. I want I type 1. Section heading # Section title 1.2 Subsection heading ## Subsection title 1.2.1 Subsubsection title ### Subsection title lower titles ####, #####, ###### In Dialectica headings are numbered up to the subsection (#, ##, ###). Headings of level four (####) are used for un-numbered smaller units. We have also two “inline” headings style, where the heading title is displayed at the beginning of the following paragraph rather than on its separate line. They are level 5 (#####) and level 6 (#######). We discourage authors from using headings below the subsection (##) in articles though, though we can use them if the they improve readibility. Do not manually add numbers to section headings. They are automatically added by the house template. BAD GOOD # 1 Methods # Methods # 1 # If the heading has no title, you should simply enter # (or the relevant level) with no title. If an article starts with an introduction section, that section should not have aheading. So do not start articles with: # Introduction 9.3 Footnotes and endnotes Your template decides whether notes are printed out as footnotes or endnotes. The encoding is the same whichever it uses. We’ll call them “notes” here. There are two ways to enter notes. The first is inline, without identifier. This is suitable for brief notes: This is the main text.7 This continues the main text. This is the main text.^[In footnote, I distract you with an irrelevant point.] This continues the main text. The second is a reference link, with identifier. This is suitable for longer notes, and required if a note has several paragraphs: This is the main text.8 This continues the main text. It spans over several paragaphs. @echo &quot;it even includes a code listing&quot;. This is the next paragraph that isn’t part of the footnote. his is the main text.[^myidentifier] This continues the main text. [^myidentifier]: This note takes more space. It spans over several paragaphs. ```bash @echo &quot;it even includes a code listing&quot;. This is the next paragraph that isn’t part of the footnote. Note that the `^` is outside of square brackets in the inline style, inside it in the reference style. In the reference style the footnote can be placed anywhere in the document (common choices are at the end of the current block or at the end of the current chapter, or at the end of the document or chapter). Numbers can be used as identifiers in the reference style: &gt; This is the main text.[^1] [^1]: this is the foonote. ```markdown &gt; This is the main text.[^1] [^1]: this is the foonote. This is not recommended if you are planning to fuse several documents, e.g. chapters of a book, as two [^1] footnotes in seperate chapters will generate a conflicting reference and an error message. The numbers here are identifiers only, they need not (and will probably not) match the ones in the final output. In multi-paragraph footnotes, indent each block with two spaces to indicate that it’s part of the footnote rather than resuming the main text, as in the example above. Cross-reference to footnotes has to be done manually. Don’t enter them before you know that the footnote numbers are final. See the cross-referencing chapter. Dialectica guidelines It’s fine to use link references with simple numbers: [^1], [^2]. These will be automatically generated by pandoc when converting the manuscripts and it is too time-consuming to replace them. Our production process ensures no conflict across two articles within the same issue. 9.4 Quotations Quotations should only be used for quoted material: text coming from another source. For other indented block of materials, cf Statements. Quotations are marked by either starting a paragraph with &gt; and indenting it, or by starting each line of the paragraph with &gt;, or simply having the first line starting with &gt; This is a quotation. The second sentence is on an indented line. This is another quotation. The second sentence is on a line starting with &gt;. This is quotation in the lazy style. The second line isn’t even indented or starting with &gt;. &gt; This is a quotation. The second sentence is on an indented line. &gt; This is another quotation. &gt; The second sentence is on a line starting with `&gt;`. &gt; This is quotation in the lazy style. The second line isn&#39;t even indented or starting with `&gt;`. For readability avoid the lazy style. The quotation citation can be included at the end or in foonote: I am happy. (Jane Doe 2020) I am sad.9 &gt; I am happy. [@doe_j:2020] &gt; I am sad.^[@doe_j:2020] You should distinguish several consecutive quotations from a single quotation with several paragraphs. One way to do this is as follows: This is a first quotation. This is a second quotation. This is not a third quotation, but a further paragraph of the second quotation. @echo &quot;this code block is yet a first block in that quotation too&quot; &gt; This is a first quotation. &gt; This is a second quotation. &gt; &gt; This is not a third quotation, but a further paragraph &gt; of the second quotation. &gt; &gt; ```bash &gt; @echo &quot;this code block is yet a first block in that quotation too&quot; &gt; ``` That is, we start all lines of the long quotation with &gt;, including the blank lines that separate its paragaphs or blocks. By contrast, we leave an empty line between two distinct quotations. An alternative is instead to only have &gt; at the beginning of a long quotation and indicate with subsequent paragraphs with an indent: This is a first quotation. This is still part of the first quotation. This is a second quotation. &gt; This is a first quotation. This is still part of the first quotation. &gt; This is a second quotation. You can have quotations within quotations. As someone said once: The life unexamined isn’t worth living. &gt; As someone said once: &gt; &gt; &gt; The life unexamined &gt; &gt; isn&#39;t worth living. 9.5 Lists 9.5.1 Simple lists Simple unnumbered lists * an item * a sub-item * another sub-item * an item Result: an item a sub-item another sub-item an item You can use - as well as *, and you can mix markers. Numbered lists: 1. item 2. item a. sub item b. sub item 3. another item Result item item sub item sub item another item Note that markdown ignores the particular number and number format you enter. a. apples b. peaches 2. pears 4. bananas 7. cherries Result apples peaches pears bananas cherries You can put blocks (paragraphs, quotations, etc.) as list items. To do so, align the following blocks with a couple of spaces: 1. This list item has not just one paragraph. It has two paragraphs. 2. &gt; This section list item &gt; contains a quotation. &gt; And the quotation is two &gt; paragraphs. Result This list item has not just one paragraph. It has two paragraphs. This section list item contains a quotation. And the quotation is two paragraphs. 9.5.2 Numbered examples lists Some papers have examples (or other items) that are scattered throughout the paper but numbered continuously. For example: Sentence (1) below illustrates the Liar paradox: Sentence (1) is false. Not all self-referential sentences are paradoxical, however: This sentence contains several words. Sentence (3) is written in English. You enter those as follows using (@) or (@identifier): Sentence @liar below illustrates the Liar paradox: (@liar) Sentence (@liar) is false. Not all self-referential sentences are paradoxical, however: (@) This sentence contains several words. (@three) Sentence @three contains several words. (@) is enough to create a numbered example item. You add an identifier as in (@item3) if you need to refer to it later. To refer to it, simply use @identifier, as above, which you can wrap between parentheses if desired. Warning. References to numbered examples do not generate hyperlinks and cannot be placed within links. Problem. If a paragraph starts by a reference to a number example that you want to wrap between parentheses, markdown will wrongly think that it’s a new numbered example: The sentence below illustrates the Liar paradox: (@liar) Sentence (@liar) is false. (@liar) cannot be true, because... Solution. “Escape” (i.e., put a backslash in front of) the first parenthesis The sentence below illustrates the Liar paradox: (@liar) Sentence (@liar) is false. \\(@liar) cannot be true, because... 9.5.3 Custom labels lists Requires: the labelled-lists filter. A simple illustration of the custom label syntax: * [Premise 1]{} This is the first claim. * [Premise 2]{} This is the second claim. * [Conclusion]{} This is the conclusion. This generates the following list (process this file with the filter to see the result): Premise 1 This is the first claim. Premise 2 This is the second claim. Conclusion This is the conclusion. In general, the filter will turn a bullet list into a custom label list provided that every item starts with a non-empty Span element. A Span element is inline text (i.e., not block like a paragraph) that optinally has some attributes. The default syntax is [inline text]{attributes}. Inline text will be used as label, placed within round bracket. There is no need to specify attributes on the Span. But curly brackets must be present: [label] won’t work, [label]{} will. The label can include formatting. [**T1**]{} will generate a label with strong emphasis (bold by default). For the purposes of this filter, a Span is non-empty if its inline text is not empty. Thus []{} will not work. Numbers or other unicode characters work. To generate an empty label, use a space or other invisible character, e.g. [ ] {}. Exception: math formulas will work as labels, but if the inline text only contains LaTeX code (\\textsc{a}) it will be treated as empty. Span elements can also be entered using HTML syntax: &lt;span&gt;inline text &lt;/span&gt;. See [Pandoc manual] (https://pandoc.org/MANUAL.html#divs-and-spans) for details. 9.5.3.1 Cross-referencing custom-label items Custom labels can be given internal identifiers. The syntax is [label]{#identifier}. In the list below, A1ref, A2ref and Cref identify the item: * [**A1**]{#A1ref} This is the first claim. * [A2]{#A2ref} This is the second claim. * [*C*]{#Cref} This is the conclusion. Note that # is not part of the identifier. Identifiers should start with a letter and contain only letters, digits, colons :, dots ., dashes - and underscores _. Labels with identifiers can be crossreferenced using Pandoc’s citations or internal links. 9.5.3.1.1 Cross-referencing with citations The basic syntax is: Reference in text: @A1ref. Outputs the label with its formatting: A1. Normal reference: [@A1ref]. Outputs the label with its formatting, in parentheses: (A1). A prefix and suffix can be specified too: [remember @A1ref and the like] will output (remember A1 and the like). The suppressed author style, [-@A1ref], will be processed as normal reference You can crossrefer to several custom labels at a time: [@A1ref; @A2ref]. But mixing references to a custom label with bibliographic ones in a same citation won’t work: if Smith2003 is a key in your bibliography [@A1ref; Smith2003] will only output “((A1ref?); Smith, 2003)”. Because this syntax overlaps with Pandoc’s citation syntax, conflicts should be avoided: Avoid giving the same identifier (e.g. Smith2005) to a custom label item and a bibliographic entry. If that happens, the citation will be interpreted as crossreference to the custom label item. To make sure you you may use identifiers starting with item:: item:A1ref, item:A2ref, or some other prefix. The filter should preferably be run before citeproc, and before other filters that use citations (like pandoc-crossref). It may work properly even if it is run after, though citeproc will issue “citations not found” warnings. To ensure that the filter is run before, just place it before in the command line or in your YAML options file’s filters field. Alternatively, the citation syntax for crossreferencing custom label items can be deactivated. See [Customization] below. 9.5.3.1.2 Cross-referencing with internal links In Pandoc markdown internal links are created with the syntax [link text](#target_identifier). (Note the rounded brackets instead of curly ones for Span element identifiers.) You can use internal links to cross-refer to custom label items that have a identifier. If your link has no text, the label with its formatting will be printed out; otherwise whichever text you give for the link. For instance, given the custom label list above, the following: The claim [](#A1ref) together with [the next claim](#A2ref) entail ([](#Cref)). will output: The claim A1 together with the next claim entail (C). where the links point to the corresponding items in the list. 9.5.4 What to do if a list has non-standard labels? Problem: a text has a list with regularly numbered items (1, 2, 3, or a, b, c, …) but uses * or ' labels in some cases. Solutions: Numbered example lists. The bold solution would be to use standard numbered lists and examples and remove the author’s prime numbering. For instance, instead of writing down (27’) formula, and referring to (27’) in the text, we’d write: (@item27p) and refer to @item27p in the text. This would convert all his prime numbers into continuous numbers. (\\@item27) Entry (27) in the original. (@item27p) Entry (27&#39;) in the original. Will be displayed as (28) Rest of the text can reference `@item27` or `@item27p`. Downsides: removes author’s unorthodox labels, only usable for items continuously numbered throughout the text, no hyperlinks are generated. Custom labelled lists. Use custom labelled lists (requires the labelled-lists filter.) See the lists section. Advantages: preserves author’s arbitrary labels, allows references with hyperlinks. Downsides: syntax more clunky. Equations references. Make each entry a displayed equation. Label it for cross-reference: $$\\textrm{ Entry 27&#39; in the text}$${#entry27}$$ Reference later with @eqn:entry27. Downsides: removes author’s unorthodox labels + encoded as math when it shouldn’t (in particular, the equation number comes on the right, and if there are actual equations in the text their numbering isn’t kept separate from this. Enter as Statement, using custom label or no label at all. Downside: longer code to type in, cross-ref to the statements isn’t standardized yet. We recommend (1) or (2), and otherwise (3). 9.6 Crossreferencing and captioning tables, figures, images, equations Requires: the pandoc-crossref filter. Tables, images can be cross-referenced and can be given a coption text. To cross-reference an image: ![](imagefile.png) {#fig:my-image} As you can see in @Fig:my-image ... To add a caption to the image: ![An image of a flying pig](imagefile.png) {#fig:my-image} As you can see in @Fig:my-image ... Example with a table: As the reader can see in @tbl:diffstyles, there are many options: +----------+-----------+ | style | features | +==========+===========+ | ... | ... | +----------+-----------+ : The different styles of text {#tbl:diffstyles} The identifiers of images or figures must have the form #fig:..., those of tables #tbl:..., those of equations #eq:.... When crossreferencing them we use citation syntax with the prefixed identifiers: [@fig:my-image], @tbl:my-table, etc. This will print “figure 1”, “table 2”, etc. To get “Figure 1”, “Table 2” you capitalize the prefix: @Fig:..., @Tbl:.... Details are in the Pandoc-cross-ref documentation here. 9.7 Tables 9.7.1 Basic table syntax There are three formats to encode tables in pandoc’s markdown (‘simple’, ‘grid’ and ‘pipe’). Some are easier to type, some easier to read, some give more functionality (i.e. having several lines in a cell). The easiest way to create a table is to use RStudio’s visual editor. The editor allows you to create multiline cells, resize the columns a bit and so on. Alternatively, you can write tables in the markdown code. An online markdown table generator can help. For tables with large cells (a lot of text in the cell), you might need to expand the “wrap line size” for the RStudio editor. The visual editor ensures that your markdown files has lines of a certain length. These don’t matter to the final PDF / html output, but they make your markdown source more readable. Now when you have a large table, you might need a bit more horizontal space in the markdown. For that you increase the wrap line size for the editor. In your file metadata block: editor_options: markdown: wrap: 72 Replace 72 with e.g. 80 or more if needed. You’ll see the difference if you go to the visual editor and expand your table’s columns a bit. In the markdown, words in tables should not be cut. If your markdown table is like this: +-----+-------+ |know |valua- | |ledge|tion | +=====+=======+ |... |... | +-----+-------+ Then “knowledge” and “valuation” will print as “know ledge” and “valua- tion” respectively. You need to ensure that no word is cut by enlarging your table: +----------+-----------+ |knowledge | valuation | +==========+===========+ | ... | ... | +----------+-----------+ Tables found in your document will be turned into that format if their cells require multiple lines. Otherwise they will be turned into the simpler format: Corner Header 1 Header 2 Header 3 -------- ----------- ----------- ------------- Row 1 Hello My Friend Row 2 1asdoi 23 234 You can create tables from scratch (a) in the RStudio visual editor or (b) in markdown code. For the latter you can use a online markdown table generator. 9.7.2 Cells that span several rows or several columns Unfortunately this is not feasible in pandoc’s markdown, but that will change very soon.10 Solution. Enter your table with all cells, and put the content of any merged area in the top left cell of the merged area. For example, the table below: Example missing, to be entered in raw HTML | Cells merged across a row | Head 1 | Head 2 | |:--------------------------|:-----------------------------|:-------| | | more | less | | Row head | Cells merged across a column | | Should be entered as if it was the table below: Example flawed, to be fixed | Cells merged across a row | Head 1 | Head 2 | |:--------------------------|:-----------------------------|:-------| | | more | less | | Row head | Cells merged across a column | | A note should be made of the change. Next to the table code you should enter the following: &lt;!-- cells to merge: C1R1 and C1R2; C2R3 and C3R3 --\\&gt; This will be invisible in the output, but visible to those who edit the file. ‘C2R3’ abbreviates ’second column from the left, third row the top. We will then have to insert LaTeX and HTML output code directly. See [if-markdown-cant-handle-a-table] below. 9.7.3 If markdown can’t handle a table Requires: the not-in-format filter. The instructions using Divs with not-in-format class below require the not-in-format filter. In case the usual markdown code for a table doesn’t work, we can insert a set of LaTeX code to the markdown file. The goal is then to have a set of latex code that can be inserted into the articles markdown file and then be run the usual way. For that, there are three steps needed: get the latex code for the desired table make the table look as desired get the code into the markdown file. Generate a separate markdown file (in the following called “separate .md”, whereas the initial markdown file of the article is called “articles .md”). Here we want to put only the latex code that will be inserted into the articles .md. For the first step (get the latex code for the desired table), there are two options: Build the latex code from scratch or via the table generator for latex, put the code to the separate .md. Build the markdown code from scratch or via the table generator for markdown, put it to the separate .md, let it produce a latex output, copy/paste the latex code to the separate .md (it probably begins with something like “ ” or “\\end{table}”). Once you have the latex code in the separate .md, you can embed it in the following code: ```{=latex} \\begin{center} [latex code for tables] \\end{center} ``` The \\begin{center} and \\end{center} lines are optional, their effet is to center your table in the page. The LaTeX code will only produce a result in LaTeX/PDF output. If the markdown code works with HTML output, you should leave it and embed it in a ::: {.not-in-format .latex} ... ::: Div, which ensures that the markdown table code is used only in formats other than LaTeX. ```{=latex} \\begin{center} [latex code for your table] \\end{center} ``` ::: {.not-in-format .latex} [markdown code for your table] ::: Check how the tables look by producing pdfs from the separate .md (much faster than always producing the whole article). From here, you might have or want to change several things: “longtable” -&gt; “tabular” (so that it doesn’t rely on longtable package, which doesn’t work within multicolumn environments). “”, “” and “” -&gt; “” for simple horizontal lines If a vertical line is desired at some point in the table change latex code \\begin{tabular}[]{@{}lcccc@{}} to \\begin{tabular}[]{@{}c|cccc@{}}. See that the number of letters determines the number of columns in the table. The letter “l” in the former code is to change into a “c” in the latter. To have a vertical line after the first column from the left, insert the sign (not letter!) “|” after the first c from the left. Once that frame is set, we can insert the code from the separate .md into the articles .md and see how it produces the tables from here. You may need to do the same to insert HTML code. In that case you should still leave the original markdown for other formats (JATS-XML), using not-in-format again: ```{=latex} [latex code for your table] ``` ```{=html} [html code for your table] ``` ::: {.not-in-format .latex .html} [markdown code for your table] ::: 9.8 Equations Equations include mathematical formulas, logic formulas, and the like. They come in two types: Inline, i.e. mixed with surrounding text. These are coded with $ ... ${latex}. For example: $\\phi \\rightarrow \\psi$ Prints \\(\\phi \\rightarrow \\psi\\). Display, i.e. standing on their own line, centered (and possibly numbered). These are coded with $$...$$: $$E = mc^2$$ which prints: \\[E = mc^2\\] How to have equation codes automatically generated. In MS Word, put any equation in Equation mode (Ctrl + =, Cmd + =, or Insert &gt; Equation). When converting to markdown pandoc will convert the symbols into LaTeX codes. If your manuscript is in LaTeX, the codes will be preserved. Common error There should be no space after the first $. If you leave a space after the first $ it is interpreted as a dollar sign, not an equation marker, and you get errors when generating the pdf. BAD GOOD $ \\phi \\rightarrow \\psi$ | `$ i $` 9.9 Images 9.9.1 Vector graphics files are preferred Diagrams and the like should be provided as vector graphics file (or in the TikZ code used to create diagrams in LaTeX, if authors know it - see below for details). Only photos should be provided as bitmap (a.k.a. raster) files. If the author provides a diagram in bitmap form, insist that they remake it in a vector format (or help them do so.) Inkscape is an open-source, free software to generate vector images that is fairly easy to use and powerful. Authors who know the TikZ language used to create vector diagrams in LaTeX can and should provide TikZ code instead What’s the difference between vector and bitmap image files? Bitmap (a.k.a. raster) images are encoded as a grid of pixels. Vector images are encoded as mathematical descriptions of lines and curves. For instance, a vector image may be (the computer-language equivalent of) “draw a circle of radius 10mm around the coordi nate (0,0).” The bitmap equivalent would be a big grid with cells coloured to form a circle. Because of this, vector images scale perfectly and magnify perfectly. Bitmap images can get noisy and pixelated when scaled or magnified. See below if you can tell which is which: knitr::include_graphics(rep(&quot;images/vectorVSbitmap-vector.svg&quot;)) knitr::include_graphics(rep(&quot;images/vectorVSbitmap-bitmap.png&quot;)) As you can see, the vector (first one) looks good when magnified, the bitmap looks bad. Why use vector images? PDF outputs (especially when printed) require fine details; high-resolution screens and resizable tablets or phones also require fine details. Vector images handle that without problem. For instance, fonts themselves are encoded as vector images; this is why they look perfect when printed with a good printer or when massively enlarged on screen. Now bitmap files can look ok even when printed or zoomed in: see photos, for instance. But to do so they need large resolutions (e.g. 1920*1080 pixels) which require larger file sizes. This is especially true of diagrams: the bad bitmap image above is 1000 times larger than the good vector image. Which file types are vector, which are bitmap? JPEG, JPG, PNG, TIFF: bitmap images. PDF: can be bitmap, vector, and even images combining the two. The only way to tell is to zoom in a lot and see whether the lines remain perfect (vector) or pixelate (bitmap). File size is also an indicator: vectors are hardly more than a few Kbs, bitmaps can be anything from a few Kbs to one Mb or so. SVG: normally vector. Beware though: it can include bitmap images too. If you ask an author to convert their bitmap image in SVG, their convertor might simply put the bitmap image within a SVG, which would make no difference. As with PDF the only way to tell is to zoom in. How to convert a bitmap image to a vector image? There’s no simple way to do so. The problem is that the computer has to guess from the pixel grid of a bitmap image what’s supposed to be a line, a curve, etc. and that requires some intelligence (think of it like this: we’re going from a limited resolution to infinite precision). This is called vectorizing the bitmap image. Software like Inkscape can try and vectorize images for you, but you have to fiddle with the settings for each specific image, and the results are rarely satisfactory. In most cases, you’ll have a easier time to actually recreate the image in vector mode. If you want to try to vectorize anyway, search “vectorize an image in Inkscape” or “convert an image to SVG” online to find some tutorials. How to create a vector image? Inkscape is all-purpose. For simple diagrams you may be able to use a simpler online diagram / vector graphics / svg editor. There are quite a few of those; do check before starting to draw whether you can save as SVG without registration of payment. At the moment DrawSVG seems good (easy to use, free and no registration, ads). TikZ diagrams. TikZ is a language to describe vector images that can be embedded in LaTeX. It’s powerful but has a very steep learning curve. If authors can provide them, TikZ diagrams are the best - because any text in those diagrams will be printed out in the journal’s own fonts. TikZ code can be included directly in the markdown. Our template will include them directly in the LaTeX/PDF output and convert them to SVG files for other output formats. How to create a TikZ diagram? Typically the author needs to go through the (large) TikZ documentation and work from existing examples. But there is also an online visual editor (TikZit) that can help. 9.9.2 Resizing SVG files If the author provides you with a SVG file that has too much whitespace around, resize it using Inkscape. open the file in Inkscape select all the content with the arrow tool (click on the top left, drag your mouse to form a rectangle around it). Note: you could try Edit &gt; Select all (Ctrl+A on Win, Cmd+A on MacOS) but this sometimes take the entire page, even if it has a lot of whitespace. Go to File &gt; Document Properties. In the “Custom Size” area, expand the “Resize page to content…” line. Make sure “Units” is “px” (pixels). Enter 20 (20.00000) margins everywhere. If you activate the lock icon, you only need to enter 20 in one of the margins and the others will be the same. Click “Resize page to drawing or selection”. You should see that the page limits are just around the drawing. Close the “Document properties” box and save the document. 9.9.3 Including SVG image files in markdown If you insert an SVG image file in markdown and generate a PDF output, Pandoc needs to convert it to a format that LaTeX understands. It does so using an external programme, rsvg-convert. If rsvg-convert is not present, you will get a warning: [WARNING] Could not convert image...: check that rsvg-convert is in path. Solutions Convert the SVG files to PDF using Inkscape. They will still be vector file and print out well, but the LaTeX engine that generates your PDF output will be able to insert them. Open the file(s) in Inkscape, go to File &gt; Save a copy, select the “Portable Document Format (pdf)” format, save. In your markdown code replace ImageFile.svg with ImageFile.pdf. Install rsvg-convert. As far as we can tell the least difficult way to do this is to use package managers. On Linux look for rsvg-convert in your package manager. On MacOS you should install homebrew first, if you haven’t already, and run the command brew install rsvg-convert. On Win you should install the chocolatey package manager, open an administrator Powershell (Windows menu &gt; Windows Powersheel &gt; right click on Powershell and select “Run as Administrator”, give the permission) and run the command choco install rsvg-convert. Note: on Windows Pandoc 2.14.0.3 (June 2021 version) cannot handle SVG conversion, even if rsvg-convert is installed. If that’s your setup use the first solution. 9.10 Statements (propositions, principles, axioms, arguments …) and indented blocks in general Requires: the statement.lua filter. Special blocks that appear as indented fall into three types: quotations: bits of text from another source. equations: bits of text that are entirely (or mostly) symbols. Example: \\(A = \\{ x \\in \\Omega: x \\textrm{ is even}\\}\\) statements: arguments, propositions, theorems, and the like. There are also examples, cases (a story that illustrates a problem), vignettes (a story given to subjects in an experiment) and the like. We’ll treat them as statements. Sometimes authors (and copyeditors) set statements as quotation blocks: this is wrong, keep quotation blocks for actual quotations of texts from another source. 9.10.1 Statements in general In Markdown statements are coded by placing them between “fences” of three or more colons, as follows: ::: statement The sum of angles of a triangle equals two right angles. ::: ::: statement ::::: The sum of angles of a triangle equals two right angles. ::::::::::::::::::: ::: {.statement} The sum of angles of a triangle equals two right angles. ::: The curly brackets and the dot {. ... } are mandatory if the block as more features than statement, e.g. a linking ID or a type of statement, as described below. The number of colons can be anything on either side, provided there’s at least three. There needn’t be the exact same number of columns at the beginning and end; in the beginning fence you can put colons before and after statement if you want the block to stand out more in the source. None of this affects how the statement looks in the output. If you want to specify the type of statement (say, because you want to distinguish axioms from theorems): ::: {.statement .axiom} Between any two distinct points there is a straight line. ::: Because we have two properties (statement and axiom), the curly brackets are mandatory: here ::: statement axiom would not work. The title of a statement should be put in markdown bold (aka strong emphasis), that is either __Title__ or `Title``: ::: {.statement .axiom} **Euclides&#39; first axiom**. Between any two distinct points there is a straight line. ::: If you want to reference the statement in the rest of the text (NOTE this is not implemented yet): :::::: {.statement #pythagoras} __Pythagoras&#39;s theorem (PT)__. The square of the hypotenuse is equal to the sum of the squares of the other sides. ::::::::::::::: As we can see from ([**PT**](#pythagoras)), the sum is going to be... Explanation: **PT** prints PT in bold, PT. [...](#pythagoras) turns it into a crossreference link, PT. We enclose all this in parentheses (...), so the result is ([**PT**](#pythagoras)) which prints as (PT). More generally: ::: {.statement .type_of_statement #id-for-linking) :::::: __Full name of statement (Acronym)__. The square of the hypotenuse is equal to the sum of the squares of the other sides. :::::::::::::::::::::::::::::::::::::::::::::::::::::::::: As we can see from ([__Acronym__](#id-for-linking)), the sum is going to be... 9.10.2 Arguments Arguments are sometimes represented as a list of sentences (premises), followed by a horizontal line, followed by a sentence (conclusion), all aligned (no first-line indent on the second line). This is achieved with the argument style. ::: argument No man is wise. Socrates is a man. --- Socrates is not wise. ::: Each premise occupies its own paragraph (separated by an empty line). The inference line is generated by a markdown horizontal line: three or more dashes. Careful: the empty line before --- is mandatory, otherwise the text immediately followed by dashes is interpreted as a level 2 section heading. 9.11 Multiple columns Requires: the columns filter. This is about setting parts of text in multiple columns, not about typesetting an entire document in two columns. It is sometimes useful to typset a part of text into multiple columns, e.g. to display some claims or formulas side by side. Note that this is not the same as using a table. Here we just divide part of the text into two or more columns, and the text may be allowed to flow from one to the other. The syntax is this: ::: columns :::: column This goes in the first column :::: :::: column This goes in the second column :::: :::: column This goes in a third column :::: ::: You can also use the “attribute” form {.column} and {.columns}. This is useful when we specify further attributes: ::: columns :::: {.column width=&quot;40%&quot;} This goes in the first column :::: :::: {column width=&quot;60%&quot; align=&quot;center&quot;} This goes in the second column :::: ::: (note, the attributes are arbitrary examples: they are not implemented yet.) Above I use three colons to open and close the “columns” part, and four colons to open and close each “column”. Any number above two works, provided they are distinct from each other. Good Bad Columns opens and closes with 3 colons, each column opens and closes with 5: ::: {.columns} ::::: {.column} On the left ::::: ::::: {.column} On the right ::::: ::: Everything opens and closes with 4 colons: :::: {.columns} :::: {.column} On the left :::: :::: {.column} On the right :::: :::: First column opens and closes with 5 colons, second with 7: ::: {.columns} ::::: {.column} On the left ::::: ::::::: {.column} On the right ::::::: ::: ``` First column opens with 5 but closes with 7, second column opens with 7 but closes with 5: ::: {.columns} ::::: {.column} On the left :::::::: ::::::: {.column} On the right ::::: ::: The {. … } is optional if you have one word only, but mandatory if you have several ::: {.columns} ::: {.column} On the left ::: ::: {.column} On the right ::: ::: ::: {.columns \\#my-columns} ::: {.column} On the left ::: ::: {.column} On the right ::: ::: ::: columns \\#my-columns ::::: column width=&quot;40%&quot; On the left ::::: ::::::: column label=&quot;red&quot; On the right ::::::: ::: To be added later. You can specify the relative width of each column: ::: columns :::: column This goes in the first column :::: :::: column This goes in the second column :::: :::: column This goes in a third column :::: ::: 9.12 Arguments and proofs Sometimes philosophers describe an argument with indentation and a line between premises and conclusion: P1. All men are mortal P2. Socrates is a man C. Socrates is mortal We should encode the argument as a statement, and the line as a pandoc horizontal line: ::: statement P1. All men are mortal P2. Socrates is mortal. --- C. Socrates is moral ::: Warning: make sure there’s an empty line before ‘—’, otherwise the line above is interpreted as a subsection heading. 9.13 Raw code if all else fails Requirement. The not-in-format filter is required for some of the below. When there is no markdown solution to typeset something there is fallback solution: include raw output code of other formats directly in your markdown document. We first figure out how the element should be coded in relevant output formats (LaTeX, html, xml); we call this raw code. Then we insert raw code without our markdown document. In some cases you’re happy with the output markdown generates in some, but not all, formats. For instance, the XML output is fine (XML has no typesetting), but you’d like to do some fine-grained typesetting in LaTeX that the normal LaTeX output doesn’t handle. In that case you’ll use markdown for some output formats, but provide raw code only for LaTeX. To provide Raw code for all output formats, you insert it as follows: ``` {=latex} ... LaTeX code here ... ``` ``` {=html} ... html/epub code here ... ``` ``` {=xml} ... xml code here ... ``` The part marked with {=latex} will be included as is in the LaTeX output (for PDFs) and only in the LaTeX output. To provide raw code for some, but not all, formats, you should put the relevant bits of markdown within a not-in-format div, and the raw code after it. (This method requires the not-in-format Pandoc filter.) For instance: ::: {.not-in-format .latex} -------- ------- simple table -------- ------- ::: ```{=latex} \\begin{table} \\begin{tabular}{ll} \\hline simple &amp; table \\hline \\end{tabular} \\end{table} ``` Here the simple markdown table enclosed within :::{.not-in-format .latex} … ::: will be used for all outputs formats except LaTeX and LaTeX-based outputs like PDF and beamer. The raw code below included within ```{=latex} … ``` will be used for LaTeX and LaTeX-based outputs. You can leave out some markdown section from several formats too: :::{.not-in-format .xml .latex}. References "],["cross-referencing.html", "Chapter 10 Cross-referencing 10.1 Cross-referencing sections 10.2 Cross-referencing footnotes 10.3 Cross-referencing list items 10.4 Internal links", " Chapter 10 Cross-referencing When an article cross-references its own sections, figures, tables, images, numbered examples, equations and footnotes, we encode these in markdown. This ensures that they are linked (and, in some case, standardly labelled and properly numbered) in the outputs. Cross-references to sections, figure, tables, images are handled by the pandoc-crossref extension of pandoc. We describe its basic usage described below (full documentation here). Cross-references to numbered examples is handled by pandoc itself, usage described below. At the moment we cannot handle neatly cross-references to footnotes. A workaround is given below. 10.1 Cross-referencing sections To cross-reference a section you first need to know its identifier. pandoc accepts manually specified identifiers but also automatically generates identifiers. A manually specified identifiers is given by adding {#sec:mysecid} after the heading. An automatically generated identifier is obtained by putting the section heading in lowercase, removing all formatting, links, footnotes, removing all characters other than letters, numbers, underscore, periods and hyphens, and replacing spaces by hyphens. Some examples: Markdown heading Resulting section identifier(s) # The Last Stand the-last-stand ## Cause *célèbre*^[Sic.] cause-célèbre ## The no.1 'Foolish' Claim that $E=mc^2$ the-no.1-foolish-claim-that-emc2 # The First Word {#sec:first} first Special cases. If a heading starts with something else than a letter, everything before that letter is removed (to ensure that all identifiers start with a letter). If a heading is empty, its identifier is section. If there are several headings of the same name (say, section), the second one is suffixed with -1 (section-1) then -2, etc. Markdown headings Resulting section identifier(s) # 3 Little Pigs little-pigs # Surprise Party ## Surprise Party surprise-party surprise-party-1 # # section section-1 Warning: of course, if you change a section heading title, the automatically generated identifier changes. So if your headings might change, either use manual identifiers or wait before entering cross-references. When editing in RStudio visual mode, you can use Insert &gt; Cross-reference to find heading identifiers. A menu with the list of headings is displayed; pick the one you want and the editor will insert the code ??. Remove @ref(…), and enter @sec: right in front of the the-first-word. The code @sec:the-first-word should become blue as you type @ and the following letters; if not it’s not interpreted as a reference, try again or edit in code mode instead. Now to cross-reference sections with identifiers the-first-word, the-second-word, use the following code: I want I type In sec. 1, we review… In @sec:the-first-word, we review or In [@sec:the-first-word], we review Sec. 1 discusses @Sec:title-of-section discusses or [@Sec:title-of-section] discusses In secs. 1, 2 we In [@sec:the-first-word; @sec:the-second-word] we review … elsewhere (sec. 1). ...elsewhere (@sec:the-first-word). or ...elsewhere ([@sec:the-first-word]). Note that @Sec:… instead of @sec:… capitalizes the label. Note that the quare-bracketed version doesn’t add parentheses (unlike in citations): the square brackets are only necessary if you have several references or a manually specified prefix (below). The prefix (“sec.” here) is specified by the template. It can be suppressed or manually specified: I want I type as said above (1). as said above [-@sec:the-first-word] In unit 1, we… In [unit @sec:the-first-word] In § 1, we… In [§ @sec:the-first-word] In appendix 5, … In [appendix @sec:appendix-proof-of-theorems], ... In appendices 5, 6, … In [appendices @sec:app1; appendices @sec:app2] As the last line illustrates, you need to repeat the custom prefix to each entries that it applies to, even though in the output they will be grouped. Style recommendations. Call subsections “sections” when referencing to them. If you’re referencing a subsection, you should still call it “section” in the readable text: ``cf. section [@sec:asubsectionid]. A subsection is a section, and the terminology of “subsection” is clunky and technical. Avoid specifying a manual prefix just to follow the author’s style. The default prefix is specified in the journal’s style template and should be preferred wherever possible. A manual prefix is only recommended for appendices (or any other section that is not a regular section of the paper). “In the last section”, “In the next section”, …. What if the author references sections verbally, e.g.: “In the last section, we will summarize…”, or “The next section reviews …”? Two options, decide what fits best: make non-verbose: In @sec:the-last-one, we..., @Sec:the-next-one reviews ... add cross-references in brackets: In the last section ([@sec:the-last-one]), In the next section ([@sec:the-next-one]), .... The following does not work with PDF output, so we do not use it. It is also possible to specify a custom label to replace the number. This can be combined with a custom identifier: I want I type See appendix A… 12. Appendix A: Proofs See [appendix @sec:appendix-a-proofs]... # Appendix A: Proofs {label=\"A\"} See appendix A… 12. Appendix A: Proofs See [appendix @sec:app1]... # Appendix A: Proofs {label=\"A\" #sec:app1} 10.2 Cross-referencing footnotes Cross-reference to footnotes has to be done manually. Don’t enter them before you know that the footnote numbers are final. The syntax is as follows: This is the main text.[^footnote] [^footnote]: []{#my-best-footnote} On this difficult point I would like to add irrelevant remarks... . ... As mentioned above in [footnote 1](#my-best-footnote), ... [](#my-best-footnote) creates a ‘target’ that can be linked to using the identifier #my-best-footnote . Plate that target at the beginning of the footnote. Later in the text we refer to it by turning the text “footnote 1” into a link to that identifier: [footnote 1](#my-best-footnote) . The link works in both html and LaTeX. But the “footnote 1” has to be entered manually, so you need to know the correct number for the footnote. 10.3 Cross-referencing list items You have a numbered list and you want to cross-reference one of its items: first item section item third item. My favour item is (2), what’s yours? The solution is as with footnotes: you have to put an invisible link target in the item and you have to create a link to it. The number is manually entered in the link, not automatic, so you have to make sure you know which number it is. 1. first item 2. []{#myidentifier} section item 3. third item. My favour item is ([2](#myidentifier)), what&#39;s yours? Note the difference between the target, where the identifier is in curly braces, and the link, where the identifier is in parentheses: target: []{#myidentifier} link: [2](#myidentifier) 10.4 Internal links If you want a part of the text to link to another, say have a statement labelled “C1” and later parts referring to it as “(C1)”, use internal link syntax. The general syntax is: [text to be linked to]{#unique-identifier} ... [text that will become a link](#unique-identifier) Common error: leaving spaces between text and {\\#identifier}: BAD GOOD [text linked to] {#identifier} [linking text] (#identifier) [text linked to]{#identifier} [linking text](#identifier) Example: [Claim 1]{#my-claim}. Death is nothing to us. (... article goes on ...) As [my earlier claim](#my-claim) established, ... . This outputs, in both HTML and LaTeX : Claim 1. Death is nothing to us … As my earlier claim established, … Don’t worry about whether the link is coloured and/or underlined: that is to be decided by the journal style. Note that [text that will be linked] to and [text that will become a link] are printed as is. If you wanted to change all labels to “Claim 2”, for instance, you need to change both the text linked to and the text that becomes a link. Targets (also known as “anchors”) and links to them typically need some formatting. For instance, we may want our claim label in bold and the link to it to be the label itself in parentheses: [**C1**]{#my-new-claim}. Death is nothing to us. ... As ([C1](#my-new-claim)) established, ... . This outputs: C1. Death is nothing to us. … As (C1) established, … . "],["citations.html", "Chapter 11 Citations 11.1 Encoding citations 11.2 Examples with preferred answers", " Chapter 11 Citations 11.1 Encoding citations There are three styles of citations: Basic, a.k.a. parenthesis: (Smith 2012). Inline: Smith (2012) says that…. Year-only: … that elephants are happier than humans (2012). To code a citation of a given reference, you need to know the reference’s citation key. You can see the keys from the .bib file of your article. In RStudio, if you use the visual mode, use Insert &gt; citation and select the source “Bibliography”, and it will allow you to select entries from the .bib file. I want I type Basic (Smith, 2012) [@Smith2012] (Smith, 2012, 2015) [@Smith2012; @Smith2015] (Smith 2012; Jones 2015) [@Smith2012;@Jones2015] (Smith 2012, 205) [@Smith2012, 205] (Smith 2012, iv-vii) Note: when non-numerical page numbers specify p. in the code [@Smith2012, p. iv-viii] (see Smith 2012, 205) [see @Smith2012, 205] (Smith 2012, 205-210, 235) [@Smith2012, 205-210, 235] (Smith 2012, 28; Jones 2015, 2017) [@Smith2012, 28; @Jones2015; @Jones2017] (see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58) Note: whether you get ‘;’ or ‘,’ or ‘:’ separators between several citations should be specified and handled automatically by the template. [see @Smith2018, 28; comp. @Jones2015, 28; also @Jones2017, 45--48] Inline Smith (2012) says that @Smith2012 says that Smith (2012, 205) says that @Smith2012 [205] says that Smith (2012, x-xii) says that Specify p. when the page numbers are not numerical @Smith2012 [p. x-xii] says that Inline several papers by same author, you format the first inline and the rest regular: Smith (2012; 2015, 205) says that @Smith2012 [@Smith2015, 205] says that Peregrin &amp; Svoboda (2013, 2016, 2017, and also Read, 2018) Smith (2012, p. 33; 2015, p. 300) Alternatively, you can type the name and use year-only: Smith (2012; 2015) @peregrin-svoboda:2013a [@peregrin-svob oda:2016;@peregrin-svoboda:2017; and also @read_s:2000] @Smith2012 [p.33; @Smith2015, p.300] Smith [-@Smith2012, @Smith2015] Year only Smith makes an outrageous claim (2015, 277). Smith keeps repeating himself (2012, 2013, 2014, 2015). Smith said this in a few places (2012, 20; 2013, 30) Smith makes an outrageous claim [-@Smith2015, 277]. Smith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015] Smith said this in a few places [-@Smith2012, 20; @Smith2013, 30]. Common errors: Bad Good Code: (See for instance [@Smith2015]). (See for instance @Jones2018). Output: (See for instance (Smith, 2015)). (See for instance Jones (2018)). Code: [See for instance, @Smith2015] Output: (See for instance Smith, 2015). Code: See f o r instance @Smith2012; @Smith2015. Output: See for instance Smith (2012); Smith (2015). Code: See for insta n ce Smith [-@Smith2012; @Smith2015] Output: See for instance Smith (2012, 2015). More details explained in pandoc’s markdown reference, citations section. 11.1.1 Ibid., Op. Cit., sec. or § and the like All the finer-grained formating is handled by the bibliography template. Whether repeated citations are printed out as “ibid”, “op. cit”, whether page ranges are referred to as “pp. 12-15” or “p. 12-15” or “12-15”, whether sections are called “sec.” or “§”, etc., all of this is decided and automatically handled by the bibliography template. If an author uses ibid. or op. cit., just replace it with the original citation. For instance, if the author’s manuscript has: Lewis (1986, 19) says something important. He adds something less interesting a few pages later (ibid., 29). We encode: @Lewis1986 [19] says something important. He adds something less interesting a few pages later [@Lewis1986, 29]. 11.2 Examples with preferred answers 11.2.1 Example: Doe (2019, 2020) Original It should be noted here that, on the face of it, Doe (2019, 2020) does introduce his theory to justify placing greater weight on oneself than on others in making decisions. Proposed It should be noted here that, on the face of it, Doe (2020, 2019) does introduce his theory to justify placing greater weight on oneself than on others in making decisions. on the face of it, Doe [-@doe_j:2020; -@doe_j:2019] does introduce... Preferred Use the inline citation format. It should be noted here that, on the face of it, Jane Doe (2020, 2019) does introduce his theory to justify placing greater weight on oneself than on others in making decisions. on the face of it, @doe_j:2020 [@doe_j:2019] does introduce 11.2.2 Example: locating the possessive “’s” Original One example is Doe (2020)’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon. Proposal One example is Doe (2020)’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon. One example is Doe [-@doe_j:2020]&#39;s notion... Preferred Inline citations are simpler and give a better output link (clickable name as well as year): One example is Jane Doe (2020)’s notion… One example is @doe_j:2020&#39;s notion... But in the original, “Doe (2020)’s …” is bad typesetting. Better move the citation to the end of the sentence or attach the possessive to the author’s name: One example is Doe’s notion of the “personal horizon,” especially considering his discussion of “the truth in solipsism” and his insistence that “my” horizon is really “the” (preeminent) horizon [doe_j:2020]. “the” (preeminent) horizon [doe_j:2020]. One example is Doe’s [-doe_j:2020] notion… One example is Doe&#39;s [-doe_j:2020] notion... Both are fine, my favoured option is the first. 11.2.3 Example Original Others have granted him as much (e.g., Jones (2017), and Jane Doe in the introduction to Smith (2018)). Copyedited We would avoid the double parenthesis at the end. More generally, avoid parentheses when the references is in parentheses: Others have granted him as much (e.g., Jones, 2017, and Jane Doe in the introduction to Smith, 2018). But also, if we’re citing Jane Doe’s introduction to Smith (2018), we should have a bibliography entry for that chapter itself. So ultimately we want: (e.g., Jones, 2017, Doe 2018). Proposed First attempt, use two inline citations. But it results in a double parenthesis: Others have granted him as much (e.g., Jones (2019), and Jane Doe in the introduction to Smith (2018)). as much (e.g., @jones_j:2017, and Jane Doe in the introduction to @smith_j:2018). Second attempt, make it a single parenthesis citation with two references, on the model (Jones 2019; Smith 2018) ([@jones_j:2017; @smith_j:2018]). But pandoc doesn’t see it as a citation and the phrase disappears: Others have granted him as much Smith (2018). as much [e.g., @jones_j:2017, and Jane Doe in the introduction to @smith_j:2018]. What is going on? The syntax of inline citation separates prefixes and suffixes with commas (,) or spaces and different references with semi-colons (;). So the general rule is: if you have two keys you should have a semi-colon. In the code above what pandoc sees is: [prefix, @citekey, verylongsuffix] where verylongsuffix is the code and Jane Doe in the introduction to @smith_j:2018. But a suffix cannot include citations. It can only be simple text (and passim or a famous passage) or locator type + location (chap. 2, pages 12-13) or location (12-13). To avoid that, we must make “and Jane Doe in the introduction to” the prefix of the second citation, @smight_j:2018: Others have granted him as much (e.g., Jones 2019; and Jane Doe in the introduction to Smith 2018). as much [e.g., @jones_j:2017; and Jane Doe in the introduction to @smith_j:2018]. This is seen by pandoc as: [prefix, @jones_j:2017; anotherprefix @smith_j:2018]. Remark that we get ; rather than , in between the citations. Compare: Others have granted him as much (e.g., Jones, 2017, and Jane Doe in the introduction to Smith, 2018). Others have granted him as much (e.g., Jones, 2017; and Jane Doe in the introduction to Smith, 2018). Some might prefer the first. But this is a small cost and one could argue that the second is more systematic. Preferred The preferred method is to cite Doe’s introduction to Smith (2018) as a reference in its own right: Others have granted him as much (e.g., Jones 2019; John Doe 2018). as much [e.g., @jones_j:2017; @doe_j:2018]. This requires an adding to the entry in the bibliography. The entry is a book section authored by Doe is a book authored (not edited) by Smith. Entering it in Zotero and exporting as Bibtex gives us the code: @inbook{doe_j:2018, author = {Doe, John}, title = {Introduction}, booktitle = {An imaginary book}, bookauthor = {Smith, John}, publisher = {Ideas Press}, address = {Mainville}, year = {2018} } References "],["bibliography-1.html", "Chapter 12 Bibliography 12.1 Get or create a BibTeX file 12.2 Make sure any self-cited entries are included and printed 12.3 Adding non-cited references in the bibliography 12.4 Inserting Citations in the text in RStudio 12.5 Formatting citations in the text 12.6 BibTeX file guidelines 12.7 BibTeX file special entry types 12.8 Troubleshooting and examples", " Chapter 12 Bibliography You should get or create a bibliography file contained the references cited in your manuscript. This could be a BibTeX file (.bib) or a CSL json file (usually .json). You need to: Get or create a bibliography file Check whether the file includes any self-cited entries. Some bibliography entries may cite other entries, so the bibliography file will cite its own entries. We need to ensure that any such self-cited entry is actually present in the file, and we need to ensure that it is printed out in the bibliography. dialectica. We use BibTeX files. The “bibliography file” below refers to a .bib file in your article’s folder. 12.1 Get or create a BibTeX file Temporary solution: get your .bib from Philipp. 12.2 Make sure any self-cited entries are included and printed Your bibliography file may be ‘self-citing’, that is it may include some entries that cite other entries. For instance, a bibliography entry may have the title “Review of \\citet{Smith_h:2005}”, where the latter is LaTeX code to cite the entry with key Smith_h:2005. If your bibliography file might have such entries you need to do two things: Make sure that for all the self-cited keys, there is an entry in the file. Make sure that the self-cited keys are printed out in the final bibliography. If somebody else is taking care of your bibliography file, you only have to do the second. If in addition you’re sure that your bibliography file does not include unnecessary entries, you have a simple way of dealing with (2) by adding the nocite: @* line in your metadata. See below. 12.2.1 Check that the BibTeX file includes all self-cited entries Requires: Dialectica’s selfcites.py script. Using the terminal. The problem. If a bibliography file self-cites some keys, but doesn’t include an entry for these keys, you will get “Missing reference” warnings and your bibliography will be incomplete. You need to ensure that there’s an entry for any self-cited key. Solution. Run the selfcites.py script on your bibliography file. Suppose your article’s bibliography file is named myreferences.bib. Open a terminal, navigate to the article folder and run: python3 ../../../resources/scripts/selfcites.py myreferences.bib More generally, you can run that script from anywhere on a bib file that is anywhere: python3 path/to//selfcites.py path/to/myreferences.bib The script will check the .bib file for self-citations and output a report in the terminal such as: Dialectica open access initative self-citing bibliography file check, (c) Thomas Hodgson 2021 I found these self cited keys: quine:1951e, loux:1970, lewis_dk:2001c, vaninwagen:2001, quine:1953, lewis_dk:1983 These self cited keys are missing from the file&#39;s entries: quine:1951e loux:1970 lewis_dk:2001c vaninwagen:2001 quine:1953 lewis_dk:1983 For information, these are all the entries I found: horgan_te-potrc:2008, brenner_and:2017a, zimmerman_dw:2008, kleinschmidt_s:2014, sider_t:2013, rettler:2016, vaninwagen:1998d, cameron_rp:2012, lewis_dk:1973, cowling_s:2013b, finocchiaro_p:2019:, burgess_jp-rosen:1997, mcsweeney:2019, willard_mb:2014, bennett_k:2009, nolan_dp:1997b, tallant:2013a, schaffer_j:2015a, prior_an-fine:1977, turner_j:2015, churchland_pm:1984, finocchiaro_p:2021:, melia:2008a, quine:1948, torza:2015, schaffer_j:2009d, lewis_dk-lewis:1970, bennett_k-zimmerman:2013, linnebo-nicolas:2008, lewis_dk:1986, parsons_j:2014, chalmers_dj-etal:2009, sober:2015, sider_t:2011, merricks:2001, keller_ja:2017, finocchiaro_p:2019b:, mckay_tj:2006, paul_la:2017a If there are keys below “These self cited keys are missing from the file’s entries:”, then your .bib file cites these keys but they are missing. You need to add them. The line below “I found these self cited keys:” can be used to ensure the self-cited entries are printed in the article bibliography. See below. 12.2.2 Make sure all the self-cited entries are printed out The problem. If bibliography file self-cites some entries, but the manuscript itself doesn’t cite them, these entries will not be printed in the bibliography. The solution. The self-cited entries must be added in the document’s metadata, in a nocite field. There are two ways to do so: if you’re sure that your .bib file only contains entries that need to be printed out (no extra entries), then you can use the simple option 1. otherwise, use option 2, which requires a script. Option 1. If you are sure that your .bib file only contains entries that need to be printed out in the bibliography Requires: the selfcites.py script. See above. Open the .bib file in a text editor. Search for \\cite. If you have no no results, then your .bib file doesn’t include self-citations and you are good to go. If you do find results, you will have bibliography entries in the file that look like this, for instance: @book{geach_pt:1962, address = {Ithaca, New York}, author = {Geach, Peter Thomas}, note = {third edition: \\citet{geach_pt:1980}}, publisher = {Cornell University Press}, title = {Reference and Generality, an examination of some medieval and modern theories}, year = {1962}, } In the note = line here, you see the code \\citet{geach_pt:1980}. This is a LaTeX command that cites another bibliography entry in the same file, namely the one with the key geach_pt:1980. Ultimately this will be printed out in the bibliography as: Geach, Peter Thomas (1962) Reference and Generality, an Examination of Some Medieval and Modern Theories, Ithaca, New York: Cornell University Press. Thrid edition: Geach (1980). … Geach, Peter Thomas (1980) Reference and Generality, … The LaTeX \\cite commands can start with \\cite, \\citet, \\citep; you will find all of these by searching \\cite in the file. Sometimes the command cites pages numbers and looks like this instead: note = {reprinted in \\citet[232--258]{mccall_s:1967}, with considerable change in notation}, In that case the cited entry’s key is still the thing between curly brackets, here mccall_s:1967. Now you need to make sure that the self-cited entries appear in the bibliography. The problem is that if it is only cited in the bibligraphy and not the paper itself, it will not automatically be included. To ensure that it is included, you need to add the key in your document metadata, in a nocite field: title: A Neat Paper author: Smith, John bibliography: smith.bib nocite: | geach_pt:1980, mccall_s:1967 The nocite: | should appear on one line, the entries on one or several lines below but each of those lines must start with at least two spaces, and the entries should be separated by commas. You need not check whether the entries are actually cited in the paper or not: just add them to the nocite metadata, it will not hurt if they are also cited. Continue searching for \\cite commands in your .bib file and make sure all the keys are entered in your document’s nocite metadata section. 12.3 Adding non-cited references in the bibliography In the metadata block, add a line: nocite: | @bibtexentry1, @bibtexentry2, @bibtexentry3 If you have lots of those, best use a tool to extract the keys automatically from a bibtex file. 12.4 Inserting Citations in the text in RStudio Requires: RStudio visual editor mode. In visual mode, Insert &gt; @ Citation. It opens a popup window; on its left menu, choose bibliography. Click the plus sign on the right of each citation, then press the insert button. Missing references: Go to @ Citations. On the left menu of the pop-up window, choose CrossRef. (See image below). Type the author and the name of the paper in the search bar; that should find the paper. Click on the plus sign on the right of the entry, then press insert button which will add the reference to the bibliography file. 12.5 Formatting citations in the text There are various formats of citations: In several recent papers, this has all been shown wrong (Castor &gt; 2018; Pollux 2020). As Castor (2020: 127) shows, this is all wrong. To get these various formats you need to modify the markdown code for citations. For instructions refer to the Markdown guide above (cheatsheet or section on citations). 12.6 BibTeX file guidelines This only applies to BibTeX (.bib) files. If you’re using CSL Json files, you are probably generating them from Zotero or some other bibliography manager instead. 12.6.1 How to correct the file Two methods: Edit the .bib file directly in a text editor (e.g. RStudio). Either: fix manually what is wrong with the entry. delete the entry, search and add it again with the same method as when you miss a reference (see below). Use a bibliography manager (BibDesk, comes with TeXshop on Macos, or JabRef). Rather not Zotero, as it converts .bib file into its own format before re-exporting to .bib, which may modify some of the things in your file. 12.6.2 BibTeX field names aren’t case-sensitive BibTeX field names are not case-sensitive: they can be named “author”, or “Author”, or “AUTHOR”. @inbook{Jakobson:1980, Author = {Jakobson, Roman}, Title = {Metalanguage as a Linguistic Problem} } Is the same as: @inbook{Jakobson:1980, author = {Jakobson, Roman}, TITLE = {Metalanguage as a Linguistic Problem} } 12.6.3 Title capitalization Traditionally, in English bibliographies titles in English are typeset in title case (“An Article with Results”) but titles in other languages are typeset in sentence case (“An article with results”). In German or French bibliographies, all titles (including those of works in English) are in sentence case.11 The appearance is controlled by our bibliography template. For this to work entries in the the BibTeX file must: Have a langid field specifying the entry’s language as an IETF language tag: en, en-US, de, etc.12 Though (at least some) full names like english or french will work too. If there is no langid field for a given BibTeX entry, the entry is assumed to be in the language of the document (as specified in the document’s metadata, lang field). Have titles in sentence case, that is, where only names and words that need to be capitalized no matter what are in upper case. For instance, “The philosophy of logical atomism” or “Der Wahrheitsbegriff in den formalisierten Sprachen”. If an entry uses title case (“Rezension der Schrift von…”), the capitals will be assumed to be mandatory and will be printed even when it should be in sentence case. Thus if you know that your bibliography entries in English will always be printed in title case (i.e., your publication is in English and you’re sure it won’t adopt the APA sentence case convention), then it’s harmless to use title case in the BibTeX file itself. But when in doubt sentence case + langid field is the safe option. For an illustration: @article{Tarski1936, author = {Alfred Tarski}, title = {Der Wahrheitsbegriff in den formalisierten Sprachen}, journal = {Studia Philosophica}, volume = {1}, pages = {261--405}, year = {1936}, langid = {de}, } @article{Russell1905, author = {Bertrand Russell}, title = {On denoting}, journal = {Mind}, volume = {14}, number = {56}, pages = {479--493}, year = {1905}, langid = {en}, } For more detail: the langid field is a biblatex field name. It is recognized by Pandoc’s citeproc (Pandoc’s internal citation processor) for use in a association with a CSL style file. There is a language field in BibTeX files too. But it is not meant to affect an entry’s format; rather, it is used for entries to explicitly state its language](ttps://tex.stackexchange.com/questions/323441/how-does-langid-field-in-biblatex-differ-from-language-field) affect the formal of the bibliography. 12.6.4 Original year of publication If the author isn’t using the original edition of a book, e.g. citing from a 2010 edition of Locke’s 1689 essay, add a field origdate in the bibtex entry. (will not show up in the PDF at the moment, but our final template will do it). Ex: @inbook{Jakobson:1980, Author = {Jakobson, Roman}, Booktitle = {The Framework of Language}, Location = {Ann Arbor}, Year = {1980} Origdate = {1956}, Pages = {81\\--92}, Publisher = {University of Michigan Press}, Shorttitle = {Metalanguage as a Linguistic Problem}, Title = {Metalanguage as a Linguistic Problem} } See biblatex documentation, §2.2.2 on data fields. 12.6.5 BibTeX conventions and resources There are two BibTeX standards that can be used: BibTeX BibLaTeX The two conventions overlap a lot (most of the field names are common). The BibLaTeX conventions are more recent and complete. The BibTeX ones are widely used, and almost entirely compatible with BibLaTeX. Each corresponds to a LaTeX bibliography processor (bibtex and biber, respectively). Both are understood by Pandoc’s bibliography processor, citeproc. Where to find references on these BibTeX standards? BibTeX. The BibTeX original documentation (1988), Paperpile’s BibTeX guide. BibLaTeX. The BibLaTeX official documentation and the BibLaTeX cheatsheet. Note: if you have a full LaTeX installation on your computer you will have access to some of these documents from your terminal using the texdoc command. Try the commands: texdoc biblatex texdoc biblatex-cheatsheet texdoc bibtex Dialectica guideline. We use the biblatex conventions. 12.7 BibTeX file special entry types 12.7.1 Unpublished manuscript Choose the type unpublished. Add a note field: note = {unpublished manuscript} Add a URL if available. Dialectica guideline. We require a URL. If the author cannot provide a URL, we do not create a bibliography entry at all but only describe the source in a footnote (“in an unpublished manuscript titled”XXX”). 12.8 Troubleshooting and examples 12.8.1 Error message: \\citet unknown command Requires: script or filter that manages recursive bibliography management . Pandoc encounters a LaTeX citation command (\\citet or the like). Unless you or the author has written one in the text, it is in the .bib file.13 Solution 1. In Dialectica, LaTeX citation commands in the .bib file are processed. This is achieved by a script that runs pandoc on the document twice, first to generate a json that includes the biblio, second to generate the final output (at which state the latex commands in the biblio are processed). The first run is --to json and the second with -M suppress-bibliography. Suggested by John MacFarlane on pandoc-discuss. Solution 1. Replace the offending \\citet command(s) in your .bib file. To find it or them: process the markdown with .tex output. search \\citet in the tex output. you should see which bib entry it is in. go to the .bib file and replace the \\citet{jones_a:2020} in that entry with e.g. Jones (2020), and in the md, enter the citation key as no-cite (see above) Solution 2. Implement a double-pass generation procedure. This is the publisher’s job. We have now figured out a method to process those command. However, we’ll need to update the document-generation procedure to implement it. Either wait for it, or use solution 1. in a field of your .bib file is printed out. It needs to be replaced. To find it: process the markdown with .tex output. search \\citet in the tex output. you should see which bib entry it is in. go to the .bib file and replace the \\citet{jones_a:2020} in that entry with e.g. Jones (2020), and in the md, enter the citation key as no-cite (see above) Explanation. Pandoc doesn’t process it (at least, not if the field is “title”, and perhaps not in general), leaves the \\citet command. At the LaTeX stage it’s not recognized by LaTeX (because we don’t load natbib). 12.8.2 From Frege to gödel Mystery. The cross ref below is printed out as “From Frege to gödel:” by citeproc, no matter (a) whether we write Gödel or G{\\¨o}del, (b) no matter the position, i.e. we get “From gödel to Frege”. The solution is put G in curly brackets. But why??? \\@incollection{frege:1967a, Author = {Frege, Gottlob}, Crossref = {vanheijenoort:1967}, Note = {translated by Stephan Bauer-Mengelberg}, Num_Sort = {40337}, Pages = {1\\--82}, Title = {Begriffsschrift: A Formula Language Modeled on that of Arithmetic, for Pure Thought}, Year = {1967} } \\@book{vanheijenoort:1967, editor = {van Heijenoort, Jan}, year = {1967}, title = {From Frege to G{\\&quot;o}del: A Source Book in Mathematical Logic 1879-1931}, booktitle = {From Frege to {G}ödel: A Source Book in Mathematical Logic 1879-1931}, address = {Cambridge, Massachusetts},publisher = {Harvard University Press} } Beginning of an answer: case is protected if a subpart of the word is bracketed. A dog called {Pizza} will be overriding by the style (and thus printed “A pizza” if the style calls for it) but A dog called {P}izza is protected. "],["comments-and-tracking-changes.html", "Chapter 13 Comments and tracking changes 13.1 Comments to fellow copyeditors 13.2 Revisions and comments for the author", " Chapter 13 Comments and tracking changes 13.1 Comments to fellow copyeditors If you don’t know what to do with a bit of the article, you may want to enter an invisible comment in the markdown file. You can do so by enclosing your comment between &lt;!-- and --&gt;: As everybody knows, that humans are animals is an a priori&lt;!-- JD should I italicize this?!? --&gt; truth that can be established by conceptual analysis. A comment can span several lines. 13.2 Revisions and comments for the author ON HOLD. Not implemented. We might use an alternative notation instead that is implemented. There is a standard for adding revisions to Markdown, CriticMarkup. It will also us to enter and make visible: Insertions Deletions Replacements Comments to the author You can start using it, but we need to do so configuration for it to display properly in the PDFs. See the CriticMarkUp syntax manual. I want I enter In sertion What a beautiful sentence. What a {++beautiful++} sentence. D eletion What a beautiful sentence. (with the red word crossed out, sorry can’t do that in Google docs!) What a {–beautiful–} sentence. Repl acement What a beautifulugly sentence. What a {~~beautiful ~&gt; ugly~~} sentence. Comment What a beautiful sentence. \\[comment to the author: this claim isn&#39;t clear\\] What a beautiful sentence.{&gt;&gt; this claim isn’t clear &lt;&lt;} Hi ghlight with comment What a beautiful sentence.\\[comment to the other: change the adjective!\\] What a {== beautiful ===}{&gt;&gt; change the adjective! &lt;&lt;} sentence. "],["trouble-and-troubleshooting.html", "Chapter 14 Trouble and troubleshooting 14.1 Word manuscript with many symbols (phi, psy, greek letters, logical symbols,). 14.2 Reverse conversion .md -&gt; .tex 14.3 If PDF generation doesn’t work 14.4 Missing character 14.5 List of things that cause trouble", " Chapter 14 Trouble and troubleshooting 14.1 Word manuscript with many symbols (phi, psy, greek letters, logical symbols,). If the symbols aren’t in MS Word Equations, they will be preserved as is in markdown - and the document won’t work. All the symbols have to converted into LaTeX formulas. A tip: Use search and replace in RStudio to convert each symbol in its &gt; LaTeX equivalent. Then go through the document to enclose each of them in $...$ (to &gt; indicate maths formulas). 14.2 Reverse conversion .md -&gt; .tex I want I type LaTex Basic (Smith, 2012) (Smith, 2012, 2015) (Smith 2012; Jones 2015) (Smith 2012, 205) (see Smith 2012, 205) (Smith 2012, 205-210, 235) (Smith 2012, 28; Jones 2015, 2017) (see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58) \\[\\@Smith2012\\] \\[\\@Smi th2012;\\@Smith2015\\] \\[\\@Smi th2012;\\@Jones2015\\] \\[\\@Smith2012, 205\\] \\[see \\@Smith2012, 205\\] \\[\\@Smith2012, 205\\--210, 235\\] \\[\\@Smith2012, 28; \\@Jones2015; \\@Jones2017\\] \\[see \\@Smith2018, 28; comp. \\@Jones2015, 28; also \\@Jones2017, 45\\--48\\]. \\citep{smith:2012} \\citep{sm ith:2012,smith:2015} \\citep{sm ith:2012,jones:2015} \\cite p\\[205\\]{smith:2012} \\citep\\[see\\ ]\\[205\\]{smith:2012} \\citep\\[205\\--2 10,235\\]{smith:2012} (Smith \\citeyea r\\[28\\]{smith:2012}; Jones \\citeyear{jon es:2015,jones:2017}) (see Smith \\citeyea r\\[28\\]{smith:2012}; comp. Jones \\citeyea r\\[28\\]{jones:2015}; also Jones \\citeyear\\[45 \\--58\\]{jones:2017}) Inline Smith (2012) says that Smith (2012, 205) says that Smith (2012; 2015, 205) says that Peregrin &amp; Svoboda (2013, 2016, 2017, and also Read, 2018) Alternatively, you can type the name and use year-only: Smith (2012; 2015) @Smith2012 says that @Smith2012 \\[205\\] says that @Smith2012 \\[\\@Smith2015, 205\\] says that @pe regrin-svoboda:2013a [@pe regrin-svoboda:2016; @pe regrin-svoboda:2017; and also @read_s:2000] Smith \\[-\\@Smith2012, \\@Smith2015\\] \\citet{smith:2012} says that \\cite t\\[205\\]{smith:2012} says that Smith (\\c iteyear{smith:2012}, \\citeyea r\\[205\\]{smith:205}) says that \\citet[]\\[and also Read \\\\citeyear{r ead_s:2000}\\]{peregr in-svoboda:2013,pere grin-svoboda:2016,pe regrin-svoboda:2017} Peregrin \\&amp; Svoboda (\\citeyear{peregri n-svoboda:2013,pereg rin-svoboda:2016,per egrin-svoboda:2017}, and also Read \\ci teyear{read_s:2000}) Year only Smith makes an outrageous claim (2015, 277). Smith keeps repeating himself (2012, 2013, 2014, 2015). Smith said this in a few places (2012, 20; 2013, 30) Smith makes an outrageous claim \\[-\\@Smith2015, 277\\]. Smith keeps repeating himself \\[-\\@Smith2012; \\@Smith2013; \\@Smith2014; \\@Smith2015\\]. Smith said this in a few places \\[-\\@Smith2012, 20; \\@Smith2013, 30\\]. Smith makes an outrageous claim (\\citeyear [277]{smith:2015}). Smith keeps repeating himself (\\citeyear{smith :2012,smith:2013,smi th:2014,smith:2015}) Smith said this in a few places (\\citeyea r\\[29\\]{smith:2012}, \\citeyear \\[30\\]{smith:2013}). 14.3 If PDF generation doesn’t work See “how to produce outputs housestyle” for some advice. 14.4 Missing character [WARNING] Missing character: There is no SPECIAL-CHAR (U+2192) in font FONT Means that your markdown file include a character SPECIAL-CHAR that is not available in the font you use. Typically, SPECIAL-CHAR is a symbol or character from non-latin languages. Note that you might not see anything where SPECIAL-CHAR is above, if the character in question is a (special kind of) space or if it’s not present in the font in which this warning is printed. Solution: if SPECIAL-CHAR is visible you can copy it, and search it in your markdown file. Remove it and if needed replace it with some character that is present in your font. Typically, this involves replacing a unicode symbol (a right arrow) by its LaTeX equivalent, e.g. \\(\\rightarrow\\). Solution: if SPECIAL-CHAR is not visible, look up the unicode number (e.g. U+2192 online) to see what character is it, and hunt it down in your markdown manuscript. 14.5 List of things that cause trouble 14.5.1 Visual editor RStudio Does not preserve numbered examples code (all processed). Tables: Doesn’t preserve code (not pipe format -&gt; loss of cell &gt; alignment) Interprets \\\\[ and \\\\\\] as display maths. Solution: do not escape the \\[ \\]. Only possible problem: it &gt; picks up a section label. But I think you can change the title &gt; in section labels. 14.5.2 Pandoc LaTeX encoding of tables is heavy (every cell is a minipage! &gt; Specifies detailed widths) Tables: no colspan nor rowspan yet Indented blocks (statements, arguments, …) and AMS theorems HTML default encoding of formulas uses unicode + italics + “math &gt; inline” custom style class. Use --mathjax flag; adds a link to &gt; mathjax.js in the head so this should be present on the website &gt; (or unnecessary if the galley has its own head). See pandoc &gt; manual on maths in &gt; html &gt; . 14.5.3 LaTeX Standard logic symbols: \\neg, \\lnot, \\land, \\lor, \\sim all well &gt; supported in MathML? (Not a big worry!) "],["markdown-cheatsheet.html", "Chapter 15 Markdown Cheatsheet 15.1 Inline elements 15.2 Block elements", " Chapter 15 Markdown Cheatsheet 15.1 Inline elements I want I type An emphasized word. An *emphasized* word. An _emphasized_ word. Something bold. Something **bold**. Something __bold__. A sub1 script and a sup1 script (when attached to plain text words). A sub~1~ script and a sup^1^ script. With \\(p_1\\) and \\(p^2\\) the sub(sup)scripts are in math formulas. Wit h $p_1$ and $p^2$ the sub(sup)scripts... 15.2 Block elements Paragraph Leave an empty line to separate two paragraphs Unindented paragraph (following equation, quotation) \\noindent This new paragraph... 1. Section heading # Section title Do not put a number: the house style should add numbers. 1.2 Subsection heading ## Subsection title 1.2.1 Subsubsection title lower titles ### Subsection title ####, #####, ###### Quotations Note: only use this for genuine quotations, not to indent blocks. &gt; Start each line with `&gt;` &gt; This is a quotation &gt; with two lines Statement (indented block) These lines are going to be indented First Principle (FP). Everything is what it is. See below on how to cross-refer to statements. ::: statement These lines are going to be indented. ::: ::: {.statement} *First principle* (**FP**). Everything is what it is.` ::: 15.2.1 Citations Citations are a more difficult aspect of markdown. You should read the chapter on copyediting citations before you use this cheatsheet. For the following we assume that your document’s bibliography has keys (identifiers) Smith2012, Jones2017 for Smith’s 2012 article, Jone’s 2017 articles, and so on. I want I type Basic (Smith, 2012) (Smith, 2012, 2015) (Smith 2012; Jones 2015) (Smith 2012, 205) (see Smith 2012, 205) (Smith 2012, 205-210, 235) (Smith 2012, 28; Jones 2015, 2017) (see Smith 2012, 28; comp. Jones 2015, 28; also Jones 2017, 45-58) Note: whether you get ‘;’ or ‘,’ or ‘:’ separators between several citations should be specified and handled automatically by the template. [@Smith2012] [@Smith2012; @Smith2015] [@Smith2012;@Jones2015] [@Smith2012, 205] [see @Smith2012, 205] [@Smith2012, 205\\--210, 235] [@Smith2012, 28; @Jones2015; @Jones2017] see @Smith2018, 28; comp. @Jones2015, 28; also @Jones2017, 45\\--48] Inline (note: should with latest RStudio visual mode, but read warning below) Smith (2012) says that Smith (2012, 205) says that Inline several papers by same author, you format the first inline and the rest regular: Smith (2012; 2015, 205) says that Peregrin &amp; Svoboda (2013, 2016, 2017, and also Read, 2018) Alternatively, you can type the name and use year-only: Smith (2012; 2015) @Smith2012 says that @Smith2012 [205] says that @Smith2012 [@Smith2015, 205] says that @peregrin-svoboda:2013a [@peregrin-svoboda:2016; @peregrin-svoboda:2017; and also @read_s:2000] Smith [-@Smith2012, @Smith2015] Year only Smith makes an outrageous claim (2015, 277). Smith keeps repeating himself (2012, 2013, 2014, 2015). Smith said this in a few places (2012, 20; 2013, 30) Smith makes an outrageous claim [-@Smith2015, 277]. Smith keeps repeating himself [-@Smith2012; @Smith2013; @Smith2014; @Smith2015] Smith said this in a few places [-@Smith2012, 20; @Smith2013, 30]. Common errors: Bad Good Code: (See for instance [@Smith2015]). (See for instance @Jones2018). Output: (See for instance (Smith, 2015)). (See for instance Jones (2018)). Code: [See for instance, @Smith2015] Output: (See for instance Smith, 2015). Code: See f o r instance @Smith2012; @Smith2015. Output: See for instance Smith (2012); Smith (2015). Code: See for insta n ce Smith [-@Smith2012; @Smith2015] Output: See for instance Smith (2012, 2015). Space after a formula marker $: Code: $ \\Delta \\rightarrow \\Phi $ | Output: Error, missing $ at line… Code: $\\Delta \\rightarrow \\Phi$ Output: \\(\\Delta \\rightarrow \\Phi\\) "],["why-publish-a-journal-in-markdown.html", "Chapter 16 Why publish a journal in markdown 16.1 Why use a markdown workflow 16.2 MS Word - Google docs workflow 16.3 Markdown workflow 16.4 Interaction with authors", " Chapter 16 Why publish a journal in markdown 16.1 Why use a markdown workflow A journal needs to produce outputs in different formats: html, PDF, possibly Epub. The aim is to generate all automatically from a single source. There are two ways to do this: XML. markdown. XML is the industry standard. But it is costly to work with (proprietary tools). markdown is a lighter-weight, popular authoring language. pandoc is a powerful converter that turns a large number of formats into markdown and conversely. It can be harnessed to produce outputs in all formats, including XML. 16.2 MS Word - Google docs workflow (to be elaborated on!) Clean the MS word document using our tool: https://dialectica-philosophy.herokuapp.com/pandoc Clean the MS word document Import it in Google Docs and edit it there, keeping all and only the meaningful elements (there’s a list in the document I’ll share). Don’t bother with fixing references at this stage. Save a snapshot of your document before you send it to the author. Share the edited document with the author, ask whether they’re happy with any modifications. You can activate the ‘track changes’ in google docs to make any major modifications visible to the author. Review the author changes, and once you and they are happy pass it on to the markdown team. To check: what edits are preserved in markdown: Cross References done with link &amp; bookmark in google doc 16.3 Markdown workflow The accepted papers will be in either .doc, .docx (Word) or .tex (LaTeX) format. First we convert doc and tex files to markdown files (.md). Then we do all the editing using RStudio, a visual markdown editor (for steps on editing, see next paragraph). Once the edits are done, the file is converted into a pdf which is sent back to the author for questions and / or for a final approval. If there are more changes, they are done again in the markdown file, and the final version is again converted into a pdf, then sent to the author for final approval. Once the final version is approved, we use Pandoc to convert the markdown file into a pdf (via LaTeX, which will have the determined style template) and html. Editing consists of: Editing the language (correct typos, bad English, strange sentences) Preserve and implement meaningful elements: headings, block quotations, formulas, … . Check that the bibliography is correct: that every citation has a reference in the bibliography. Replace manually added citations by automatic ones (for Word files, the bibliography needs to be converted into a Bibtex file with a website that is yet to be developed. Latex papers will already have a Bibtex file). Once all the changes are done, send the paper to the author for possible questions and to have their approval of the changes. 16.4 Interaction with authors Title + abstract. Remind authors that most online searches will only &gt; return title and abstract. Most potential readers won’t get &gt; further. They are advised to choose their title and abstract well. "],["the-structure-of-a-book-and-a-journal.html", "Chapter 17 The structure of a book and a journal 17.1 The structure of a book 17.2 The structure of a journal 17.3 Non-English conventions", " Chapter 17 The structure of a book and a journal 17.1 The structure of a book The cover is typically designed separately. It has five components: front cover, inside front cover, inside back cover, back cover, and spine. Front cover. Author and title, optionally publisher. Spine. Author and title, optionally publisher, series, volume, year…. Back cover. Title, blurb, credits for the cover image, barcode or QR code, publisher. Inside front and back cover. Could be empty. The book is divided in three parts: front, main and back matter. Following Wddingham (2014, 3) and Chicago Press (2010, sec. 1.4) the frontmatter contains: half-title, recto verso of the half-title: empty, series title, frontispiece title page, recto verso of the title page: empty, copyright dedication Then (Hart): foreword preface acknowledgments table of contents lists: illustrations, figures, maps, tables, table of cases and legislation (law books) abbreviations contributors note to the reader epigraph Or (Chicago): epigraph contents lists illustrations tables foreword Preface Acknowledgements (if not in preface) Introduction (it not part of text) Abbreviations (if not in back matter) Chronology (if not in back matter) Back matter Following Wddingham (2014, 17) appendix glossary endnotes bibliography notes on contributors indexes Following Chicago Press (2010, sec. 1.4): acknowledgments (if not in front matter) appendices chronology (if not in front) abbreviations (if not in front) endnotes glossary bibliography note on contributors illustration credits indexes 17.2 The structure of a journal Typical order of pages. Front matter editorial board title imprint Main matter article 17.3 Non-English conventions 17.3.0.1 Français Couverture: - première de couverture: - seconde de couverture: - troisième de couverture: - quatrième de couverture: - épine (dos): auteur, titre, maison d’édition (logo), … Suivant Collectif (2002): Couvertures intérieures ou rabats de la jaquette: autres ouvrages de la même maison, présentation de l’auteur. Facultatif: un feuillet blanc en début et fin de volume. En tête de volume, pagination en chiffres romains: le faux titre, recto. Titre et sous-titre verso du faux titre: illustration de frontispice ou liste des oeuvres de l’auteur. titre: recto. Titre, sous-titre auteur, copyright; eventuellement ISBN ou ISSN, édition, tirage, sommaire. dédicace: recto, après le titre. avis ou avertissement: en verso de l’une des premières pages. chapitres en tête d’ouvrage, dans l’ordre: avant-propos, préface, introduction (cas exceptionnel, voir ci-dessous), notice (par ex., notice sur les auteurs, ou sur l’utilisation de l’ouvrage, par exemple une liste d’abbréviations), (exceptionellement) bibliographie. En corps de volume, les chapitres, pagination en chiffres arabes. l’introduction est normalement en corps de volume. Elle est placée en tête seulement si ne fait pas partie du corps: introduction du traducteur, de l’éditeur d’un texte historique, etc. En fin de volume, pagination en chiffre arabe continuant celle du corps: postface, bibliographie (exceptionellement placée en tête), index, table des matières, colophon: tirage, achevé d’imprimé, mention du dépôt légal, mention de l’imprimeur sur la dernière page. References "],["resources.html", "Chapter 18 Resources 18.1 Style and copyediting manuals 18.2 Interface with dialectica’s main bibliography", " Chapter 18 Resources 18.1 Style and copyediting manuals 18.1.1 In English New Hart’s Rules, the Oxford style guide. Short compared to the others, and it’s good on the British vs American options. For copyeditors: see esp. chaps 2-12 and 17-18. In all those chapters there are of course many bits that are irrelevant for you but they are easy to skip. The Chicago Manual of Style. The one we preferably refer to if needed, very thorough and good for humanities, but 1000 pages long. Publication Manual of the American Psychological Association. Like the Chicago manual, more geared towards science, and more prescriptive. The website gives free access to simplified version of the rules for authors. But these are not useful for copyeditors (they’ll tell you to your word processor’s automatic bullet points styles, for instance). Butcher’s Copy-editing, the Cambridge Handbook for Editors, Copy-Editors and Proofreaders. A classic too, but different in scope from the others three. Unlike them doesn’t get into specific rules of punctuation, capitalization, spelling and the like. Rather, it maps out all the things a professional copyeditor has to do. A lot are things taken care of by our templates (how you can structure a book, how you can present various bits of it). Others are more general: which aspects of the author manuscripts should be changed or not, how to communicate these changes to the author, how to communicate instructions to typesetters, etc. Gives a good sense of how professional academic copyediting is like. MLA Handook. The style hanbook published by the Modern Languages Association of America. 18.1.2 In French [Le Ramat de la typographie](http://www.ramat.ca/], par Aurel Ramat et Anne-Marie Benoit, franco-canadien. Voir aussi le Ramat européen de la typographie. Bien structuré, complet. Inclut des comparaisons entre styles français, canadien, Chicago. Le Guide du typographe, par le Groupe de Lausanne de l’Association suisse des typographes (AST) et publié par l’Association Suisse des Correcteurs d’Imprimerie. Difficile à se procurer (commander directement auprès de l’association). En France, il y a une pluralité de livres écrits par des auteurs individuels. Nous ne savons pas lesquels sont les plus communément utilisés. Dictionnaire orthotypographique moderne (Colignon 2019). Par Jean-Pierre Colignon, publié par l’une des principales écoles de journalisme en France (CFPJ). Abrégé du code typographique à l’usage de la presse, par Louis Guéry. (126 pages) Dictionnaire des règles typographiques, par Louis Guéry. (287 pages) Orthotypo, par Jean-Pierre Lacroux, posthume, distribué en ligne sous licence Creative Commons (Lacroux 2010). Organisation alphabétique, ne couvre pas tous les sujets systématiquement. Les règles typographiques, Richard Herlin. Ouvrages qui étaient largement utilisés par le passé: Code Typographique (France, 1928-1997). Inactif. Lexique des règles typographiques en usage à l’Imprimerie nationale, par l’Imprimerie nationale de France. Inactif (dernière édition 2002). A usage limité: organisé par ordre alphabétique, avec un choix d’entrées qui semble arbitraire (ex, “Assemblée Nationale”, “Astérisque”), sommaire (une seule page sur la structure des ouvrages). Utile sur quelques points de détails (“particule patronymique”). 200 pages. 18.2 Interface with dialectica’s main bibliography More information on the bibliography is in the bibliography-section of the overleaf-document. JD some experiments: Tried simply adding the main bib file (biblio-check.bib) as the &gt; bibliography file of an article in RStudio. Problems: It takes circa 15-30sec to ’Read the bibliography” when opening &gt; the article, and 10-20sec again when opening the &gt; insert-citation window. But the bibliographies entries don’t show up in the &gt; ‘Bibliography’ tab. It looks as if either RStudio can’t read it (bug / unusual code &gt; somewhere?), or just gives up above a certain number of &gt; entries JD thought: We need either: some way of either generating a sub-selection of the main &gt; bibliography for the article. Automated? Something like Sandro’s / &gt; crossref bibtex convertor, but for this bibliography? (Suggestion: &gt; linking via DOIs?) Some way of having the main biblio as one of the source in RStudio &gt; citation-insertion popup, the way Zotero appears. However: risk &gt; that it is slow because of the size. Some way of searching the main biblio as one of the sources in &gt; RStudio, the way CrossRef appears in the citation-insertion popup. References "],["interface-with-dialecticas-main-bibliography-1.html", "Chapter 19 Interface with dialectica’s main bibliography", " Chapter 19 Interface with dialectica’s main bibliography Interface with dialectica’s main bibliography More information on the bibliography is in the bibliography-section of the overleaf-document. JD some experiments: Tried simply adding the main bib file (biblio-check.bib) as the &gt; bibliography file of an article in RStudio. Problems: It takes circa 15-30sec to ’Read the bibliography” when opening &gt; the article, and 10-20sec again when opening the &gt; insert-citation window. But the bibliographies entries don’t show up in the &gt; ‘Bibliography’ tab. It looks as if either RStudio can’t read it (bug / unusual code &gt; somewhere?), or just gives up above a certain number of &gt; entries JD thought: We need either: some way of either generating a sub-selection of the main &gt; bibliography for the article. Automated? Something like Sandro’s / &gt; crossref bibtex convertor, but for this bibliography? (Suggestion: &gt; linking via DOIs?) Some way of having the main biblio as one of the source in RStudio &gt; citation-insertion popup, the way Zotero appears. However: risk &gt; that it is slow because of the size. Some way of searching the main biblio as one of the sources in &gt; RStudio, the way CrossRef appears in the citation-insertion popup. "],["removed-parts-of-the-guide.html", "Chapter 20 Removed parts of the guide 20.1 Old “style guidelines” 20.2 Get or create a BibTeX file for the references in your article", " Chapter 20 Removed parts of the guide Leave here obsolete or ommitted bits that might serve for inspiration or be useful later on. 20.1 Old “style guidelines” Authors may either use GB or US English, but should be consistent. The family name of the author(s), “Abstract”, “References” and the family names of cited authors in the “References” section are in small caps. After the family name, the affiliation is given by “Postal address or University Affiliation, Email: email address”. No keywords are required. New paragraphs begin with a feeder, except after section titles, quotes and formulas. Longer citations are left- and right-indented and in smaller font. This replaces quotation marks. There is a small space before and after indented material. Authors should use a simple uniform layout. They should avoid mixing fonts and use italics (not bold) for words or phrases requiring emphasis, for variables and schematic letters not appearing in formulae, for titles of published books and journals, and for foreign words. The journal name dialectica is in italics and not capitalised. All diagrams should be professionally drawn and saved as camera-ready GIF-, TIF- or JPG-file. We recommend that you consult the illustration guidelines at http://authorservices.wiley.com/bauthor/illustration.asp. Whenever authors use special characters (e.g. in formulae), they are asked to provide the required fonts. LaTeX dialectica accepts submissions and final manuscripts set in LaTeX. Please make the source file as simple and self-contained as possible and provide special fonts et al. Please also send a pdf version of the print-out. References Bibliographical references should appear in the text (rather than in footnotes) in the form: (James, 1972) or (Smith et al. 1938, 173-174). All bibliographical references must be repeated at the end of the text under the heading “References”. The list should begin with the author’s last name, initials and followed by the year of publication, whenever possible according to the following style: Bunge, M. 1967a, Scientific Research I: The Search for System, Berlin: Springer Bunge, M. 1967b, Scientific Research II: The Search for Truth, Berlin: Springer Dretske, F. and Snyder, A. 1972, “Causal Irregularity”, Philosophy of Science 39, pp. 69-71 Harding, S. (ed.) 1976, Can Theories Be Refuted?, Dordrecht: Reidel Smith, A., Jones, B. and Hill, C. 1938, “The Science of Philosophy”, in: D. Wilson and E. Green, eds., Perspectives in Philosophy, Cambridge: Cambridge University Press, pp. 165-174 Titiev, R. J. 1969, Some Model-Theoretic Results in Measurement Theory (Technical Report 146, Institute for Mathematical Studies in the Social Sciences), Stanford: Stanford University Press 20.2 Get or create a BibTeX file for the references in your article THIS SECTION IS OBSOLETE. WE NOW GET OUR .BIBs FROM PHILIPP, WHO PROVIDES THEM WHILE WE WORK OUT A NEW WAY OF PRODUCING THEM. If the manuscript is in TeX, ask the author for the BibTeX file. If the manuscript is in Word, you have three solutions: The easiest way: You can use Sandro’s bibtex &gt; generator: Copy the references from the word file,14 enter your email into &gt; the bar below and submit. The .bib file is sent as email. Save the .bib file in the same folder as the article, because that &gt; is where RStudio will look for it. Add the name of the .bib file into the metadata block and save the &gt; article (the .md file), which will add the .bib file and allow you &gt; to insert citations. Check that the references have all the information. You may have to &gt; fix / add manually some of the references (instructions &gt; here). Create it manually beforehand: by pulling the entries from Philipp’s master bibliography (in the &gt; Dropbox dialectica/bibliography-in_work/biblio-check.bib, or from &gt; the spreadsheet if you prefer &gt; dialectica/bibliography-in_work/biblio-check.ods). By searching each entry on Philpapers, bookmarking it in a &gt; ‘collection’, and exporting the collection as BibTex Add them as you edit the file, by searching them using &gt; RStudio’s citation tool. Note: you can use dashes in your bib file name (references-final.bib) but don’t use underscores (references_final.bib). In conversion from RStudio they are escaped so it because “references\\_final.bib” in the tex file and the bibliography isn’t found. "],["references.html", "References", " References "],["copyeditors-checklist.html", "Chapter 21 Copyeditors Checklist", " Chapter 21 Copyeditors Checklist Metadata block: check that you have correctly added the information that you want to include (e.g. title, author, affiliation, abstract, bibliography, nocite (if needed)). Sections: check that they are correctly formatted with “#”, “##”, and so on. Original bibliography: check the author’s bibliography for mistakes (e.g. wrong title, wrong year of publication, etc.) In-text references: check that you have identified all the references in the text and replaced them with keys from your .bib file. In-text references: Make sure the references are consistent, e.g. if you leave the name of the author even if the author is named in the sentence for which you are formatting the reference, then make sure you do this always (depends on what citation style you are following). Bibliography section: check that the Bibliography section is consistent with the citation style you are following. Quotations: check that quotations are correctly formatted (e.g. as blocks wherever needed, according to the style you are following) Quotation marks: check that quotation marks are coherently used: single and/or double; punctuation inside/outside (depending on the style your are following) Dashes: check that hyphens, en dashes and em dashes are correctly and coherently used. Statements: check that claims, formulas and arguments are correctly formatted as :::{.statement} blocks Crossreferences: check that you have identified the crossreferences in the text and added labels wherever needed (e.g. references to sections, footnotes, claims, premises, arguments) Tables: check that the tables created are faithful renderings of the original tables by the author. Special symbols: check that the special symbols and punctuation used by the author are in a format recognizable in markdown (using LaTeX formulas wherever needed) Emphasis: check that emphasised words and sentences in the original text are emphasized in markdown (with asterisks and underscores) Footnotes: check that they are correctly formatted "],["steps-copyediting-step-by-step.html", "Chapter 22 Steps: copyediting step-by-step", " Chapter 22 Steps: copyediting step-by-step (If needed) Prepare Word document for conversion (formulas, styles) Convert document into markdown Complete/Create metadata block (If needed) Format (sub-)sections Create a .bib file from the author’s bibliography Replace the references in the article with the keys from your .bib file Create References section at the end of the document Format inline and block elements Crossreferences Checklist! Proofreading "],["what-to-ask-authors.html", "Chapter 23 What to ask authors", " Chapter 23 What to ask authors There are various ways in which authors can make the editing process easier and quicker: Checking their bibliography for mistakes Sending their bibliography as a .bib file, which can easily be created if they use softwares such as Zotero. (If they use Word) Preparing their Word document: writing their formulas in “equation mode”, using the definite styles for article title, abstract, author name, section titles, block citations. Remind them of the importance of a good title and abstract. "]]
